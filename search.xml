<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试博客</title>
      <link href="/2022/01/31/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/31/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、文件和目录（理解）"><a href="#一、文件和目录（理解）" class="headerlink" title="一、文件和目录（理解）"></a>一、文件和目录（理解）</h1><h2 id="1-1-单用户操作系统和多用户操作系统（科普）"><a href="#1-1-单用户操作系统和多用户操作系统（科普）" class="headerlink" title="1.1 单用户操作系统和多用户操作系统（科普）"></a>1.1 单用户操作系统和多用户操作系统（科普）</h2><ul><li><p><strong>单用户操作系统</strong>：指一台计算机在同一时间 <strong>只能由一个用户</strong> 使用，一个用户独自享用系统的全部硬件和软件资源</p><ul><li><strong>Windows XP</strong> 之前的版本都是单用户操作系统</li></ul></li><li><p><strong>多用户操作系统</strong>：指一台计算机在同一时间可以由 <strong>多个用户</strong> 使用，多个用户共同享用系统的全部硬件和软件资源</p><ul><li><strong>Unix</strong> 和 <strong>Linux</strong> 的设计初衷就是多用户操作系统</li></ul></li></ul><h2 id="1-2-Windows-和-Linux-文件系统区别"><a href="#1-2-Windows-和-Linux-文件系统区别" class="headerlink" title="1.2 Windows 和 Linux 文件系统区别"></a>1.2 <code>Windows</code> 和 <code>Linux</code> 文件系统区别</h2><h3 id="1-2-1-Windows-下的文件系统"><a href="#1-2-1-Windows-下的文件系统" class="headerlink" title="1.2.1 Windows 下的文件系统"></a>1.2.1 <code>Windows</code> 下的文件系统</h3><ul><li>在 <code>Windows</code> 下，打开 “计算机”，我们看到的是一个个的驱动器盘符：</li></ul><p><img src="D:\python学习资料\linux\课程讲义\linux基础\linux\media\14927564336623\001_Windows下的多个盘.png" alt="001_Windows下的多个盘"></p><ul><li>每个驱动器都有自己的根目录结构，这样形成了多个树并列的情形，如图所示：</li></ul><p><img src="D:\python学习资料\linux\课程讲义\linux基础\linux\media\14927564336623\001-Windows下多个盘为节点的目录分支.png" alt="001-Windows下多个盘为节点的目录分支"></p><h3 id="1-2-2-Linux-下的文件系统"><a href="#1-2-2-Linux-下的文件系统" class="headerlink" title="1.2.2 Linux 下的文件系统"></a>1.2.2 <code>Linux</code> 下的文件系统</h3><ul><li>在 <code>Linux</code> 下，我们是看不到这些驱动器盘符，我们看到的是文件夹（目录）：</li></ul><p><img src="D:\python学习资料\linux\课程讲义\linux基础\linux\media\14927564336623\002_Ubuntu文件目录.png" alt="002_Ubuntu文件目录"></p><ul><li><code>Ubuntu</code> 没有盘符这个概念，只有一个根目录 <code>/</code>，所有文件都在它下面</li></ul><p><img src="D:\python学习资料\linux\课程讲义\linux基础\linux\media\14927564336623\003-Linux的树形示意图.png" alt="003-Linux的树形示意图"></p><h3 id="1-2-3-用户目录"><a href="#1-2-3-用户目录" class="headerlink" title="1.2.3 用户目录"></a>1.2.3 用户目录</h3><p>位于 <code>/home/user</code>，称之为用户工作目录或家目录，表示方式：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/user</span><br><span class="line">~</span><br></pre></td></tr></tbody></table></figure><p>用户只能对自己的的文件及其子文件进行操作</p><h3 id="1-2-4-Linux-主要目录速查表"><a href="#1-2-4-Linux-主要目录速查表" class="headerlink" title="1.2.4 Linux 主要目录速查表"></a>1.2.4 <code>Linux</code> 主要目录速查表</h3><ul><li>/：根目录，<strong>一般根目录下只存放目录</strong>，在 linux 下有且只有一个根目录，所有的东西都是从这里开始<ul><li>当在终端里输入 <code>/home</code>，其实是在告诉电脑，先从 <code>/</code>（根目录）开始，再进入到 <code>home</code> 目录</li></ul></li><li>/bin、/usr/bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等</li><li>/boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub</code></li><li>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount /dev/cdrom /mnt</code></li><li>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 <ul><li>/etc/inittab</li><li>/etc/fstab</li><li>/etc/init.d</li><li>/etc/X11</li><li>/etc/sysconfig</li><li>/etc/xinetd.d</li></ul></li><li>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下<ul><li><code>~</code> 表示当前用户的家目录</li><li><code>~edu</code> 表示用户 <code>edu</code> 的家目录</li></ul></li><li>/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下</li><li>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载</li><li>/opt：给主机额外安装软件所摆放的目录</li><li>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等</li><li>/root：系统管理员root的家目录</li><li>/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能”查看”而不能设置和使用</li><li>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下</li><li>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内</li><li>/usr：应用程序存放目录<ul><li>/usr/bin：存放应用程序</li><li>/usr/share：存放共享数据</li><li>/usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li><li>/usr/local：存放软件升级包</li><li>/usr/share/doc：系统说明文件存放目录</li><li>/usr/share/man：程序说明文件存放目录</li></ul></li><li>/var：放置系统执行过程中经常变化的文件<ul><li>/var/log：随时更改的日志文件 </li><li>/var/spool/mail：邮件存放的目录</li><li>/var/run：程序或服务启动后，其 PID 存放在该目录下</li></ul></li></ul><h1 id="二、常用-Linux-命令的基本使用"><a href="#二、常用-Linux-命令的基本使用" class="headerlink" title="二、常用 Linux 命令的基本使用"></a>二、常用 Linux 命令的基本使用</h1><h2 id="2-1-学习-Linux-终端命令的原因"><a href="#2-1-学习-Linux-终端命令的原因" class="headerlink" title="2.1 学习 Linux 终端命令的原因"></a>2.1 学习 Linux 终端命令的原因</h2><ul><li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li><li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li><li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li><li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li></ul><blockquote><p>学习终端命令的技巧：</p><ul><li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li><li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li></ul></blockquote><h2 id="2-2-Linux-终端命令格式"><a href="#2-2-Linux-终端命令格式" class="headerlink" title="2.2 Linux 终端命令格式"></a>2.2 Linux 终端命令格式</h2><h3 id="2-2-1-终端命令格式"><a href="#2-2-1-终端命令格式" class="headerlink" title="2.2.1 终端命令格式"></a>2.2.1 终端命令格式</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [-options] [parameter]</span><br></pre></td></tr></tbody></table></figure><p>说明：</p><ul><li><code>command</code>：命令名，相应功能的英文单词或单词的缩写</li><li><code>[-options]</code>：选项，可用来对命令进行控制，也可以省略</li><li><code>parameter</code>：传给命令的参数，可以是 <strong>零个</strong>、<strong>一个</strong> 或者 <strong>多个</strong></li></ul><blockquote><p><code>[]</code> 代表可选 </p></blockquote><h3 id="2-2-2-查阅命令帮助信息（知道）"><a href="#2-2-2-查阅命令帮助信息（知道）" class="headerlink" title="2.2.2 查阅命令帮助信息（知道）"></a>2.2.2 查阅命令帮助信息（知道）</h3><blockquote><p>提示</p><ul><li>现阶段只需要 <strong>知道</strong> 通过以下两种方式可以查询命令的帮助信息</li><li>先学习<strong>常用命令</strong>及<strong>常用选项</strong>的使用即可，工作中如果遇到问题可以借助 <strong>网络搜索</strong></li></ul></blockquote><h4 id="①-help"><a href="#①-help" class="headerlink" title="① --help"></a>① <code>--help</code></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure><p>说明：</p><ul><li>显示 <code>command</code> 命令的帮助信息</li></ul><h4 id="②-man"><a href="#②-man" class="headerlink" title="② man"></a>② man</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">command</span></span><br></pre></td></tr></tbody></table></figure><p>说明：</p><ul><li>查阅 <code>command</code> 命令的使用手册</li></ul><blockquote><p><code>man</code> 是 <strong>manual</strong> 的缩写，是 Linux 提供的一个 <strong>手册</strong>，包含了绝大部分的命令、函数的详细使用说明</p></blockquote><p>使用 <code>man</code> 时的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table><h2 id="2-3-常用-Linux-命令的基本使用"><a href="#2-3-常用-Linux-命令的基本使用" class="headerlink" title="2.3 常用 Linux 命令的基本使用"></a>2.3 常用 Linux 命令的基本使用</h2><h3 id="2-3-1-常用命令表"><a href="#2-3-1-常用命令表" class="headerlink" title="2.3.1 常用命令表"></a>2.3.1 常用命令表</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print work directory</td><td>查看当前所在文件夹</td></tr><tr><td>03</td><td>cd [目录名]</td><td>change directory</td><td>切换文件夹</td></tr><tr><td>04</td><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>05</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm [文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><blockquote><p>小技巧</p><ul><li><code>ctrl + shift + = </code> <strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + - </code> <strong>缩小</strong>终端窗口的字体显示</li></ul></blockquote><h3 id="2-3-2-终端实用技巧"><a href="#2-3-2-终端实用技巧" class="headerlink" title="2.3.2 终端实用技巧"></a>2.3.2 终端实用技巧</h3><h4 id="①-自动补全"><a href="#①-自动补全" class="headerlink" title="① 自动补全"></a>① 自动补全</h4><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><h4 id="②-曾经使用过的命令"><a href="#②-曾经使用过的命令" class="headerlink" title="② 曾经使用过的命令"></a>② 曾经使用过的命令</h4><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul><h2 id="2-4-文件和目录常用命令"><a href="#2-4-文件和目录常用命令" class="headerlink" title="2.4 文件和目录常用命令"></a>2.4 文件和目录常用命令</h2><ul><li>查看目录内容<ul><li><code>ls</code></li></ul></li><li>切换目录<ul><li><code>cd</code></li></ul></li><li>创建和删除操作<ul><li><code>touch</code></li><li><code>rm</code></li><li><code>mkdir</code></li></ul></li><li>拷贝和移动文件<ul><li><code>cp</code></li><li><code>mv</code></li></ul></li><li>查看文件内容<ul><li><code>cat</code></li><li><code>more</code></li><li><code>grep</code></li></ul></li><li>其他<ul><li><code>echo</code></li><li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></li><li>管道 <code>|</code></li></ul></li></ul><h3 id="2-4-1-查看目录内容"><a href="#2-4-1-查看目录内容" class="headerlink" title="2.4.1 查看目录内容"></a>2.4.1 查看目录内容</h3><h4 id="2-4-1-1-ls-命令说明"><a href="#2-4-1-1-ls-命令说明" class="headerlink" title="2.4.1.1 ls 命令说明"></a>2.4.1.1 <code>ls</code> 命令说明</h4><ul><li><code>ls</code> 是英文单词 <strong>list</strong> 的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令</li></ul><h4 id="2-4-1-2-Linux-下文件和目录的特点"><a href="#2-4-1-2-Linux-下文件和目录的特点" class="headerlink" title="2.4.1.2 Linux 下文件和目录的特点"></a>2.4.1.2 Linux 下文件和目录的特点</h4><ul><li>Linux <strong>文件</strong> 或者 <strong>目录</strong> 名称最长可以有 <code>256</code> 个字符</li><li>以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</li><li><strong>.</strong> 代表当前目录</li><li><strong>..</strong> 代表上一级目录</li></ul><h4 id="2-4-1-3-ls-常用选项"><a href="#2-4-1-3-ls-常用选项" class="headerlink" title="2.4.1.3 ls 常用选项"></a>2.4.1.3 ls 常用选项</h4><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><ul><li>其中-h单独不起作用，必须和-l一起使用，如<strong>ls -l -h</strong></li><li>当有多个ls命令参数时，可写在一起，如<strong>ls -lha</strong>表示<strong>ls -l -h -a</strong></li></ul><h4 id="2-4-1-4-ls-通配符的使用"><a href="#2-4-1-4-ls-通配符的使用" class="headerlink" title="2.4.1.4 ls 通配符的使用"></a>2.4.1.4 ls 通配符的使用</h4><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数个字符</td></tr><tr><td>?</td><td>代表任意一个字符，至少 1 个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任一一个</td></tr><tr><td>[abc]</td><td>匹配 a、b、c 中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配从 a 到 f 范围内的的任意一个字符</td></tr></tbody></table><p>如<strong>ls 1</strong>*表示列出所有以1开头的文件，**ls [123]4.txt **表示第一个字符是[123]中其中一个并且最后一个字符是4的文件 </p><h3 id="2-4-2-切换目录"><a href="#2-4-2-切换目录" class="headerlink" title="2.4.2 切换目录"></a>2.4.2 切换目录</h3><h4 id="2-4-2-1-cd"><a href="#2-4-2-1-cd" class="headerlink" title="2.4.2.1 cd"></a>2.4.2.1 <code>cd</code></h4><ul><li><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li></ul><blockquote><p>注意：Linux 所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p></blockquote><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td>cd ~</td><td>切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td>cd .</td><td>保持在当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h4 id="2-4-2-1-相对路径和绝对路径"><a href="#2-4-2-1-相对路径和绝对路径" class="headerlink" title="2.4.2.1 相对路径和绝对路径"></a>2.4.2.1 相对路径和绝对路径</h4><ul><li><strong>相对路径</strong> 在输入路径时，最前面不是 <strong>/</strong> 或者 **~**，表示相对 <strong>当前目录</strong> 所在的目录位置</li><li><strong>绝对路径</strong> 在输入路径时，最前面是 <strong>/</strong> 或者 **~**，表示从 <strong>根目录/家目录</strong> 开始的具体目录位置</li></ul><h3 id="2-4-3-创建和删除操作"><a href="#2-4-3-创建和删除操作" class="headerlink" title="2.4.3 创建和删除操作"></a>2.4.3 创建和删除操作</h3><h4 id="2-4-3-1-touch"><a href="#2-4-3-1-touch" class="headerlink" title="2.4.3.1 touch"></a>2.4.3.1 <code>touch</code></h4><ul><li>创建文件或修改文件时间<ul><li>如果文件 <strong>不存在</strong>，可以创建一个空白文件</li><li>如果文件 <strong>已经存在</strong>，可以修改文件的末次修改日期</li></ul></li></ul><h4 id="2-4-3-2-mkdir"><a href="#2-4-3-2-mkdir" class="headerlink" title="2.4.3.2 mkdir"></a>2.4.3.2 <code>mkdir</code></h4><ul><li>创建一个新的目录</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><p>如<strong>mkdir -p a/b/c/d</strong></p><blockquote><p><strong>新建目录的名称</strong> 不能与当前目录中 <strong>已有的目录或文件</strong> 同名</p></blockquote><h4 id="2-4-3-3-rm"><a href="#2-4-3-3-rm" class="headerlink" title="2.4.3.3 rm"></a>2.4.3.3 <code>rm</code></h4><ul><li>删除文件或目录</li></ul><blockquote><p>使用 <code>rm</code> 命令要小心，因为文件删除后不能恢复</p></blockquote><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数</td></tr></tbody></table><h3 id="2-4-4-拷贝和移动文件"><a href="#2-4-4-拷贝和移动文件" class="headerlink" title="2.4.4 拷贝和移动文件"></a>2.4.4 拷贝和移动文件</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>tree [目录名]</td><td>tree</td><td>以树状图列出文件目录结构</td></tr><tr><td>02</td><td>cp 源文件 目标文件</td><td>copy</td><td>复制文件或者目录</td></tr><tr><td>03</td><td>mv 源文件 目标文件</td><td>move</td><td>移动文件或者目录／文件或者目录重命名</td></tr></tbody></table><h4 id="2-4-4-1-tree"><a href="#2-4-4-1-tree" class="headerlink" title="2.4.4.1 tree"></a>2.4.4.1 <code>tree</code></h4><ul><li><code>tree</code> 命令可以以树状图列出文件目录结构</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>只显示目录</td></tr></tbody></table><h4 id="2-4-4-2-cp"><a href="#2-4-4-2-cp" class="headerlink" title="2.4.4.2 cp"></a>2.4.4.2 <code>cp</code></h4><ul><li><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中，相当于 <strong>DOS</strong> 下的 <code>copy</code> 命令</li><li>如<strong>cp  ./aaa/1.txt  ./bbb/2.txt</strong>就是将aaa中的1.txt文件负责到bbb中，并命名为2.txt</li><li>若文件复制后名字不变，则可不写文件名，只写路径，如<strong>cp ./aaa/1.txt ./bbb</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr></tbody></table><ul><li>对于**-i<strong>命令，询问是否覆盖时，输入</strong>y<strong>为覆盖，</strong>n**为不覆盖</li></ul><h4 id="2-4-4-3-mv"><a href="#2-4-4-3-mv" class="headerlink" title="2.4.4.3 mv"></a>2.4.4.3 <code>mv</code></h4><ul><li><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><ul><li>对于**-i<strong>命令，询问是否覆盖时，输入</strong>y<strong>为覆盖，</strong>n**为不覆盖</li></ul><h3 id="2-4-5-查看文件内容"><a href="#2-4-5-查看文件内容" class="headerlink" title="2.4.5 查看文件内容"></a>2.4.5 查看文件内容</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本 文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h4 id="2-4-5-1-cat"><a href="#2-4-5-1-cat" class="headerlink" title="2.4.5.1 cat"></a>2.4.5.1 <code>cat</code></h4><ul><li><code>cat</code> 命令可以用来 <strong>查看文件内容</strong>、<strong>创建文件</strong>、<strong>文件合并</strong>、<strong>追加文件内容</strong> 等功能</li><li><code>cat</code> 会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对非空输出行编号</td></tr><tr><td>-n</td><td>对输出的所有行编号</td></tr></tbody></table><blockquote><p>Linux 中还有一个 <code>nl</code> 的命令和 <code>cat -b</code> 的效果等价</p></blockquote><h4 id="2-4-5-2-more"><a href="#2-4-5-2-more" class="headerlink" title="2.4.5.2 more"></a>2.4.5.2 <code>more</code></h4><ul><li><code>more</code> 命令可以用于分屏显示文件内容，每次只显示一页内容</li><li>适合于 <strong>查看内容较多</strong>的文本文件</li></ul><p>使用 <code>more</code> 的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table><h4 id="2-4-5-3-grep"><a href="#2-4-5-3-grep" class="headerlink" title="2.4.5.3 grep"></a>2.4.5.3 <code>grep</code></h4><ul><li>Linux 系统中 <code>grep</code> 命令是一种强大的文本搜索工具</li><li><code>grep</code>允许对文本文件进行 <strong>模式</strong>查找，所谓模式查找，又被称为正则表达式</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>显示不包含匹配文本的所有行（相当于求反）</td></tr><tr><td>-i</td><td>忽略大小写</td></tr></tbody></table><p>如<strong>grep -n hello 1.txt</strong>表示在1.txt中寻找包含有hello的行的内容，并显示行号</p><p>如果要搜索的内容中间<strong>有空格</strong>，则应该用<strong>双引号</strong>引起来</p><ul><li>常用的两种模式查找</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜寻以 <strong>a</strong> 开头的行</td></tr><tr><td>ke$</td><td>行尾，搜寻以 <strong>ke</strong> 结束的行</td></tr></tbody></table><h3 id="2-4-6-其他"><a href="#2-4-6-其他" class="headerlink" title="2.4.6 其他"></a>2.4.6 其他</h3><h4 id="2-4-6-1-echo-文字内容"><a href="#2-4-6-1-echo-文字内容" class="headerlink" title="2.4.6.1 echo 文字内容"></a>2.4.6.1 <code>echo 文字内容</code></h4><ul><li><code>echo</code> 会在终端中显示参数指定的文字，通常会和 <strong>重定向</strong> 联合使用</li></ul><h4 id="2-4-6-2-重定向-gt-和-gt-gt"><a href="#2-4-6-2-重定向-gt-和-gt-gt" class="headerlink" title="2.4.6.2 重定向 > 和 >>"></a>2.4.6.2 重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h4><ul><li>Linux 允许将命令执行结果 <strong>重定向</strong>到一个 <strong>文件</strong></li><li>将本应显示在<strong>终端上的内容</strong> <strong>输出／追加</strong> 到<strong>指定文件中</strong></li></ul><p>其中</p><ul><li><code>&gt;</code> 表示输出，会覆盖文件原有的内容</li><li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</li></ul><h4 id="2-4-6-3-管道"><a href="#2-4-6-3-管道" class="headerlink" title="2.4.6.3 管道 |"></a>2.4.6.3 管道 <code>|</code></h4><ul><li>Linux 允许将 <strong>一个命令的输出</strong> 可以<strong>通过管道</strong> 做为 <strong>另一个命令的输入</strong></li><li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</li></ul><p>常用的管道命令有：</p><ul><li><code>more</code>：分屏显示内容</li><li><code>grep</code>：在命令执行结果的基础上查询指定的文本</li></ul><h1 id="三、远程管理常用命令"><a href="#三、远程管理常用命令" class="headerlink" title="三、远程管理常用命令"></a>三、远程管理常用命令</h1><ul><li>关机/重启<ul><li><code>shutdown</code></li></ul></li><li>查看或配置网卡信息<ul><li><code>ifconfig</code></li><li><code>ping</code></li></ul></li><li>远程登录和复制文件<ul><li><code>ssh</code></li><li><code>scp</code></li></ul></li></ul><h2 id="3-1-关机-重启"><a href="#3-1-关机-重启" class="headerlink" title="3.1 关机/重启"></a>3.1 关机/重启</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机／重新启动</td></tr></tbody></table><h3 id="3-1-1-shutdown"><a href="#3-1-1-shutdown" class="headerlink" title="3.1.1 shutdown"></a>3.1.1 <code>shutdown</code></h3><ul><li><code>shutdown</code> 命令可以 <strong>安全</strong> <strong>关闭</strong> 或者 <strong>重新启动系统</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr></tbody></table><blockquote><p>提示：</p><ul><li><strong>不指定选项和参数</strong>，默认表示 <strong>1 分钟</strong>之后 <strong>关闭电脑</strong></li><li>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</li></ul></blockquote><ul><li>常用命令示例</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新启动操作系统，其中 now 表示现在</span></span><br><span class="line">$ shutdown -r now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立刻关机，其中 now 表示现在</span></span><br><span class="line">$ shutdown now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统在今天的 20:25 会关机</span></span><br><span class="line">$ shutdown 20:25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统再过十分钟后自动关机</span></span><br><span class="line">$ shutdown +10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消之前指定的关机计划</span></span><br><span class="line">$ shutdown -c</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-查看或配置网卡信息"><a href="#3-2-查看或配置网卡信息" class="headerlink" title="3.2 查看或配置网卡信息"></a>3.2 查看或配置网卡信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>configure a network interface</td><td>查看/配置计算机当前的网卡配置信息</td></tr><tr><td>02</td><td>ping ip地址</td><td>ping</td><td>检测到目标 ip地址 的连接是否正常</td></tr></tbody></table><h3 id="3-2-1-网卡-和-IP-地址"><a href="#3-2-1-网卡-和-IP-地址" class="headerlink" title="3.2.1 网卡 和 IP 地址"></a>3.2.1 网卡 和 IP 地址</h3><p>①网卡</p><ul><li>网卡是一个专门负责网络通讯的硬件设备</li><li><strong>IP 地址</strong>是设置在网卡上的地址信息</li></ul><blockquote><p>我们可以把 <strong>电脑</strong> 比作 <strong>电话</strong>，<strong>网卡</strong> 相当于 <strong>SIM 卡</strong>，<strong>IP 地址</strong> 相当于 <strong>电话号码</strong></p></blockquote><p>②IP 地址</p><ul><li><strong>每台联网的电脑上</strong>都有 <strong>IP 地址</strong>，<strong>是保证电脑之间正常通讯的重要设置</strong></li></ul><blockquote><p>注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯</p><p>提示：有关 <strong>IP 地址</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h3 id="3-2-2-ifconfig"><a href="#3-2-2-ifconfig" class="headerlink" title="3.2.2 ifconfig"></a>3.2.2 <code>ifconfig</code></h3><ul><li><code>ifconfig</code> 可以查看／配置计算机当前的网卡配置信息</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网卡配置信息</span></span><br><span class="line">$ ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网卡对应的 IP 地址</span></span><br><span class="line">$ ifconfig | grep inet</span><br></pre></td></tr></tbody></table></figure><blockquote><p>提示：一台计算机中有可能会有一个 <strong>物理网卡</strong> 和 <strong>多个虚拟网卡</strong>，在 Linux 中物理网卡的名字通常以 <code>ensXX</code> 表示</p></blockquote><ul><li><code>127.0.0.1</code> 被称为 <strong>本地回环/环回地址</strong>，一般用来测试本机网卡是否正常</li></ul><h3 id="3-2-3-ping"><a href="#3-2-3-ping" class="headerlink" title="3.2.3 ping"></a>3.2.3 <code>ping</code></h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测到目标主机是否连接正常</span></span><br><span class="line">$ ping IP地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测本地网卡工作正常</span></span><br><span class="line">$ ping 127.0.0.1</span><br></pre></td></tr></tbody></table></figure><ul><li><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>，<strong>数值越大，速度越慢</strong></li></ul><blockquote><ul><li><code>ping</code> 的工作原理与潜水艇的声纳相似，<code>ping</code> 这个命令就是取自 <strong>声纳的声音</strong> </li><li>网络管理员之间也常将 <code>ping</code> 用作动词 —— <strong>ping 一下计算机X，看他是否开着</strong></li></ul></blockquote><p>原理：网络上的机器都有 <strong>唯一确定的 IP 地址</strong>，我们给<strong>目标 IP 地址</strong>发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</p><blockquote><p>提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 <code>CTRL + C</code></p></blockquote><h2 id="3-3-远程登录和复制文件"><a href="#3-3-远程登录和复制文件" class="headerlink" title="3.3 远程登录和复制文件"></a>3.3 远程登录和复制文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh 用户名@ip</td><td>secure shell</td><td>关机／重新启动</td></tr><tr><td>02</td><td>scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h3 id="3-3-1-ssh-基础（重点）"><a href="#3-3-1-ssh-基础（重点）" class="headerlink" title="3.3.1 ssh 基础（重点）"></a>3.3.1 <code>ssh</code> 基础（重点）</h3><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934132718311/001_SSH示意图.png" alt="001_SSH示意图"></p><ul><li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li><li><code>SSH</code> 是目前较可靠，<strong>专为远程登录会话和其他网络服务</strong> 提供安全性的协议<ul><li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li><li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li></ul></li><li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li></ul><h4 id="①-域名和端口号"><a href="#①-域名和端口号" class="headerlink" title="① 域名和端口号"></a>① 域名和端口号</h4><h5 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h5><ul><li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li><li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li></ul><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><ul><li><p><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></p></li><li><p><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong></p><ul><li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li></ul></li><li><p>常见服务端口号列表：</p></li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH 服务器</td><td>22</td></tr><tr><td>02</td><td>Web 服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP 服务器</td><td>21</td></tr></tbody></table><h4 id="②-SSH-客户端的简单使用"><a href="#②-SSH-客户端的简单使用" class="headerlink" title="② SSH 客户端的简单使用"></a>② SSH 客户端的简单使用</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [-p port] user@remote</span><br></pre></td></tr></tbody></table></figure><ul><li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li><li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li><li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li></ul><blockquote><p>提示：</p><ul><li>使用 <code>exit</code> 退出当前用户的登录</li></ul><p>注意：</p><ul><li><code>ssh</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code> 或者 <code>XShell</code> 客户端软件即可</li></ul><p>提示：</p><ul><li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li></ul></blockquote><ul><li>如果远程控制的时候某些操作提示权限不够，就在命令的前面加<strong>sudo</strong></li></ul><h4 id="③-Windows-下-SSH-客户端的安装"><a href="#③-Windows-下-SSH-客户端的安装" class="headerlink" title="③ Windows 下 SSH 客户端的安装"></a>③ Windows 下 SSH 客户端的安装</h4><ul><li><code>Putty</code> <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li><li><code>XShell</code> <a href="http://xshellcn.com/">http://xshellcn.com</a></li></ul><blockquote><p>建议从官方网站下载正式的安装程序</p></blockquote><h3 id="3-3-2-scp（掌握）"><a href="#3-3-2-scp（掌握）" class="headerlink" title="3.3.2 scp（掌握）"></a>3.3.2 <code>scp</code>（掌握）</h3><ul><li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li><li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li></ul><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934132718311/002_SCP示意图.png" alt="002_SCP示意图"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地当前目录下的 01.py 文件复制到远程家目录下的 Desktop/01.py</span></span><br><span class="line"><span class="comment"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径，注意是大写P</span></span><br><span class="line">scp -P port 01.py user@remote:Desktop/01.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把远程家目录下的 Desktop/01.py 文件复制到本地当前目录下的 01.py</span></span><br><span class="line">scp -P port user@remote:Desktop/01.py 01.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 -r 选项可以传送文件夹</span></span><br><span class="line"><span class="comment"># 把当前目录下的 demo 文件夹复制到远程家目录下的 Desktop</span></span><br><span class="line">scp -P 22 -r demo user@remote:Desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把远程家目录下的 Desktop 复制到当前目录下的 demo 文件夹</span></span><br><span class="line">scp -P 22 -r user@remote:Desktop demo</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code>，使用 <code>pscp</code> 命令行工具或者安装 <code>FileZilla</code> 使用 <code>FTP</code> 进行文件传输</li></ul></blockquote><h4 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a><code>FileZilla</code></h4><ul><li>官方网站：<a href="https://www.filezilla.cn/download/client">https://www.filezilla.cn/download/client</a></li><li><code>FileZilla</code> 在传输文件时，使用的是 <code>FTP 服务</code> 而不是 <code>SSH 服务</code>，因此端口号应该设置为 <code>21</code></li></ul><h3 id="3-3-3-SSH-高级（知道）"><a href="#3-3-3-SSH-高级（知道）" class="headerlink" title="3.3.3 SSH 高级（知道）"></a>3.3.3 SSH 高级（知道）</h3><ul><li>免密码登录</li><li>配置别名</li></ul><blockquote><p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下，第一次连接时需要授权，同意授权后该主机信息就会被保存到.ssh文件中，下次连接同一个服务器时就不用授权了，但还是需要密码</p></blockquote><h4 id="①-免密码登录"><a href="#①-免密码登录" class="headerlink" title="① 免密码登录"></a>① 免密码登录</h4><p>步骤如下：</p><ul><li>配置公钥<ul><li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li></ul></li><li>上传公钥到服务器<ul><li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li></ul></li></ul><p>示意图如下：</p><p>![003_SSH 免密码示意图](D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934132718311/003_SSH 免密码示意图.png)</p><blockquote><p>非对称加密算法</p><ul><li>使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密</li><li>使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密</li></ul></blockquote><h4 id="②-配置别名"><a href="#②-配置别名" class="headerlink" title="② 配置别名"></a>② 配置别名</h4><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p><p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host mac</span><br><span class="line">    HostName ip地址</span><br><span class="line">    User itheima</span><br><span class="line">    Port 22</span><br></pre></td></tr></tbody></table></figure><p><strong>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</strong></p><ul><li>如果~/.ssh目录下没有config文件，就自己创建一个</li></ul><h1 id="四、用户权限相关命令"><a href="#四、用户权限相关命令" class="headerlink" title="四、用户权限相关命令"></a>四、用户权限相关命令</h1><ul><li><strong>用户</strong> 和 <strong>权限</strong> 的基本概念</li><li><strong>用户管理</strong> 终端命令</li><li><strong>组管理</strong> 终端命令</li><li><strong>修改权限</strong> 终端命令</li></ul><h2 id="4-1-用户和权限的基本概念"><a href="#4-1-用户和权限的基本概念" class="headerlink" title="4.1 用户和权限的基本概念"></a>4.1 <strong>用户</strong>和<strong>权限</strong>的基本概念</h2><h3 id="4-1-1-基本概念"><a href="#4-1-1-基本概念" class="headerlink" title="4.1.1 基本概念"></a>4.1.1 基本概念</h3><ul><li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括<strong>用户</strong>与<strong>组</strong>管理</li><li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li><li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li><li>对 <strong>文件／目录</strong> 的权限包括：</li></ul><table><thead><tr><th align="center">序号</th><th align="center">权限</th><th align="center">英文</th><th align="center">缩写</th><th align="center">数字代号</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">读</td><td align="center">read</td><td align="center">r</td><td align="center">4</td></tr><tr><td align="center">02</td><td align="center">写</td><td align="center">write</td><td align="center">w</td><td align="center">2</td></tr><tr><td align="center">03</td><td align="center">执行</td><td align="center">excute</td><td align="center">x</td><td align="center">1</td></tr></tbody></table><h3 id="4-1-2-组"><a href="#4-1-2-组" class="headerlink" title="4.1.2 组"></a>4.1.2 组</h3><ul><li>为了方便用户管理，提出了 <strong>组</strong> 的概念，如下图所示</li></ul><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934198815905/001_组示意图.png" alt="001_组示意图"></p><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h3 id="4-1-3-ls-l-扩展"><a href="#4-1-3-ls-l-扩展" class="headerlink" title="4.1.3 ls -l 扩展"></a>4.1.3 ls -l 扩展</h3><ul><li><p><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：</p><ul><li><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件<ul><li>文件的硬链接数<strong>通常为1，也就是绝对路径</strong></li><li>目的硬链接数取决于其子目录数，通常为<strong>绝对路径+自己本身（cd .）+子目录数（cd ..）</strong></li></ul></li><li><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</li><li><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</li><li><strong>大小</strong></li><li><strong>时间</strong></li><li><strong>名称</strong></li></ul></li></ul><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934198815905/002_权限示意图.png" alt="002_权限示意图"></p><h3 id="4-1-4-chmod-简单使用（重要）"><a href="#4-1-4-chmod-简单使用（重要）" class="headerlink" title="4.1.4 chmod 简单使用（重要）"></a>4.1.4 <code>chmod</code> 简单使用（重要）</h3><ul><li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></tbody></table></figure><blockquote><p>提示：以上方式会一次性修改 <code>拥有者</code> / <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p></blockquote><ul><li>对于目录，一定要有可执行权限，否则无法进入该目录</li></ul><h3 id="4-1-5-超级用户"><a href="#4-1-5-超级用户" class="headerlink" title="4.1.5 超级用户"></a>4.1.5 超级用户</h3><ul><li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li><li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li><li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li></ul><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><ul><li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li><li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li><li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li></ul><blockquote><p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p></blockquote><h2 id="4-2-组管理终端命令"><a href="#4-2-组管理终端命令" class="headerlink" title="4.2 组管理终端命令"></a>4.2 <strong>组管理</strong>终端命令</h2><blockquote><p>提示：<strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>groupadd 组名</td><td>添加组</td></tr><tr><td>02</td><td>groupdel 组名</td><td>删除组</td></tr><tr><td>03</td><td>cat  /etc/group</td><td>确认组信息</td></tr><tr><td>04</td><td>chgrp -R 组名 文件/目录名</td><td>递归修改文件/目录的所属组</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>组信息保存在 <code>/etc/group</code> 文件中</li><li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li></ul></blockquote><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934198815905/001_组示意图.png" alt="001_组示意图"></p><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h4 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h4><ol><li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li><li>新建 <code>dev</code> 组</li><li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li></ol><h2 id="4-3-用户管理终端命令"><a href="#4-3-用户管理终端命令" class="headerlink" title="4.3 用户管理终端命令"></a>4.3 <strong>用户管理</strong>终端命令</h2><blockquote><p>提示：<strong>创建用户</strong> / <strong>删除用户</strong> / <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><h3 id="4-3-1-创建用户／设置密码／删除用户"><a href="#4-3-1-创建用户／设置密码／删除用户" class="headerlink" title="4.3.1 创建用户／设置密码／删除用户"></a>4.3.1 创建用户／设置密码／删除用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>useradd -m -g 组 新建用户名</td><td>添加新用户</td><td>-m 自动建立用户家目录<br> -g 指定用户所在的组，否则会建立一个和同名的组</td></tr><tr><td>02</td><td>passwd 用户名</td><td>设置用户密码</td><td>如果是普通用户，直接用 passwd 可以修改自己的账户密码</td></tr><tr><td>03</td><td>userdel -r 用户名</td><td>删除用户</td><td>-r 选项会自动删除用户家目录</td></tr><tr><td>04</td><td>cat /etc/passwd | grep 用户名</td><td>确认用户信息</td><td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li><li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li><li>用户信息保存在 <code>/etc/passwd</code> 文件中</li></ul></blockquote><h4 id="①passwd-文件"><a href="#①passwd-文件" class="headerlink" title="①passwd 文件"></a>①passwd 文件</h4><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号，若没有全名则默认为用户名</li><li>家目录</li><li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li></ol><ul><li>如ch：x：1000：1000：ch,,,:/home/ch:/bin/bash</li></ul><h3 id="4-3-2-查看用户信息"><a href="#4-3-2-查看用户信息" class="headerlink" title="4.3.2 查看用户信息"></a>4.3.2 查看用户信息</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>id [用户名]</td><td>查看用户 UID 和 GID 信息</td></tr><tr><td>02</td><td>who</td><td>查看当前所有登录的用户列表</td></tr><tr><td>03</td><td>whoami</td><td>查看当前登录用户的账户</td></tr></tbody></table><h4 id="①usermod"><a href="#①usermod" class="headerlink" title="①usermod"></a>①usermod</h4><ul><li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li><li><strong>主组</strong>：就是-g时指定的组，若没有指定，则为系统自动创建的与用户名相同的组，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li><li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong>，比如sudo</li></ul><blockquote><p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改用户的主组（passwd 中的 GID）</span></span><br><span class="line">usermod -g 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户的附加组</span></span><br><span class="line">usermod -G 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户登录 Shell</span></span><br><span class="line">usermod -s /bin/bash 用户名</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G sudo 用户名</span><br></pre></td></tr></tbody></table></figure><h4 id="②which（重要）"><a href="#②which（重要）" class="headerlink" title="②which（重要）"></a>②which（重要）</h4><blockquote><p>提示</p><ul><li><code>/etc/passwd</code> 是用于保存用户信息的文件</li><li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li></ul></blockquote><ul><li><code>which</code> 命令可以查看执行命令所在位置，例如：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /bin/ls</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> useradd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /usr/sbin/useradd</span></span><br></pre></td></tr></tbody></table></figure><h5 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h5><ul><li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li><li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li><li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li><li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li><li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li></ul><blockquote><p>提示：</p><ul><li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li></ul></blockquote><h3 id="4-3-3-切换用户"><a href="#4-3-3-切换用户" class="headerlink" title="4.3.3 切换用户"></a>4.3.3 切换用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>su - 用户名</td><td>切换用户，并且切换目录</td><td>- 可以切换到用户家目录，否则保持位置不变</td></tr><tr><td>02</td><td>exit</td><td>退出当前登录账户</td><td></td></tr></tbody></table><ul><li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li><li><code>exit</code> 示意图如下：</li></ul><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934198815905/003_su和exit示意图.png" alt="003_su和exit示意图"></p><h2 id="4-4-修改文件权限"><a href="#4-4-修改文件权限" class="headerlink" title="4.4 修改文件权限"></a>4.4 修改文件权限</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>chown</td><td>修改拥有者</td></tr><tr><td>02</td><td>chgrp</td><td>修改组</td></tr><tr><td>03</td><td>chmod</td><td>修改权限</td></tr></tbody></table><ul><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改文件|目录的拥有者</span></span><br><span class="line">chown 用户名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件|目录的组</span></span><br><span class="line">chgrp -R 组名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件权限</span></span><br><span class="line">chmod -R 755 文件名|目录名</span><br></pre></td></tr></tbody></table></figure><ul><li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他</span></span><br><span class="line">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></tbody></table></figure><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934198815905/004_文件权限示意图.png" alt="004_文件权限示意图"></p><ul><li>常见数字组合有（<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他）：<ul><li><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code> </li><li><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></li><li><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></li></ul></li></ul><h1 id="五、系统信息相关命令"><a href="#五、系统信息相关命令" class="headerlink" title="五、系统信息相关命令"></a>五、系统信息相关命令</h1><ul><li>时间和日期<ul><li><code>date</code></li><li><code>cal</code></li></ul></li><li>磁盘和目录空间<ul><li><code>df</code></li><li><code>du</code></li></ul></li><li>进程信息<ul><li><code>ps</code></li><li><code>top</code></li><li><code>kill</code></li></ul></li></ul><h2 id="5-1-时间和日期"><a href="#5-1-时间和日期" class="headerlink" title="5.1 时间和日期"></a>5.1 时间和日期</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>date</td><td>查看系统时间</td></tr><tr><td>02</td><td>cal</td><td><code>calendar</code> 查看日历，默认是一个月，<code>-y</code> 选项可以查看一年的日历</td></tr></tbody></table><h2 id="5-2-磁盘信息"><a href="#5-2-磁盘信息" class="headerlink" title="5.2 磁盘信息"></a>5.2 磁盘信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>df -h</td><td><code>disk free</code> 显示磁盘剩余空间</td></tr><tr><td>02</td><td>du -h [目录名]</td><td><code>disk usage</code> 显示目录下的文件大小，不加目录名则默认为当前目录</td></tr></tbody></table><ul><li>选项说明</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-h</td><td>以人性化的方式显示文件大小</td></tr></tbody></table><h2 id="5-3-进程信息"><a href="#5-3-进程信息" class="headerlink" title="5.3 进程信息"></a>5.3 进程信息</h2><ul><li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ps aux</td><td><code>process status</code> 查看进程的详细状况，注意没有-</td></tr><tr><td>02</td><td>top</td><td>动态显示运行中的进程并且排序</td></tr><tr><td>03</td><td>kill [-9] 进程代号</td><td>终止指定代号的进程，<code>-9</code> 表示强行终止</td></tr></tbody></table><blockquote><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p></blockquote><ul><li><code>ps</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>u</td><td>显示进程的详细状态</td></tr><tr><td>x</td><td>显示没有控制终端的进程，也就是不是通过终端启动的进程</td></tr></tbody></table><blockquote><p>一般只用au，x比较少用</p><p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p><p>提示：要退出 <code>top</code> 可以直接输入 <code>q</code></p></blockquote><h1 id="六、其他命令"><a href="#六、其他命令" class="headerlink" title="六、其他命令"></a>六、其他命令</h1><ul><li>查找文件<ul><li><code>find</code></li></ul></li><li>软链接<ul><li><code>ln</code></li></ul></li><li>打包和压缩<ul><li><code>tar</code></li></ul></li><li>软件安装<ul><li><code>apt-get</code></li></ul></li></ul><h2 id="6-1-查找文件"><a href="#6-1-查找文件" class="headerlink" title="6.1 查找文件"></a>6.1 查找文件</h2><ul><li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>find [路径] -name “*.py”</td><td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td></tr></tbody></table><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li><li>有关 <code>find</code> 的高级使用，在就业班会讲</li></ul><p>例子：</p><ul><li><ol><li>搜索桌面目录下，文件名包含 <code>1</code> 的文件</li></ol></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">"*1*"</span></span><br></pre></td></tr></tbody></table></figure><ul><li><ol start="2"><li>搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li></ol></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">"*.txt"</span></span><br></pre></td></tr></tbody></table></figure><ul><li><ol start="3"><li>搜索桌面目录下，以数字 <code>1</code> 开头的文件</li></ol></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">"1*"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-2-软链接"><a href="#6-2-软链接" class="headerlink" title="6.2 软链接"></a>6.2 软链接</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td></tr></tbody></table><ul><li><p>注意：</p></li><li><ol><li>没有 <code>-s</code> 选项建立的是一个 <strong>硬链接文件</strong> </li></ol><ul><li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li></ul></li><li><ol start="2"><li><strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li></ol></li></ul><h3 id="6-2-1硬链接简介（知道）"><a href="#6-2-1硬链接简介（知道）" class="headerlink" title="6.2.1硬链接简介（知道）"></a>6.2.1硬链接简介（知道）</h3><ul><li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li></ul><h3 id="6-2-2-文件软硬链接的示意图"><a href="#6-2-2-文件软硬链接的示意图" class="headerlink" title="6.2.2 文件软硬链接的示意图"></a>6.2.2 文件软硬链接的示意图</h3><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934226357576/001_文件软硬链接示意图.png" alt="001_文件软硬链接示意图"></p><blockquote><p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p></blockquote><ul><li>提示：<ul><li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li><li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li><li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li></ul></li></ul><h2 id="6-3-打包压缩"><a href="#6-3-打包压缩" class="headerlink" title="6.3 打包压缩"></a>6.3 打包压缩</h2><ul><li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li><li>在不同操作系统中，常用的打包压缩方式是不同的<ul><li><code>Windows</code> 常用 <code>rar</code></li><li><code>Mac</code> 常用 <code>zip</code></li><li><code>Linux</code> 常用 <code>tar.gz</code></li></ul></li></ul><h3 id="6-3-1-打包-／-解包"><a href="#6-3-1-打包-／-解包" class="headerlink" title="6.3.1 打包 ／ 解包"></a>6.3.1 打包 ／ 解包</h3><ul><li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong>，注意<strong>tar只打包，不压缩</strong></li><li><code>tar</code> 的命令格式如下：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包文件</span></span><br><span class="line">tar -cvf 打包文件.tar 被打包的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包文件</span></span><br><span class="line">tar -xvf 打包文件.tar</span><br></pre></td></tr></tbody></table></figure><ul><li><code>tar</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table><blockquote><p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p></blockquote><h3 id="6-3-2-压缩／解压缩"><a href="#6-3-2-压缩／解压缩" class="headerlink" title="6.3.2 压缩／解压缩"></a>6.3.2 压缩／解压缩</h3><h4 id="①-gzip"><a href="#①-gzip" class="headerlink" title="① gzip"></a>① <code>gzip</code></h4><ul><li><code>tar</code> 与 <code>gzip</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong><ul><li><code>tar</code> 只负责打包文件，但不压缩</li><li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li></ul></li></ul><blockquote><p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p></blockquote><ul><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩到指定路径</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：要解压缩的目录必须存在</td></tr></tbody></table><h4 id="②-bzip2-two"><a href="#②-bzip2-two" class="headerlink" title="② bzip2(two)"></a>② <code>bzip2(two)</code></h4><ul><li><p><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）</p><ul><li><code>tar</code> 只负责打包文件，但不压缩，</li><li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li></ul></li><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">tar -jxvf 打包文件.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩到指定路径</span></span><br><span class="line">tar -jxvf 打包文件.tar.bz2 -C 目标路径</span><br></pre></td></tr></tbody></table></figure><h2 id="6-4-软件安装"><a href="#6-4-软件安装" class="headerlink" title="6.4 软件安装"></a>6.4 软件安装</h2><h3 id="6-4-1-通过-apt-安装／卸载软件"><a href="#6-4-1-通过-apt-安装／卸载软件" class="headerlink" title="6.4.1 通过 apt 安装／卸载软件"></a>6.4.1 通过 apt 安装／卸载软件</h3><ul><li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li><li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安装软件</span></span><br><span class="line">$ sudo apt install 软件包</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 卸载软件</span></span><br><span class="line">$ sudo apt remove 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更新已安装的包</span></span><br><span class="line">$ sudo apt upgrade </span><br></pre></td></tr></tbody></table></figure><h3 id="6-4-2-安装演练"><a href="#6-4-2-安装演练" class="headerlink" title="6.4.2 安装演练"></a>6.4.2 安装演练</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个小火车提示</span></span><br><span class="line">$ sudo apt install sl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个比较漂亮的查看当前进程排名的软件</span></span><br><span class="line">$ sudo apt install htop</span><br></pre></td></tr></tbody></table></figure><h3 id="6-4-3-配置软件源"><a href="#6-4-3-配置软件源" class="headerlink" title="6.4.3 配置软件源"></a>6.4.3 配置软件源</h3><ul><li>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</li><li>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</li></ul><blockquote><p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p></blockquote><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934226357576/003_镜像服务器示意图.png" alt="003_镜像服务器示意图"></p><p><img src="D:/python学习资料/linux/课程讲义/linux基础/linux/media/14934226357576/001_ubuntu设置软件源.png" alt="001_ubuntu设置软件源"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/28/hello-world/"/>
      <url>/2022/01/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/19/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/19/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="博客系统笔记"><a href="#博客系统笔记" class="headerlink" title="博客系统笔记"></a>博客系统笔记</h1><h1 id="一、项目讲解说明"><a href="#一、项目讲解说明" class="headerlink" title="一、项目讲解说明"></a>一、项目讲解说明</h1><ul><li>提供前端工程，只需要实现后端接口即可</li><li>项目以单体架构入手，先快速开发，不考虑项目优化，降低开发负担</li><li>开发完成后，开始优化项目，提升编程思维能力</li><li>比如页面静态化，缓存，云存储，日志等</li><li>docker部署上线</li><li>云服务器购买，域名购买，域名备案等</li><li>项目使用技术 ：SpringBoot + MybatisPlus+Redis+Mysql</li></ul><h1 id="二、工程搭建"><a href="#二、工程搭建" class="headerlink" title="二、工程搭建"></a>二、工程搭建</h1><h2 id="2-1-前端工程搭建"><a href="#2-1-前端工程搭建" class="headerlink" title="2.1 前端工程搭建"></a>2.1 前端工程搭建</h2><p>将下载好的前端源码导入Hbuilder X中，然后执行以下操作：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">npm run dev</span><br></pre></td></tr></tbody></table></figure><p>①在package.json所在目录下运行cmd，然后输入npm install下载所需依赖</p><p>②在Hbuilder X客户端点击npm run build进行环境搭建</p><p>③在Hbuilder X客户端点击npm run dev运行前端</p><h2 id="2-2-后端工程搭建"><a href="#2-2-后端工程搭建" class="headerlink" title="2.2 后端工程搭建"></a>2.2 后端工程搭建</h2><p>①通过Spring Initializr新建一个SpringBoot工程，勾选以下依赖：</p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220119212055325.png" alt="image-20220119212055325"></p><p>②添加另外一些可以简化开发的依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--专门处理日期时间的库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>③配置文件</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置端口号为8888，避免于前端端口号8080冲突</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">blog</span>  <span class="comment">#起到了唯一标识的作用</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">datasource:</span>   <span class="comment">#连接数据库</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/blog?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明数据库表表名前缀，以及声明数控表采用id自增策略</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">ms_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印输出mybaits日志</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure><p>④配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置一个拦截器，使mybatis的分页功能起作用</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>{</span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行跨域配置，因为前端的访问端口是8080，后端的端口是8888</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">//允许http://localhost:8080地址对后端访问</span></span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"http://localhost:8080"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="三、项目实现"><a href="#三、项目实现" class="headerlink" title="三、项目实现"></a>三、项目实现</h1><h2 id="3-1-创建数据库表"><a href="#3-1-创建数据库表" class="headerlink" title="3.1 创建数据库表"></a>3.1 创建数据库表</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : test</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80020</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : blog</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80020</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 21/06/2021 22:42:03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_admin</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_admin`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_admin`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_admin</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_admin` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'admin'</span>, <span class="string">'$2a$10$RZECQ90DjOT/t1mhnXsl5.XSuZWc0Sa1XduPxj2rb4yaSYcje3nWW'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_admin` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'mszlu'</span>, <span class="string">'$2a$10$RZECQ90DjOT/t1mhnXsl5.XSuZWc0Sa1XduPxj2rb4yaSYcje3nWW'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_admin_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_admin_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_admin_permission`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `admin_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `permission_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_admin_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_admin_permission` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_admin_permission` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_article</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_article`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_article`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `comment_counts` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'评论数量'</span>,</span><br><span class="line">  `create_date` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `summary` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'简介'</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'标题'</span>,</span><br><span class="line">  `view_counts` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'浏览数量'</span>,</span><br><span class="line">  `weight` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'是否置顶'</span>,</span><br><span class="line">  `author_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'作者id'</span>,</span><br><span class="line">  `body_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'内容id'</span>,</span><br><span class="line">  `category_id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'类别id'</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1405916999732707331</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_article</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1621947720727</span>, <span class="string">'通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\r\n\r\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。'</span>, <span class="string">'springboot介绍以及入门案例'</span>, <span class="number">125</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">0</span>, <span class="number">1613947720727</span>, <span class="string">'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。'</span>, <span class="string">'Vue.js 到底是什么'</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">0</span>, <span class="number">1523947720727</span>, <span class="string">'本节将介绍如何在项目中使用 Element。'</span>, <span class="string">'Element相关'</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article` <span class="keyword">VALUES</span> (<span class="number">1405564731300831233</span>, <span class="number">0</span>, <span class="number">1623947720727</span>, <span class="string">'66666666666'</span>, <span class="string">'666666666666666'</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1405564731351162882</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article` <span class="keyword">VALUES</span> (<span class="number">1405909844724051969</span>, <span class="number">0</span>, <span class="number">1624030002164</span>, <span class="string">'123'</span>, <span class="string">'123123'</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1405909844828909569</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article` <span class="keyword">VALUES</span> (<span class="number">1405916999732707330</span>, <span class="number">0</span>, <span class="number">1624031708047</span>, <span class="string">'springboot入门案例'</span>, <span class="string">'SpringBoot入门案例'</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1405916999854342146</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_article_body</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_article_body`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_article_body`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `content` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span>,</span><br><span class="line">  `content_html` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span>,</span><br><span class="line">  `article_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `article_id`(`article_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1405916999854342147</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_article_body</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_body` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'# 1. Spring Boot介绍\r\n\r\n## 1.1 简介\r\n\r\n在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？\r\n\r\n在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？\r\n\r\n那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！\r\n\r\nSpring Boot让我们的Spring应用变的更轻量化。\r\n\r\n我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。\r\n\r\n通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\r\n\r\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。\r\n\r\n**总结一下Spring Boot的主要优点：**\r\n\r\n1. 为所有Spring开发者更快的入门\r\n2. 开箱即用，提供各种默认配置来简化项目配置\r\n3. 内嵌式容器简化Web项目\r\n4. 没有冗余代码生成和XML配置的要求\r\n5. 统一的依赖管理\r\n6. 自动装配，更易使用，更易扩展\r\n\r\n## 1.2 使用版本说明\r\n\r\nSpringboot版本：使用最新的2.5.0版本\r\n\r\n教程参考了官方文档进行制作，权威。\r\n\r\n其他依赖版本：\r\n\r\n1. Maven  需求：3.5+\r\n\r\n   2. JDK 需求  8+\r\n   3. Spring Framework 5.3.7以上版本\r\n   4. Tomcat 9.0\r\n   5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\r\n\r\n# 2. 快速入门\r\n\r\n快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。\r\n\r\n教程使用的Idea版本：2019.3\r\n\r\n## 2.1 创建基础项目\r\n\r\n**第一步：** 创建maven项目\r\n\r\npom.xml :\r\n\r\n~~~xml\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\r\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\r\n\r\n    &lt;groupId&gt;com.xiaopizhu&lt;/groupId&gt;\r\n    &lt;artifactId&gt;helloSpringBoot&lt;/artifactId&gt;\r\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\r\n&lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&gt;\r\n    &lt;parent&gt;\r\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\r\n        &lt;version&gt;2.5.0&lt;/version&gt;\r\n    &lt;/parent&gt;\r\n&lt;/project&gt;\r\n~~~\r\n\r\n注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。\r\n\r\n此时的工程结构为：\r\n\r\n![image-20210523173241557](img/image-20210523173241557.png)\r\n\r\n**第二步：** 添加web依赖\r\n\r\n~~~xml\r\n&lt;dependencies&gt;\r\n    &lt;dependency&gt;\r\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\r\n    &lt;/dependency&gt;\r\n&lt;/dependencies&gt;\r\n~~~\r\n\r\n添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。\r\n\r\n**第三步：** 编写启动类\r\n\r\n~~~java\r\npackage com.xiaopizhu.springboot;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class HelloApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(HelloApp.class,args);\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。\r\n\r\n**第四步：** 运行启动类的main方法\r\n\r\n![image-20210523173712142](img/image-20210523173712142.png)\r\n\r\n看到如上配置，证明启动成功，tomcat端口号默认为8080。\r\n\r\n**第五步：**  如果想要修改端口号，可以在resources目录下新建application.properties\r\n\r\n~~~properties\r\nserver.port=8082\r\n~~~\r\n\r\n**第六步：** 重新运行\r\n\r\n![image-20210523174011613](img/image-20210523174011613.png)\r\n\r\n此时的项目结构为：\r\n\r\n![image-20210523174032053](img/image-20210523174032053.png)\r\n\r\n**src/main/java :**  编写java代码，注意启动类需要放在项目的根包下。\r\n\r\n**src/main/resources:**  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。\r\n\r\n**src/test/java:**  测试代码\r\n\r\n## 2.2 编写一个Http接口\r\n\r\n**第一步：**创建`HelloController`类，内容如下：\r\n\r\n~~~java\r\npackage com.xiaopizhu.springboot.controller;\r\n\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\n@RequestMapping(\"hello\")\r\npublic class HelloController {\r\n\r\n    @GetMapping(\"boot\")\r\n    public String hello(){\r\n        return \"hello spring boot\";\r\n    }\r\n\r\n}\r\n\r\n~~~\r\n\r\n**注意包名，必须在启动类所在的包名下。**\r\n\r\n**第二步：**重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\r\n\r\n得到结果：hello spring boot\r\n\r\n## 2.3 编写单元测试用例\r\n\r\n**第一步：**添加spring boot测试依赖\r\n\r\n~~~xml\r\n&lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\r\n            &lt;scope&gt;test&lt;/scope&gt;\r\n        &lt;/dependency&gt;\r\n~~~\r\n\r\n**第二步：**在src/test 下，编写测试用例\r\n\r\n~~~java\r\npackage com.xiaopizhu.springboot.controller;\r\n\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\n\r\nimport static org.hamcrest.Matchers.equalTo;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@SpringBootTest\r\npublic class TestHelloController {\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @BeforeEach\r\n    public void beforeEach(){\r\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\r\n    }\r\n    @Test\r\n    public void testHello() throws Exception {\r\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello/boot\")\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().string(equalTo(\"hello spring boot\")));\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n上面的测试用例，是构建一个空的`WebApplicationContext`，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。\r\n\r\n## 2.4 打包为jar运行\r\n\r\n**第一步：**添加打包(maven构建springboot)插件\r\n\r\n~~~xml\r\n  &lt;build&gt;\r\n        &lt;plugins&gt;\r\n            &lt;plugin&gt;\r\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\r\n            &lt;/plugin&gt;\r\n        &lt;/plugins&gt;\r\n    &lt;/build&gt;\r\n~~~\r\n\r\n在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar\r\n\r\n![image-20210523181737720](img/image-20210523181737720.png)\r\n\r\n**第二步：**打开cmd：找到jar对应的目录\r\n\r\n输入命令\r\n\r\n~~~shell\r\njava -jar helloSpringBoot-1.0-SNAPSHOT.jar\r\n~~~\r\n\r\n![image-20210523182426404](img/image-20210523182426404.png)\r\n\r\n**第三步：**测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\r\n\r\n得到结果：hello spring boot\r\n\r\n## 2.5 查看jar包内容\r\n\r\n~~~shell\r\njar tvf helloSpringBoot-1.0-SNAPSHOT.jar\r\n~~~\r\n\r\n# 3. 小结\r\n\r\n1. 通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。\r\n2. 通过修改配置文件，更改端口号\r\n3. 编写了测试用例\r\n4. 打包jar包运行\r\n\r\n'</span>, <span class="string">'&lt;h2&gt;2018-01-04&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 使用vue的Webpack模板生成脚手架\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-05&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 引入ElementUI\n\n# babel-plugin-component自定义主题\n# 首页\n# 登陆页\n# 注册页面\n# 日志页\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-07&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 调整底部栏始终固定在底部\n# 日志页 添加时间轴\n# 首页的文章列表\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-08&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 使用组件-博客作者tab页 \n# 添加第三方图标\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-09&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 调整顶部导航栏：激活文字颜色，click点击\n# 组件-最新文章tab页\n\n# 最新文章、最热文章使用相同组件\n# 底部栏设计\n# 页面与两边边距改为100\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-10&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 写博客 引入mavonEditor编辑器\n# 顶部导航栏都放入一个Menu中\n# 写文章页面\n#　mavonEditor局部引入\n\n#　页面的中间区域固定宽度，自动居中\n# 发布和取消\n# 发布dialog\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-11&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 文章组件用守卫来改变body背景色\n# 调整登陆和注册页面，使其居中\n\n#子页面调整根元素为div\n#文章详情页\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-12&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 文章详情页  内容  评论等\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-13&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;## 重新调整页面结构\n#顶部和底部 抽成  BaseHeader BaseFooter 组件\n#BlogView为单独页，以前是Home的子路由\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-15&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 文章分类去掉子级\n# 将首页的文章列表抽成 ArticleItem组件\n# 增加文章的评论展示\n# 增加文章分类、标签页\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-15  2&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 回到顶部去掉过渡动画（影响顶部导航栏）\n# 顶部导航栏 增加登录后菜单\n# 首页增加 最热标签\n# 增加 文章分类 标签的详情页\n# 将文章详情页、 文章分类标签页 改为Home的子路由（以前单独页）\n# Home组件增加路由判断：更正导航栏的状态、条件显示底部栏\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-16&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 将写文章的顶部Header合并到BaseHeader中\n# 图片都放到了static目录下\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-24&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 将自定义的theme放到assets下\n# 加入axios\n# 加入vuex\n# 实现登录\n# 实现退出\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-25&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 实现注册逻辑\n# 写文章功能实现\n# 写文章时支持插入图片\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-26&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 引入lodash工具类\n# 优化写文章的工具栏：滚动时固定顶部\n# 写文章 后台获取文章分类和标签\n\n# 首页的文章列表\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-27&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 修改首页文章列表的样式\n# 首页加载文章功能\n# 文章查看功能\n# 文章分类和标签功能列表\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-28&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 文章分类和标签详情\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-29&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# 文章分类和标签的文章数\n# 首页最热文章\n# 首页最新文章\n# 首页最热标签\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;2018-01-30&lt;/h2&gt;\n&lt;pre&gt;&lt;code class=\"lang-\"&gt;# BaseHeader放回views中\n# 修改Axios后置拦截，全局处理错误\n# 将登录 退出 和头像 放到一起\n\n&lt;/code&gt;&lt;/pre&gt;\n'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_body` <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。\n\n# 起步\n\n&gt; 官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。\n\n尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：\n\n```javascript\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;\n\n```\n安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。\n\n# 声明式渲染\nVue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：\n```javascript\n&lt;div id=\"app\"&gt;\n  {{ message }}\n&lt;/div&gt;\n\n```\n```javascript\nvar app = new Vue({\n  el: \'</span>#app\<span class="string">',\n  data: {\n    message: \'</span>Hello Vue<span class="operator">!</span>\<span class="string">'\n  }\n})\n\n```\n我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。\n\n除了文本插值，我们还可以像这样来绑定元素特性：\n\n\n\n\n\n\n'</span>, <span class="string">'&lt;p&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;\n&lt;p&gt;如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。&lt;br /&gt;\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。&lt;/p&gt;\n&lt;h1&gt;起步&lt;/h1&gt;\n&lt;blockquote&gt;\n&lt;p&gt;官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-javascript\"&gt;&amp;lt;script src=&lt;span class=\"hljs-string\"&gt;\"https://cdn.jsdelivr.net/npm/vue\"&lt;/span&gt;&amp;gt;&lt;span class=\"xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。&lt;/p&gt;\n&lt;h1&gt;声明式渲染&lt;/h1&gt;\n&lt;p&gt;Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-javascript\"&gt;&amp;lt;div id=&lt;span class=\"hljs-string\"&gt;\"app\"&lt;/span&gt;&amp;gt;\n  {{ message }}\n&amp;lt;&lt;span class=\"hljs-regexp\"&gt;/div&amp;gt;\n\n&lt;/span&gt;&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; app = &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Vue({\n  &lt;span class=\"hljs-attr\"&gt;el&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;\'</span>#app\<span class="string">'&lt;/span&gt;,\n  &lt;span class=\"hljs-attr\"&gt;data&lt;/span&gt;: {\n    &lt;span class=\"hljs-attr\"&gt;message&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;\'</span>Hello Vue<span class="operator">!</span>\<span class="string">'&lt;/span&gt;\n  }\n})\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。&lt;/p&gt;\n&lt;p&gt;除了文本插值，我们还可以像这样来绑定元素特性：&lt;/p&gt;\n'</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_body` <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="string">'## 快速上手\n\n本节将介绍如何在项目中使用 Element。\n\n### 使用 Starter Kit\n我们提供了通用的项目模板，你可以直接使用。对于 Laravel 用户，我们也准备了相应的模板，同样可以直接下载使用。\n\n如果不希望使用我们提供的模板，请继续阅读。\n\n### 使用 vue-cli\n\n我们还可以使用 vue-cli 初始化项目，命令如下：\n\n```language\n&gt; npm i -g vue-cli\n&gt; mkdir my-project &amp;&amp; cd my-project\n&gt; vue init webpack\n&gt; npm i &amp;&amp; npm i element-ui\n```\n\n### 引入 Element\n你可以引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。\n\n#### 完整引入\n在 main.js 中写入以下内容：\n```javascript\nimport Vue from \'</span>vue\<span class="string">'\nimport ElementUI from \'</span>element<span class="operator">-</span>ui\<span class="string">'\nimport \'</span>element<span class="operator">-</span>ui<span class="operator">/</span>lib<span class="operator">/</span>theme<span class="operator">-</span>chalk<span class="operator">/</span>index.css\<span class="string">'\nimport App from \'</span>.<span class="operator">/</span>App.vue\<span class="string">'\n\nVue.use(ElementUI)\n\nnew Vue({\n  el: \'</span>#app\<span class="string">',\n  render: h =&gt; h(App)\n})\n\n```\n以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。\n\n#### 按需引入\n借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。\n\n首先，安装 babel-plugin-component：\n\n'</span>, <span class="string">'&lt;h2&gt;快速上手&lt;/h2&gt;\n&lt;p&gt;本节将介绍如何在项目中使用 Element。&lt;/p&gt;\n&lt;h3&gt;使用 Starter Kit&lt;/h3&gt;\n&lt;p&gt;我们提供了通用的项目模板，你可以直接使用。对于 Laravel 用户，我们也准备了相应的模板，同样可以直接下载使用。&lt;/p&gt;\n&lt;p&gt;如果不希望使用我们提供的模板，请继续阅读。&lt;/p&gt;\n&lt;h3&gt;使用 vue-cli&lt;/h3&gt;\n&lt;p&gt;我们还可以使用 vue-cli 初始化项目，命令如下：&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"lang-language\"&gt;&amp;gt; npm i -g vue-cli\n&amp;gt; mkdir my-project &amp;amp;&amp;amp; cd my-project\n&amp;gt; vue init webpack\n&amp;gt; npm i &amp;amp;&amp;amp; npm i element-ui\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;引入 Element&lt;/h3&gt;\n&lt;p&gt;你可以引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。&lt;/p&gt;\n&lt;h4&gt;完整引入&lt;/h4&gt;\n&lt;p&gt;在 main.js 中写入以下内容：&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; Vue &lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;\'</span>vue\<span class="string">'&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; ElementUI &lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;\'</span>element<span class="operator">-</span>ui\<span class="string">'&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;\'</span>element<span class="operator">-</span>ui<span class="operator">/</span>lib<span class="operator">/</span>theme<span class="operator">-</span>chalk<span class="operator">/</span>index.css\<span class="string">'&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; App &lt;span class=\"hljs-keyword\"&gt;from&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;\'</span>.<span class="operator">/</span>App.vue\<span class="string">'&lt;/span&gt;\n\nVue.use(ElementUI)\n\n&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Vue({\n  &lt;span class=\"hljs-attr\"&gt;el&lt;/span&gt;: &lt;span class=\"hljs-string\"&gt;\'</span>#app\<span class="string">'&lt;/span&gt;,\n  &lt;span class=\"hljs-attr\"&gt;render&lt;/span&gt;: &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-params\"&gt;h&lt;/span&gt; =&amp;gt;&lt;/span&gt; h(App)\n})\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。&lt;/p&gt;\n&lt;h4&gt;按需引入&lt;/h4&gt;\n&lt;p&gt;借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。&lt;/p&gt;\n&lt;p&gt;首先，安装 babel-plugin-component：&lt;/p&gt;\n'</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_body` <span class="keyword">VALUES</span> (<span class="number">1405564731351162882</span>, <span class="string">'666666666666'</span>, <span class="string">'&lt;p&gt;666666666666&lt;/p&gt;\n'</span>, <span class="number">1405564731300831233</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_body` <span class="keyword">VALUES</span> (<span class="number">1405909844828909569</span>, <span class="string">'# 1. Spring Boot介绍\n\n## 1.1 简介\n\n在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？\n\n在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？\n\n那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！\n\nSpring Boot让我们的Spring应用变的更轻量化。\n\n我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。\n\n通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\n\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。\n\n**总结一下Spring Boot的主要优点：**\n\n1. 为所有Spring开发者更快的入门\n2. 开箱即用，提供各种默认配置来简化项目配置\n3. 内嵌式容器简化Web项目\n4. 没有冗余代码生成和XML配置的要求\n5. 统一的依赖管理\n6. 自动装配，更易使用，更易扩展\n\n## 1.2 使用版本说明\n\nSpringboot版本：使用最新的2.5.0版本\n\n教程参考了官方文档进行制作，权威。\n\n其他依赖版本：\n\n1. Maven  需求：3.5+\n\n   2. JDK 需求  8+\n   3. Spring Framework 5.3.7以上版本\n   4. Tomcat 9.0\n   5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n\n# 2. 快速入门\n\n快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。\n\n教程使用的Idea版本：2019.3\n\n## 2.1 创建基础项目\n\n**第一步：** 创建maven项目\n\npom.xml :\n\n~~~xml\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.xiaopizhu&lt;/groupId&gt;\n    &lt;artifactId&gt;helloSpringBoot&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.5.0&lt;/version&gt;\n    &lt;/parent&gt;\n&lt;/project&gt;\n~~~\n\n注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。\n\n此时的工程结构为：\n\n![image20210523173241557.png](https://static.mszlu.com/6fc39758-0db2-431d-9f94-a705aa2c7e59.png)\n\n**第二步：** 添加web依赖\n\n~~~xml\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n~~~\n\n添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。\n\n**第三步：** 编写启动类\n\n~~~java\npackage com.xiaopizhu.springboot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class HelloApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n~~~\n\n@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。\n\n**第四步：** 运行启动类的main方法\n\n![image-20210523173712142](img/image-20210523173712142.png)\n\n看到如上配置，证明启动成功，tomcat端口号默认为8080。\n\n**第五步：**  如果想要修改端口号，可以在resources目录下新建application.properties\n\n~~~properties\nserver.port=8082\n~~~\n\n**第六步：** 重新运行\n\n![image-20210523174011613](img/image-20210523174011613.png)\n\n此时的项目结构为：\n\n![image-20210523174032053](img/image-20210523174032053.png)\n\n**src/main/java :**  编写java代码，注意启动类需要放在项目的根包下。\n\n**src/main/resources:**  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。\n\n**src/test/java:**  测试代码\n\n## 2.2 编写一个Http接口\n\n**第一步：**  创建`HelloController`类，内容如下：\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"hello\")\npublic class HelloController {\n\n    @GetMapping(\"boot\")\n    public String hello(){\n        return \"hello spring boot\";\n    }\n\n}\n\n~~~\n\n**注意包名，必须在启动类所在的包名下。**\n\n**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.3 编写单元测试用例\n\n**第一步： ** 添加spring boot测试依赖\n\n~~~xml\n&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n~~~\n\n**第二步：** 在src/test 下，编写测试用例\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\npublic class TestHelloController {\n\n    private MockMvc mockMvc;\n\n    @BeforeEach\n    public void beforeEach(){\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\n    }\n    @Test\n    public void testHello() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello/boot\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(\"hello spring boot\")));\n    }\n}\n\n~~~\n\n上面的测试用例，是构建一个空的`WebApplicationContext`，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。\n\n## 2.4 打包为jar运行\n\n**第一步：** 添加打包(maven构建springboot)插件\n\n~~~xml\n  &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n~~~\n\n在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar\n\n![image-20210523181737720](img/image-20210523181737720.png)\n\n**第二步： ** 打开cmd：找到jar对应的目录\n\n输入命令\n\n~~~shell\njava -jar helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n![image-20210523182426404](img/image-20210523182426404.png)\n\n**第三步：**  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.5 查看jar包内容\n\n~~~shell\njar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n# 3. 小结\n\n1. 通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。\n2. 通过修改配置文件，更改端口号\n3. 编写了测试用例\n4. 打包jar包运行\n\n'</span>, <span class="string">'&lt;h1&gt;&lt;a id=\"1_Spring_Boot_0\"&gt;&lt;/a&gt;1. Spring Boot介绍&lt;/h1&gt;\n&lt;h2&gt;&lt;a id=\"11__2\"&gt;&lt;/a&gt;1.1 简介&lt;/h2&gt;\n&lt;p&gt;在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？&lt;/p&gt;\n&lt;p&gt;在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？&lt;/p&gt;\n&lt;p&gt;那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！&lt;/p&gt;\n&lt;p&gt;Spring Boot让我们的Spring应用变的更轻量化。&lt;/p&gt;\n&lt;p&gt;我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。&lt;/p&gt;\n&lt;p&gt;通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过&lt;code&gt;java -jar&lt;/code&gt;命令就可以运行起来。&lt;/p&gt;\n&lt;p&gt;这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;总结一下Spring Boot的主要优点：&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;为所有Spring开发者更快的入门&lt;/li&gt;\n&lt;li&gt;开箱即用，提供各种默认配置来简化项目配置&lt;/li&gt;\n&lt;li&gt;内嵌式容器简化Web项目&lt;/li&gt;\n&lt;li&gt;没有冗余代码生成和XML配置的要求&lt;/li&gt;\n&lt;li&gt;统一的依赖管理&lt;/li&gt;\n&lt;li&gt;自动装配，更易使用，更易扩展&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;&lt;a id=\"12__27\"&gt;&lt;/a&gt;1.2 使用版本说明&lt;/h2&gt;\n&lt;p&gt;Springboot版本：使用最新的2.5.0版本&lt;/p&gt;\n&lt;p&gt;教程参考了官方文档进行制作，权威。&lt;/p&gt;\n&lt;p&gt;其他依赖版本：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;1. Maven  需求：3.5+\n\n2. JDK 需求  8+\n3. Spring Framework 5.3.7以上版本\n4. Tomcat 9.0\n5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;a id=\"2__42\"&gt;&lt;/a&gt;2. 快速入门&lt;/h1&gt;\n&lt;p&gt;快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。&lt;/p&gt;\n&lt;p&gt;教程使用的Idea版本：2019.3&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"21__48\"&gt;&lt;/a&gt;2.1 创建基础项目&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt; 创建maven项目&lt;/p&gt;\n&lt;p&gt;pom.xml :&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;&lt;span class=\"php\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class=\"hljs-string\"&gt;\"1.0\"&lt;/span&gt; encoding=&lt;span class=\"hljs-string\"&gt;\"UTF-8\"&lt;/span&gt;&lt;span class=\"hljs-meta\"&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;project&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;xmlns&lt;/span&gt;=&lt;span class=\"hljs-string\"&gt;\"http://maven.apache.org/POM/4.0.0\"&lt;/span&gt;\n         &lt;span class=\"hljs-attr\"&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=\"hljs-string\"&gt;\"http://www.w3.org/2001/XMLSchema-instance\"&lt;/span&gt;\n         &lt;span class=\"hljs-attr\"&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=\"hljs-string\"&gt;\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.xiaopizhu&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;helloSpringBoot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;&amp;lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.0&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。&lt;/p&gt;\n&lt;p&gt;此时的工程结构为：&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/6fc39758-0db2-431d-9f94-a705aa2c7e59.png\" alt=\"image20210523173241557.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第二步：&lt;/strong&gt; 添加web依赖&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第三步：&lt;/strong&gt; 编写启动类&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.xiaopizhu.springboot;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.boot.SpringApplication;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;\n\n&lt;span class=\"hljs-meta\"&gt;@SpringBootApplication&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;HelloApp&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第四步：&lt;/strong&gt; 运行启动类的main方法&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"img/image-20210523173712142.png\" alt=\"image-20210523173712142\" /&gt;&lt;/p&gt;\n&lt;p&gt;看到如上配置，证明启动成功，tomcat端口号默认为8080。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第五步：&lt;/strong&gt;  如果想要修改端口号，可以在resources目录下新建application.properties&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"lang-properties\"&gt;server.port=8082\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;第六步：&lt;/strong&gt; 重新运行&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"img/image-20210523174011613.png\" alt=\"image-20210523174011613\" /&gt;&lt;/p&gt;\n&lt;p&gt;此时的项目结构为：&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"img/image-20210523174032053.png\" alt=\"image-20210523174032053\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;src/main/java :&lt;/strong&gt;  编写java代码，注意启动类需要放在项目的根包下。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;src/main/resources:&lt;/strong&gt;  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;src/test/java:&lt;/strong&gt;  测试代码&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"22_Http_138\"&gt;&lt;/a&gt;2.2 编写一个Http接口&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt;  创建&lt;code&gt;HelloController&lt;/code&gt;类，内容如下：&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.xiaopizhu.springboot.controller;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.GetMapping;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RequestMapping;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RestController;\n\n&lt;span class=\"hljs-meta\"&gt;@RestController&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;@RequestMapping&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"hello\"&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;HelloController&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-meta\"&gt;@GetMapping&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"boot\"&lt;/span&gt;)\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; String &lt;span class=\"hljs-title\"&gt;hello&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;\"hello spring boot\"&lt;/span&gt;;\n    }\n\n}\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;注意包名，必须在启动类所在的包名下。&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot&lt;/p&gt;\n&lt;p&gt;得到结果：hello spring boot&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"23__168\"&gt;&lt;/a&gt;2.3 编写单元测试用例&lt;/h2&gt;\n&lt;p&gt;**第一步： ** 添加spring boot测试依赖&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;第二步：&lt;/strong&gt; 在src/test 下，编写测试用例&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.xiaopizhu.springboot.controller;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.junit.jupiter.api.BeforeAll;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.junit.jupiter.api.BeforeEach;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.junit.jupiter.api.Test;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.boot.test.context.SpringBootTest;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.http.MediaType;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.test.web.servlet.MockMvc;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; org.hamcrest.Matchers.equalTo;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n&lt;span class=\"hljs-meta\"&gt;@SpringBootTest&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;TestHelloController&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; MockMvc mockMvc;\n\n    &lt;span class=\"hljs-meta\"&gt;@BeforeEach&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;beforeEach&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n        mockMvc = MockMvcBuilders.standaloneSetup(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; HelloController()).build();\n    }\n    &lt;span class=\"hljs-meta\"&gt;@Test&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;testHello&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{\n        mockMvc.perform(MockMvcRequestBuilders.get(&lt;span class=\"hljs-string\"&gt;\"/hello/boot\"&lt;/span&gt;)\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(&lt;span class=\"hljs-string\"&gt;\"hello spring boot\"&lt;/span&gt;)));\n    }\n}\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;上面的测试用例，是构建一个空的&lt;code&gt;WebApplicationContext&lt;/code&gt;，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"24_jar_220\"&gt;&lt;/a&gt;2.4 打包为jar运行&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt; 添加打包(maven构建springboot)插件&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;  &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"img/image-20210523181737720.png\" alt=\"image-20210523181737720\" /&gt;&lt;/p&gt;\n&lt;p&gt;**第二步： ** 打开cmd：找到jar对应的目录&lt;/p&gt;\n&lt;p&gt;输入命令&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-shell\"&gt;java -jar helloSpringBoot-1.0-SNAPSHOT.jar\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=\"img/image-20210523182426404.png\" alt=\"image-20210523182426404\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第三步：&lt;/strong&gt;  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot&lt;/p&gt;\n&lt;p&gt;得到结果：hello spring boot&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"25_jar_253\"&gt;&lt;/a&gt;2.5 查看jar包内容&lt;/h2&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-shell\"&gt;jar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;a id=\"3__259\"&gt;&lt;/a&gt;3. 小结&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。&lt;/li&gt;\n&lt;li&gt;通过修改配置文件，更改端口号&lt;/li&gt;\n&lt;li&gt;编写了测试用例&lt;/li&gt;\n&lt;li&gt;打包jar包运行&lt;/li&gt;\n&lt;/ol&gt;\n'</span>, <span class="number">1405909844724051969</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_body` <span class="keyword">VALUES</span> (<span class="number">1405916999854342146</span>, <span class="string">'# 1. Spring Boot介绍\n\n## 1.1 简介\n\n在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？\n\n在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？\n\n那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！\n\nSpring Boot让我们的Spring应用变的更轻量化。\n\n我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。\n\n通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\n\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。\n\n**总结一下Spring Boot的主要优点：**\n\n1. 为所有Spring开发者更快的入门\n2. 开箱即用，提供各种默认配置来简化项目配置\n3. 内嵌式容器简化Web项目\n4. 没有冗余代码生成和XML配置的要求\n5. 统一的依赖管理\n6. 自动装配，更易使用，更易扩展\n\n## 1.2 使用版本说明\n\nSpringboot版本：使用最新的2.5.0版本\n\n教程参考了官方文档进行制作，权威。\n\n其他依赖版本：\n\n1. Maven  需求：3.5+\n\n   2. JDK 需求  8+\n   3. Spring Framework 5.3.7以上版本\n   4. Tomcat 9.0\n   5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n\n# 2. 快速入门\n\n快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。\n\n教程使用的Idea版本：2019.3\n\n## 2.1 创建基础项目\n\n**第一步：** 创建maven项目\n\npom.xml :\n\n~~~xml\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.xiaopizhu&lt;/groupId&gt;\n    &lt;artifactId&gt;helloSpringBoot&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.5.0&lt;/version&gt;\n    &lt;/parent&gt;\n&lt;/project&gt;\n~~~\n\n注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。\n\n此时的工程结构为：\n\n![image20210523173241557.png](https://static.mszlu.com/a7302c88-e106-46ad-9713-dc9a6d523957.png)\n\n**第二步：** 添加web依赖\n\n~~~xml\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n~~~\n\n添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。\n\n**第三步：** 编写启动类\n\n~~~java\npackage com.xiaopizhu.springboot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class HelloApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n~~~\n\n@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。\n\n**第四步：** 运行启动类的main方法\n\n![image20210523173712142.png](https://static.mszlu.com/dc17b43e-08df-46b0-bb7a-eb73044de7da.png)\n\n看到如上配置，证明启动成功，tomcat端口号默认为8080。\n\n**第五步：**  如果想要修改端口号，可以在resources目录下新建application.properties\n\n~~~properties\nserver.port=8082\n~~~\n\n**第六步：** 重新运行\n\n![image20210523174011613.png](https://static.mszlu.com/318e4b7e-95d2-4e43-a18f-279ea6ff9495.png)\n\n此时的项目结构为：\n\n![image20210523174032053.png](https://static.mszlu.com/756e4ae0-c4c7-43a5-9b5d-bc7ce974a942.png)\n\n**src/main/java :**  编写java代码，注意启动类需要放在项目的根包下。\n\n**src/main/resources:**  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。\n\n**src/test/java:**  测试代码\n\n## 2.2 编写一个Http接口\n\n**第一步：**  创建`HelloController`类，内容如下：\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"hello\")\npublic class HelloController {\n\n    @GetMapping(\"boot\")\n    public String hello(){\n        return \"hello spring boot\";\n    }\n\n}\n\n~~~\n\n**注意包名，必须在启动类所在的包名下。**\n\n**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.3 编写单元测试用例\n\n**第一步： ** 添加spring boot测试依赖\n\n~~~xml\n&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n~~~\n\n**第二步：** 在src/test 下，编写测试用例\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\npublic class TestHelloController {\n\n    private MockMvc mockMvc;\n\n    @BeforeEach\n    public void beforeEach(){\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\n    }\n    @Test\n    public void testHello() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello/boot\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(\"hello spring boot\")));\n    }\n}\n\n~~~\n\n上面的测试用例，是构建一个空的`WebApplicationContext`，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。\n\n## 2.4 打包为jar运行\n\n**第一步：** 添加打包(maven构建springboot)插件\n\n~~~xml\n  &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n~~~\n\n在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar\n\n![image20210523181737720.png](https://static.mszlu.com/45aa0db2-598f-4564-964c-a2d889dfbafe.png)\n\n**第二步： ** 打开cmd：找到jar对应的目录\n\n输入命令\n\n~~~shell\njava -jar helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n![image20210523182426404.png](https://static.mszlu.com/74376f77-b8eb-4c2c-a4cc-d3bfe24901e3.png)\n\n**第三步：**  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.5 查看jar包内容\n\n~~~shell\njar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n# 3. 小结\n\n1. 通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。\n2. 通过修改配置文件，更改端口号\n3. 编写了测试用例\n4. 打包jar包运行\n\n'</span>, <span class="string">'&lt;h1&gt;&lt;a id=\"1_Spring_Boot_0\"&gt;&lt;/a&gt;1. Spring Boot介绍&lt;/h1&gt;\n&lt;h2&gt;&lt;a id=\"11__2\"&gt;&lt;/a&gt;1.1 简介&lt;/h2&gt;\n&lt;p&gt;在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？&lt;/p&gt;\n&lt;p&gt;在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？&lt;/p&gt;\n&lt;p&gt;那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！&lt;/p&gt;\n&lt;p&gt;Spring Boot让我们的Spring应用变的更轻量化。&lt;/p&gt;\n&lt;p&gt;我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。&lt;/p&gt;\n&lt;p&gt;通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过&lt;code&gt;java -jar&lt;/code&gt;命令就可以运行起来。&lt;/p&gt;\n&lt;p&gt;这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;总结一下Spring Boot的主要优点：&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;为所有Spring开发者更快的入门&lt;/li&gt;\n&lt;li&gt;开箱即用，提供各种默认配置来简化项目配置&lt;/li&gt;\n&lt;li&gt;内嵌式容器简化Web项目&lt;/li&gt;\n&lt;li&gt;没有冗余代码生成和XML配置的要求&lt;/li&gt;\n&lt;li&gt;统一的依赖管理&lt;/li&gt;\n&lt;li&gt;自动装配，更易使用，更易扩展&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;&lt;a id=\"12__27\"&gt;&lt;/a&gt;1.2 使用版本说明&lt;/h2&gt;\n&lt;p&gt;Springboot版本：使用最新的2.5.0版本&lt;/p&gt;\n&lt;p&gt;教程参考了官方文档进行制作，权威。&lt;/p&gt;\n&lt;p&gt;其他依赖版本：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;1. Maven  需求：3.5+\n\n2. JDK 需求  8+\n3. Spring Framework 5.3.7以上版本\n4. Tomcat 9.0\n5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;a id=\"2__42\"&gt;&lt;/a&gt;2. 快速入门&lt;/h1&gt;\n&lt;p&gt;快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。&lt;/p&gt;\n&lt;p&gt;教程使用的Idea版本：2019.3&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"21__48\"&gt;&lt;/a&gt;2.1 创建基础项目&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt; 创建maven项目&lt;/p&gt;\n&lt;p&gt;pom.xml :&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;&lt;span class=\"php\"&gt;&lt;span class=\"hljs-meta\"&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class=\"hljs-string\"&gt;\"1.0\"&lt;/span&gt; encoding=&lt;span class=\"hljs-string\"&gt;\"UTF-8\"&lt;/span&gt;&lt;span class=\"hljs-meta\"&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;project&lt;/span&gt; &lt;span class=\"hljs-attr\"&gt;xmlns&lt;/span&gt;=&lt;span class=\"hljs-string\"&gt;\"http://maven.apache.org/POM/4.0.0\"&lt;/span&gt;\n         &lt;span class=\"hljs-attr\"&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=\"hljs-string\"&gt;\"http://www.w3.org/2001/XMLSchema-instance\"&lt;/span&gt;\n         &lt;span class=\"hljs-attr\"&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=\"hljs-string\"&gt;\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.xiaopizhu&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;helloSpringBoot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;&amp;lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.0&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。&lt;/p&gt;\n&lt;p&gt;此时的工程结构为：&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/a7302c88-e106-46ad-9713-dc9a6d523957.png\" alt=\"image20210523173241557.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第二步：&lt;/strong&gt; 添加web依赖&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第三步：&lt;/strong&gt; 编写启动类&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.xiaopizhu.springboot;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.boot.SpringApplication;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;\n\n&lt;span class=\"hljs-meta\"&gt;@SpringBootApplication&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;HelloApp&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第四步：&lt;/strong&gt; 运行启动类的main方法&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/dc17b43e-08df-46b0-bb7a-eb73044de7da.png\" alt=\"image20210523173712142.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;看到如上配置，证明启动成功，tomcat端口号默认为8080。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第五步：&lt;/strong&gt;  如果想要修改端口号，可以在resources目录下新建application.properties&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"lang-properties\"&gt;server.port=8082\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;第六步：&lt;/strong&gt; 重新运行&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/318e4b7e-95d2-4e43-a18f-279ea6ff9495.png\" alt=\"image20210523174011613.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;此时的项目结构为：&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/756e4ae0-c4c7-43a5-9b5d-bc7ce974a942.png\" alt=\"image20210523174032053.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;src/main/java :&lt;/strong&gt;  编写java代码，注意启动类需要放在项目的根包下。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;src/main/resources:&lt;/strong&gt;  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;src/test/java:&lt;/strong&gt;  测试代码&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"22_Http_138\"&gt;&lt;/a&gt;2.2 编写一个Http接口&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt;  创建&lt;code&gt;HelloController&lt;/code&gt;类，内容如下：&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.xiaopizhu.springboot.controller;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.GetMapping;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RequestMapping;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RestController;\n\n&lt;span class=\"hljs-meta\"&gt;@RestController&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;@RequestMapping&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"hello\"&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;HelloController&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-meta\"&gt;@GetMapping&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"boot\"&lt;/span&gt;)\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; String &lt;span class=\"hljs-title\"&gt;hello&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;\"hello spring boot\"&lt;/span&gt;;\n    }\n\n}\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;注意包名，必须在启动类所在的包名下。&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot&lt;/p&gt;\n&lt;p&gt;得到结果：hello spring boot&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"23__168\"&gt;&lt;/a&gt;2.3 编写单元测试用例&lt;/h2&gt;\n&lt;p&gt;**第一步： ** 添加spring boot测试依赖&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;&lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;第二步：&lt;/strong&gt; 在src/test 下，编写测试用例&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-java\"&gt;&lt;span class=\"hljs-keyword\"&gt;package&lt;/span&gt; com.xiaopizhu.springboot.controller;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.junit.jupiter.api.BeforeAll;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.junit.jupiter.api.BeforeEach;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.junit.jupiter.api.Test;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.boot.test.context.SpringBootTest;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.http.MediaType;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.test.web.servlet.MockMvc;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; org.hamcrest.Matchers.equalTo;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n&lt;span class=\"hljs-meta\"&gt;@SpringBootTest&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;TestHelloController&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; MockMvc mockMvc;\n\n    &lt;span class=\"hljs-meta\"&gt;@BeforeEach&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;beforeEach&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n        mockMvc = MockMvcBuilders.standaloneSetup(&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; HelloController()).build();\n    }\n    &lt;span class=\"hljs-meta\"&gt;@Test&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;testHello&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{\n        mockMvc.perform(MockMvcRequestBuilders.get(&lt;span class=\"hljs-string\"&gt;\"/hello/boot\"&lt;/span&gt;)\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(&lt;span class=\"hljs-string\"&gt;\"hello spring boot\"&lt;/span&gt;)));\n    }\n}\n\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;上面的测试用例，是构建一个空的&lt;code&gt;WebApplicationContext&lt;/code&gt;，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"24_jar_220\"&gt;&lt;/a&gt;2.4 打包为jar运行&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt; 添加打包(maven构建springboot)插件&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-xml\"&gt;  &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=\"hljs-tag\"&gt;&amp;lt;&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=\"hljs-tag\"&gt;&amp;lt;/&lt;span class=\"hljs-name\"&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar&lt;/p&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/45aa0db2-598f-4564-964c-a2d889dfbafe.png\" alt=\"image20210523181737720.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;**第二步： ** 打开cmd：找到jar对应的目录&lt;/p&gt;\n&lt;p&gt;输入命令&lt;/p&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-shell\"&gt;java -jar helloSpringBoot-1.0-SNAPSHOT.jar\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=\"https://static.mszlu.com/74376f77-b8eb-4c2c-a4cc-d3bfe24901e3.png\" alt=\"image20210523182426404.png\" /&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;第三步：&lt;/strong&gt;  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot&lt;/p&gt;\n&lt;p&gt;得到结果：hello spring boot&lt;/p&gt;\n&lt;h2&gt;&lt;a id=\"25_jar_253\"&gt;&lt;/a&gt;2.5 查看jar包内容&lt;/h2&gt;\n&lt;pre&gt;&lt;div class=\"hljs\"&gt;&lt;code class=\"lang-shell\"&gt;jar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n&lt;/code&gt;&lt;/div&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;a id=\"3__259\"&gt;&lt;/a&gt;3. 小结&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。&lt;/li&gt;\n&lt;li&gt;通过修改配置文件，更改端口号&lt;/li&gt;\n&lt;li&gt;编写了测试用例&lt;/li&gt;\n&lt;li&gt;打包jar包运行&lt;/li&gt;\n&lt;/ol&gt;\n'</span>, <span class="number">1405916999732707330</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_article_tag</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_article_tag`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_article_tag`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `article_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tag_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `article_id`(`article_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `tag_id`(`tag_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1405916999787233282</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_article_tag</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">10</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">1405564731321802753</span>, <span class="number">1405564731300831233</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">1405909844761800706</span>, <span class="number">1405909844724051969</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_article_tag` <span class="keyword">VALUES</span> (<span class="number">1405916999787233281</span>, <span class="number">1405916999732707330</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_category</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_category`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_category`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `category_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_category</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_category` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'/static/category/front.png'</span>, <span class="string">'前端'</span>, <span class="string">'前端是什么，大前端'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_category` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'/static/category/back.png'</span>, <span class="string">'后端'</span>, <span class="string">'后端最牛叉'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_category` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'/static/category/lift.jpg'</span>, <span class="string">'生活'</span>, <span class="string">'生活趣事'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_category` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'/static/category/database.png'</span>, <span class="string">'数据库'</span>, <span class="string">'没数据库，啥也不管用'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_category` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'/static/category/language.png'</span>, <span class="string">'编程语言'</span>, <span class="string">'好多语言，该学哪个？'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_comment</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_comment`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_comment`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `content` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_date` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `article_id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `author_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `to_uid` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `level` <span class="type">varchar</span>(<span class="number">1</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `article_id`(`article_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1405209691876790275</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_comment</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">53</span>, <span class="string">'写的好'</span>, <span class="number">123213213213</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">54</span>, <span class="string">'111'</span>, <span class="number">123123123123</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">53</span>, <span class="number">1</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">56</span>, <span class="string">'222'</span>, <span class="number">12312</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405204547248377858</span>, <span class="string">'123'</span>, <span class="number">1623861846172</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">53</span>, <span class="number">1</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405205050975899650</span>, <span class="string">'123123'</span>, <span class="number">1623861966270</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405205572185280513</span>, <span class="string">'3333'</span>, <span class="number">1623862090534</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405206087392612353</span>, <span class="string">'7777'</span>, <span class="number">1623862213367</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405206147568291842</span>, <span class="string">'7777'</span>, <span class="number">1623862227714</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405206347246522370</span>, <span class="string">'666'</span>, <span class="number">1623862275315</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405208637198131202</span>, <span class="string">'99999999999999999999'</span>, <span class="number">1623862821278</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_comment` <span class="keyword">VALUES</span> (<span class="number">1405209691876790274</span>, <span class="string">'66666666666666666'</span>, <span class="number">1623863072732</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1405208637198131202</span>, <span class="number">1</span>, <span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_permission`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_permission` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'查询权限列表'</span>, <span class="string">'/admin/permission/permissionList'</span>, <span class="string">'查询权限列表'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_permission` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'111'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_permission` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">'1213'</span>, <span class="string">'123'</span>, <span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_permission` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">'删除权限'</span>, <span class="string">'/admin/permission/add'</span>, <span class="string">'删除权限'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_sys_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_sys_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_sys_log`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `create_date` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ip` <span class="type">varchar</span>(<span class="number">15</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">method</span>` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">module</span>` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `operation` <span class="type">varchar</span>(<span class="number">25</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `params` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `userid` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_unicode_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_sys_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_sys_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_sys_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_sys_user`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'账号'</span>,</span><br><span class="line">  `admin` bit(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'是否管理员'</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'头像'</span>,</span><br><span class="line">  `create_date` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'注册时间'</span>,</span><br><span class="line">  `deleted` bit(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'是否删除'</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line">  `last_login` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'最后登录时间'</span>,</span><br><span class="line">  `mobile_phone_number` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'手机号'</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'昵称'</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `salt` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'加密盐'</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'状态'</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1404448588146192387</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_sys_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_sys_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'admin'</span>, b<span class="string">'1'</span>, <span class="string">'http://localhost:8080/static/img/logo.b3a48c0.png'</span>, <span class="number">20210622223122</span>, b<span class="string">'0'</span>, <span class="string">'11'</span>, <span class="number">20210630223130</span>, <span class="string">'12'</span>, <span class="string">'李四'</span>, <span class="string">'15f08f86435b060236fa9ccea751e9e5'</span>, <span class="string">'12'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_sys_user` <span class="keyword">VALUES</span> (<span class="number">1404446129264832513</span>, <span class="string">'lisi'</span>, b<span class="string">'1'</span>, <span class="string">'/static/img/logo.b3a48c0.png'</span>, <span class="number">1623681025218</span>, b<span class="string">'0'</span>, <span class="string">''</span>, <span class="number">1623681025218</span>, <span class="keyword">NULL</span>, <span class="string">'李四'</span>, <span class="string">'1d01d52c40f4ff57ad3f93a06daf21d5'</span>, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_sys_user` <span class="keyword">VALUES</span> (<span class="number">1404448463944462338</span>, <span class="string">'12213'</span>, b<span class="string">'1'</span>, <span class="string">'/static/img/logo.b3a48c0.png'</span>, <span class="number">1623681581855</span>, b<span class="string">'0'</span>, <span class="string">''</span>, <span class="number">1623681581855</span>, <span class="keyword">NULL</span>, <span class="string">'123'</span>, <span class="string">'8628d1f407f72e10ac947a032fe5ad29'</span>, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_sys_user` <span class="keyword">VALUES</span> (<span class="number">1404448588146192386</span>, <span class="string">'123'</span>, b<span class="string">'1'</span>, <span class="string">'/static/img/logo.b3a48c0.png'</span>, <span class="number">1623681611474</span>, b<span class="string">'0'</span>, <span class="string">''</span>, <span class="number">1623681611474</span>, <span class="keyword">NULL</span>, <span class="string">'123'</span>, <span class="string">'5e112646dbf3570f8e23d0cf1027ede1'</span>, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ms_tag</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ms_tag`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ms_tag`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">11</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ms_tag</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_tag` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'/static/tag/java.png'</span>, <span class="string">'springboot'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_tag` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'/static/tag/java.png'</span>, <span class="string">'spring'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_tag` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">'/static/tag/java.png'</span>, <span class="string">'springmvc'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ms_tag` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">'/static/tag/css.png'</span>, <span class="string">'11'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>创建出来的数据库表如下：</li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220119213456370.png" alt="image-20220119213456370"></p><h2 id="3-2-工具类和处理类"><a href="#3-2-工具类和处理类" class="headerlink" title="3.2 工具类和处理类"></a>3.2 工具类和处理类</h2><h3 id="3-2-1-统一异常处理"><a href="#3-2-1-统一异常处理" class="headerlink" title="3.2.1 统一异常处理"></a>3.2.1 统一异常处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//对加了@controller注解的方法进行拦截处理，本质上是一种AOP</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllExceptionHandler</span> </span>{</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//进行异常处理，处理Exception.class的异常</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//返回json数据，不加的话返回的是页面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doException</span><span class="params">(Exception e)</span></span>{</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(-<span class="number">999</span>,<span class="string">"系统异常"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-2-统一错误处理"><a href="#3-2-2-统一错误处理" class="headerlink" title="3.2.2 统一错误处理"></a>3.2.2 统一错误处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">ErrorCode</span> </span>{</span><br><span class="line"></span><br><span class="line">    PARAMS_ERROR(<span class="number">10001</span>,<span class="string">"参数有误"</span>),</span><br><span class="line">    ACCOUNT_PWD_NOT_EXIST(<span class="number">10002</span>,<span class="string">"用户名或密码不存在"</span>),</span><br><span class="line">    NO_PERMISSION(<span class="number">70001</span>,<span class="string">"无访问权限"</span>),</span><br><span class="line">    SESSION_TIME_OUT(<span class="number">90001</span>,<span class="string">"会话超时"</span>),</span><br><span class="line">    NO_LOGIN(<span class="number">90002</span>,<span class="string">"未登录"</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">10003</span>,<span class="string">"TOKEN不合法"</span>),</span><br><span class="line">    ACCOUNT_EXIST(<span class="number">10004</span>,<span class="string">"账号已存在"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ErrorCode(<span class="keyword">int</span> code, String msg){</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-3-jwt加密工具类"><a href="#3-2-3-jwt加密工具类" class="headerlink" title="3.2.3 jwt加密工具类"></a>3.2.3 jwt加密工具类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String jwtToken = <span class="string">"123456Mszlu!@#$$"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(Long userId)</span></span>{</span><br><span class="line">        Map&lt;String,Object&gt; claims = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        claims.put(<span class="string">"userId"</span>,userId);</span><br><span class="line">        JwtBuilder jwtBuilder = Jwts.builder()</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, jwtToken) <span class="comment">// 签发算法，秘钥为jwtToken</span></span><br><span class="line">                .setClaims(claims) <span class="comment">// body数据，要唯一，自行设置</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date()) <span class="comment">// 设置签发时间</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));<span class="comment">// 一天的有效时间</span></span><br><span class="line">        String token = jwtBuilder.compact();</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">checkToken</span><span class="params">(String token)</span></span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Jwt parse = Jwts.parser().setSigningKey(jwtToken).parse(token);</span><br><span class="line">            <span class="keyword">return</span> (Map&lt;String, Object&gt;) parse.getBody();</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-文章列表功能"><a href="#3-3-文章列表功能" class="headerlink" title="3.3 文章列表功能"></a>3.3 文章列表功能</h2><h3 id="3-3-1-接口说明"><a href="#3-3-1-接口说明" class="headerlink" title="3.3.1 接口说明"></a>3.3.1 接口说明</h3><ul><li><p>接口url：/articles</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th align="center">参数名称</th><th align="center">参数类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">page</td><td align="center">int</td><td align="center">当前页数</td></tr><tr><td align="center">pageSize</td><td align="center">int</td><td align="center">每页显示的数量</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"springboot介绍以及入门案例"</span>,</span><br><span class="line">            <span class="string">"summary"</span>: <span class="string">"通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\r\n\r\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。"</span>,</span><br><span class="line">            <span class="string">"commentCounts"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"viewCounts"</span>: <span class="number">54</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"createDate"</span>: <span class="string">"2609-06-26 15:58"</span>,</span><br><span class="line">            <span class="string">"author"</span>: <span class="string">"12"</span>,</span><br><span class="line">            <span class="string">"body"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"tags"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"444"</span></span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"22"</span></span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">8</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"11"</span></span><br><span class="line">                }</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"categorys"</span>: <span class="literal">null</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Vue.js 是什么"</span>,</span><br><span class="line">            <span class="string">"summary"</span>: <span class="string">"Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。"</span>,</span><br><span class="line">            <span class="string">"commentCounts"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"viewCounts"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"createDate"</span>: <span class="string">"2609-06-27 11:25"</span>,</span><br><span class="line">            <span class="string">"author"</span>: <span class="string">"12"</span>,</span><br><span class="line">            <span class="string">"body"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"tags"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"22"</span></span><br><span class="line">                }</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"categorys"</span>: <span class="literal">null</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Element相关"</span>,</span><br><span class="line">            <span class="string">"summary"</span>: <span class="string">"本节将介绍如何在项目中使用 Element。"</span>,</span><br><span class="line">            <span class="string">"commentCounts"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"viewCounts"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"createDate"</span>: <span class="string">"2609-06-27 11:25"</span>,</span><br><span class="line">            <span class="string">"author"</span>: <span class="string">"12"</span>,</span><br><span class="line">            <span class="string">"body"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"tags"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"444"</span></span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">6</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"33"</span></span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"22"</span></span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">8</span>,</span><br><span class="line">                    <span class="string">"avatar"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">"tagName"</span>: <span class="string">"11"</span></span><br><span class="line">                }</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"categorys"</span>: <span class="literal">null</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-2-编码"><a href="#3-3-2-编码" class="headerlink" title="3.3.2 编码"></a>3.3.2 编码</h3><h4 id="①-Pojo实体类"><a href="#①-Pojo实体类" class="headerlink" title="① Pojo实体类"></a>① Pojo实体类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文章实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Article_TOP = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Article_Common = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> Integer commentCounts;</span><br><span class="line">    <span class="keyword">private</span> Integer viewCounts;</span><br><span class="line">    <span class="comment">//作者id</span></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line">    <span class="comment">//内容id</span></span><br><span class="line">    <span class="keyword">private</span> Long bodyId;</span><br><span class="line">    <span class="comment">//类别id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="comment">//置顶</span></span><br><span class="line">    <span class="keyword">private</span> Integer weight = Article_Common;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Long createDate;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标签实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String tagName;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> Integer admin;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Long createDate;</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Long lastLogin;</span><br><span class="line">    <span class="keyword">private</span> String mobilePhoneNumber;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-Result结果类"><a href="#②-Result结果类" class="headerlink" title="② Result结果类"></a>② Result结果类</h4><ul><li>为了使返回给前端的数据格式统一，需编写Result类规定返回数据类型</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(Object data)</span></span>{<span class="comment">//获取数据成功的情况</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,<span class="number">200</span>,<span class="string">"success"</span>,data);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">fail</span><span class="params">(<span class="keyword">int</span> code,String msg)</span></span>{<span class="comment">//获取数据失败的情况</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,code,msg,<span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-PageParam分页参数类"><a href="#③-PageParam分页参数类" class="headerlink" title="③ PageParam分页参数类"></a>③ PageParam分页参数类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义初始页面（默认第一页）以及页面大小</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageParam</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> page=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize=<span class="number">10</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-ArticleController控制类"><a href="#④-ArticleController控制类" class="headerlink" title="④ ArticleController控制类"></a>④ ArticleController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首页文章列表</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">listArticle</span><span class="params">(<span class="meta">@RequestBody</span> PageParam pageParam)</span></span>{<span class="comment">//用pageParam接收前端的参数</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(articleService.listService(pageParam));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-Service服务类"><a href="#⑤-Service服务类" class="headerlink" title="⑤ Service服务类"></a>⑤ Service服务类</h4><p>由于显示文章时其下方需同时显示作者以及标签，故一同创建</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="comment">//传入分页数据，返回对应的文章集合</span></span><br><span class="line">    <span class="function">List&lt;ArticleVo&gt; <span class="title">listService</span><span class="params">(PageParam pageParam)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="comment">//根据作者ID返回对应用户</span></span><br><span class="line">    <span class="function">SysUser <span class="title">findUserById</span><span class="params">(Long authorId)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="comment">//根据文章ID返回对应标签</span></span><br><span class="line">    <span class="function">List&lt;TagVo&gt; <span class="title">findTagsByArticleId</span><span class="params">(Long ArticleId)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-Mapper类"><a href="#⑥-Mapper类" class="headerlink" title="⑥ Mapper类"></a>⑥ Mapper类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用MP快速实现</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Article</span>&gt; </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">SysUser</span>&gt; </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Tag</span>&gt; </span>{</span><br><span class="line">    <span class="function">List&lt;Tag&gt; <span class="title">findTagsByArticleId</span><span class="params">(Long articleId)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑦-VO类"><a href="#⑦-VO类" class="headerlink" title="⑦ VO类"></a>⑦ VO类</h4><p>由于数据库表字段一般较多，而显示到前端时又不是所有字段都要，所以可以创建一个VO类，里面只保留前端需要的属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleVo</span> </span>{<span class="comment">//文章的Vo类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Article的id为Long，ArticleVo的id为String</span></span><br><span class="line">    <span class="comment">//因为id用的是分布式id，比较长，如果是Long类型返回前端可能会出现精度损失的问题，所以最好用String类型</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> commentCounts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> viewCounts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArticleBodyVo body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TagVo&gt; tags;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CategoryVo&gt; categorys;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagVo</span> </span>{<span class="comment">//标签的Vo类</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String tagName;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑧-ServiceImpl服务实现类"><a href="#⑧-ServiceImpl服务实现类" class="headerlink" title="⑧ ServiceImpl服务实现类"></a>⑧ ServiceImpl服务实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArticleService的实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ArticleVo&gt; <span class="title">listService</span><span class="params">(PageParam pageParam)</span> </span>{</span><br><span class="line">        Page&lt;Article&gt; page=<span class="keyword">new</span> Page&lt;&gt;(pageParam.getPage(),pageParam.getPageSize());</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//第一项是根据是否置顶排序，第二项是根据创建时间排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getWeight,Article::getCreateDate);</span><br><span class="line">        <span class="comment">//通过MP自带的selectPage方法返回一个分页对象</span></span><br><span class="line">        Page&lt;Article&gt; articlePage = articleMapper.selectPage(page, queryWrapper);</span><br><span class="line">        <span class="comment">//获取该分页对象中的数据，也即该页的记录集合</span></span><br><span class="line">        List&lt;Article&gt; records = articlePage.getRecords();</span><br><span class="line">        <span class="comment">//通过copyList函数将List&lt;Article&gt;转化为List&lt;ArticleVo&gt;对象输出</span></span><br><span class="line">        List&lt;ArticleVo&gt;  articleVoList= copyList(records,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//传入List&lt;Article&gt;，以及是否有标签，是否有作者</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ArticleVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Article&gt; records,<span class="keyword">boolean</span> isTag,<span class="keyword">boolean</span> isAuthor)</span> </span>{</span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历List&lt;Article&gt;中的每一个记录，通过copy()函数将其转化为ArticleVo对象并添加到articleVoList中</span></span><br><span class="line">        <span class="keyword">for</span> (Article record : records) {</span><br><span class="line">            articleVoList.add(copy(record,isTag,isAuthor));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//copy()函数用于将Article对象转化为ArticleVo对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArticleVo <span class="title">copy</span><span class="params">(Article article,<span class="keyword">boolean</span> isTag,<span class="keyword">boolean</span> isAuthor)</span></span>{</span><br><span class="line">        ArticleVo articleVo=<span class="keyword">new</span> ArticleVo();</span><br><span class="line">        <span class="comment">//通过spring自带的工具类实现属性复制（只有同名且同类型的属性可以复制）</span></span><br><span class="line">        BeanUtils.copyProperties(article,articleVo);</span><br><span class="line">        <span class="comment">//由于两个类的创建时间属性类型不同，故需要手动复制</span></span><br><span class="line">        <span class="comment">//Article的id为Long，ArticleVo的id为String</span></span><br><span class="line">        articleVo.setId(String.valueOf(article.getId()));</span><br><span class="line">        <span class="comment">//此处的new DateTime()是joda-time依赖提供的方法</span></span><br><span class="line">        articleVo.setCreateDate(<span class="keyword">new</span> DateTime(article.getCreateDate()).toString(<span class="string">"yyyy-MM-dd HH:mm"</span>));</span><br><span class="line">        <span class="comment">//如果该文章有标题，则通过tagService提供的findTagsByArticleId()方法找到其标签</span></span><br><span class="line">        <span class="keyword">if</span>(isTag){</span><br><span class="line">            Long articleId = article.getId();</span><br><span class="line">            articleVo.setTags(tagService.findTagsByArticleId(articleId));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果该文章有作者，则通过sysUserService提供的findUserById()方法找到其作者，并得到其Nickname属性</span></span><br><span class="line">        <span class="keyword">if</span>(isAuthor){</span><br><span class="line">            Long authorId = article.getAuthorId();</span><br><span class="line">            articleVo.setAuthor(sysUserService.findUserById(authorId).getNickname());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> articleVo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TagService的实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagServiceImpl</span> <span class="keyword">implements</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagMapper tagMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//通过文章ID返回对应的标签</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TagVo&gt; <span class="title">findTagsByArticleId</span><span class="params">(Long articleId)</span> </span>{</span><br><span class="line">        <span class="comment">//调用TagMapper中的findTagsByArticleId方法（该方法需要连表查询，在MP中没有实现，故我们需要手动实现）</span></span><br><span class="line">        List&lt;Tag&gt; tags=tagMapper.findTagsByArticleId(articleId);</span><br><span class="line">        <span class="comment">//通过copyList将List&lt;Tag&gt;转化为List&lt;TagVo&gt;</span></span><br><span class="line">        <span class="keyword">return</span> copyList(tags);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TagVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Tag&gt; tags)</span> </span>{</span><br><span class="line">        List&lt;TagVo&gt; tagVoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Tag tag : tags) {</span><br><span class="line">            tagVoList.add(copy(tag));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tagVoList;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TagVo <span class="title">copy</span><span class="params">(Tag tag)</span></span>{</span><br><span class="line">        TagVo tagVo=<span class="keyword">new</span> TagVo();</span><br><span class="line">        BeanUtils.copyProperties(tag,tagVo);</span><br><span class="line">        tagVo.setId(String.valueOf(tag.getId()));</span><br><span class="line">        <span class="keyword">return</span> tagVo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SysUserService实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">findUserById</span><span class="params">(Long authorId)</span> </span>{</span><br><span class="line">        SysUser sysUser = sysUserMapper.selectById(authorId);</span><br><span class="line">        <span class="keyword">if</span>(sysUser==<span class="keyword">null</span>){</span><br><span class="line">            sysUser=<span class="keyword">new</span> SysUser();</span><br><span class="line">            sysUser.setNickname(<span class="string">"xlx"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sysUser;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑧-Mapper-xml实现数据库查询"><a href="#⑧-Mapper-xml实现数据库查询" class="headerlink" title="⑧ Mapper.xml实现数据库查询"></a>⑧ Mapper.xml实现数据库查询</h4><p>注意对应的xml文件要放在resources下的同名目录，且文件名要相同，如下图：</p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220119222216542.png" alt="image-20220119222216542"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MyBatis配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ch.mapper.TagMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Tag&gt; findTagsByArticleId(Long articleId);</span></span><br><span class="line"><span class="comment">    id代表方法名，parameterType表示输入变量的类型，resultType表示返回值的类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTagsByArticleId"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span> <span class="attr">resultType</span>=<span class="string">"com.ch.pojo.Tag"</span>&gt;</span></span><br><span class="line">        select  id,avatar,tag_name as tagName from ms_tag</span><br><span class="line">        where id in (select tag_id from ms_article_tag where article_id=#{articleId})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-3-测试结果"><a href="#3-3-3-测试结果" class="headerlink" title="3.3.3 测试结果"></a>3.3.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220119222609153.png" alt="image-20220119222609153"></p><ul><li>能显示文章信息，标签和作者也能正常显示</li></ul><h2 id="3-4-最热标签功能"><a href="#3-4-最热标签功能" class="headerlink" title="3.4 最热标签功能"></a>3.4 最热标签功能</h2><h3 id="3-4-1-接口说明"><a href="#3-4-1-接口说明" class="headerlink" title="3.4.1 接口说明"></a>3.4.1 接口说明</h3><ul><li><p>接口url：/tags/hot</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：无</p></li><li><p>我们期望点击标签关于文章的所有列表都显示出来</p></li><li><p>返回数据：</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">"tagName"</span>:<span class="string">"4444"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-2-编码"><a href="#3-4-2-编码" class="headerlink" title="3.4.2 编码"></a>3.4.2 编码</h3><h4 id="①TagsController控制类"><a href="#①TagsController控制类" class="headerlink" title="①TagsController控制类"></a>①TagsController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("tags")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagsController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@GetMapping("hot")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hot</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> limit=<span class="number">6</span>;<span class="comment">//限制最热标签最多只能有六个</span></span><br><span class="line">        <span class="keyword">return</span> tagService.hots(limit);<span class="comment">//调用TagService的hots方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-TagService服务类"><a href="#②-TagService服务类" class="headerlink" title="② TagService服务类"></a>② TagService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="comment">//添加此功能</span></span><br><span class="line">    <span class="comment">//输入限制标签数，返回最热的limit个标签</span></span><br><span class="line">    <span class="function">Result <span class="title">hots</span><span class="params">(<span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-TagServiceImpl实现类"><a href="#③-TagServiceImpl实现类" class="headerlink" title="③ TagServiceImpl实现类"></a>③ TagServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagServiceImpl</span> <span class="keyword">implements</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagMapper tagMapper;</span><br><span class="line">    <span class="comment">//添加此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hots</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>{</span><br><span class="line">        <span class="comment">//调用TagMapper的findHotsTagIds方法，返回前limit个标签的id集合</span></span><br><span class="line">        List&lt;Long&gt; tagIds=tagMapper.findHotsTagIds(limit);</span><br><span class="line">        <span class="comment">//判断：若集合为空，则返回空集合，因为下面的findTagsByTagIds()方法传进去的tagIds不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(tagIds)){</span><br><span class="line">            <span class="keyword">return</span> Result.success(Collections.emptyList());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//调用TagMapper的findTagsByTagIds方法，返回前limit个标签的集合</span></span><br><span class="line">        List&lt;Tag&gt; tagList=tagMapper.findTagsByTagIds(tagIds);</span><br><span class="line">        <span class="keyword">return</span> Result.success(tagList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-TagMapper类"><a href="#④-TagMapper类" class="headerlink" title="④ TagMapper类"></a>④ TagMapper类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Tag</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//添加下面两个方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//找出对应标签id下文章数量前limit多的标签，返回其id集合</span></span><br><span class="line">    <span class="function">List&lt;Long&gt; <span class="title">findHotsTagIds</span><span class="params">(<span class="keyword">int</span> limit)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过标签id集合，返回对应的标签集合</span></span><br><span class="line">    <span class="comment">//当有多个参数时不能直接传入List，要用注解将参数传进去</span></span><br><span class="line">    <span class="function">List&lt;Tag&gt; <span class="title">findTagsByTagIds</span><span class="params">(<span class="meta">@Param("tagIds")</span> List&lt;Long&gt; tagIds)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-Mapper-xml实现数据库查询"><a href="#⑤-Mapper-xml实现数据库查询" class="headerlink" title="⑤ Mapper.xml实现数据库查询"></a>⑤ Mapper.xml实现数据库查询</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ch.mapper.TagMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Long&gt; findHotsTagIds(int limit);--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sql语句的意思是在ms_article_tag表中查找tag_id，根据tag_id将其聚合在一起，再根据count（*）的数量以递减的顺序排序最后限制输出limit条数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findHotsTagIds"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></span><br><span class="line">        select tag_id from ms_article_tag GROUP BY tag_id ORDER BY count(*) DESC LIMIT #{limit}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Tag&gt; findTagsByTagIds(List&lt;Long&gt; tagIds);</span></span><br><span class="line"><span class="comment">        select id,tag_name as tagName from ms_tag where id in (x,x,x,x...);</span></span><br><span class="line"><span class="comment">        相当于传进来一个id集合，然后for循环每个id，拼接成sql语句找到对应的tag对象，多少个id就拼接多少条语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTagsByTagIds"</span> <span class="attr">parameterType</span>=<span class="string">"List"</span> <span class="attr">resultType</span>=<span class="string">"com.ch.pojo.Tag"</span>&gt;</span></span><br><span class="line">        select id,tag_name as tagName from ms_tag where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"tagIds"</span> <span class="attr">item</span>=<span class="string">"tagId"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #{tagId}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-3-测试结果"><a href="#3-4-3-测试结果" class="headerlink" title="3.4.3 测试结果"></a>3.4.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220119224939131.png" alt="image-20220119224939131"></p><ul><li>最热标签显示正常，点击进去也能显示对应文章</li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220119225017392.png" alt="image-20220119225017392"></p><h2 id="3-5-最热文章功能"><a href="#3-5-最热文章功能" class="headerlink" title="3.5 最热文章功能"></a>3.5 最热文章功能</h2><h3 id="3-5-1-接口说明"><a href="#3-5-1-接口说明" class="headerlink" title="3.5.1 接口说明"></a>3.5.1 接口说明</h3><ul><li><p>接口url：/articles/hot</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：无</p></li><li><p>返回数据：</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"springboot介绍以及入门案例"</span>,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Vue.js 是什么"</span>,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Element相关"</span>,</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-2-编码"><a href="#3-5-2-编码" class="headerlink" title="3.5.2 编码"></a>3.5.2 编码</h3><h4 id="①-ArticleController控制类"><a href="#①-ArticleController控制类" class="headerlink" title="① ArticleController控制类"></a>① ArticleController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping("/hot")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hotArticle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> limit=<span class="number">5</span>;<span class="comment">//限制最热文章的数量为5</span></span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList=articleService.getHotArticle(limit);</span><br><span class="line">        <span class="keyword">return</span> Result.success(articleVoList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-ArticleService服务类"><a href="#②-ArticleService服务类" class="headerlink" title="② ArticleService服务类"></a>② ArticleService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="comment">//添加该接口，用于获取最热的limit篇文章</span></span><br><span class="line">    <span class="function">List&lt;ArticleVo&gt; <span class="title">getHotArticle</span><span class="params">(<span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-ArticleServiceImpl实现类"><a href="#③-ArticleServiceImpl实现类" class="headerlink" title="③ ArticleServiceImpl实现类"></a>③ ArticleServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ArticleVo&gt; <span class="title">getHotArticle</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCounts);<span class="comment">//按照文章的浏览量降序排列</span></span><br><span class="line">        queryWrapper.select(Article::getId,Article::getTitle);<span class="comment">//只获取文章的id和标题</span></span><br><span class="line">        <span class="comment">//注意limit "中有一个空格，因为本质上是把queryWrapper所调用的方法拼接成sql语句，所以要加空格</span></span><br><span class="line">        queryWrapper.last(<span class="string">"limit "</span>+limit);<span class="comment">//限制只返回前limit篇文章</span></span><br><span class="line">        List&lt;Article&gt; articleList=articleMapper.selectList(queryWrapper);</span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList= copyList(articleList,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-3-测试结果"><a href="#3-5-3-测试结果" class="headerlink" title="3.5.3 测试结果"></a>3.5.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220120123134487.png" alt="image-20220120123134487"></p><ul><li>测试成功，正确地显示了浏览量前5的文章</li></ul><h2 id="3-6-最新文章功能"><a href="#3-6-最新文章功能" class="headerlink" title="3.6 最新文章功能"></a>3.6 最新文章功能</h2><h3 id="3-6-1-接口说明"><a href="#3-6-1-接口说明" class="headerlink" title="3.6.1 接口说明"></a>3.6.1 接口说明</h3><ul><li>接口url：/articles/new</li><li>请求方式：POST</li><li>请求参数：无</li><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">返回数据：</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"springboot介绍以及入门案例"</span>,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Vue.js 是什么"</span>,</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Element相关"</span>,</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-2-编码"><a href="#3-6-2-编码" class="headerlink" title="3.6.2 编码"></a>3.6.2 编码</h3><h4 id="①-ArticleController控制类-1"><a href="#①-ArticleController控制类-1" class="headerlink" title="① ArticleController控制类"></a>① ArticleController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping("/new")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">newArticle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> limit=<span class="number">5</span>;</span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList=articleService.getNewArticle(limit);</span><br><span class="line">        <span class="keyword">return</span> Result.success(articleVoList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-ArticleService服务类-1"><a href="#②-ArticleService服务类-1" class="headerlink" title="② ArticleService服务类"></a>② ArticleService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="comment">//添加该接口，用于获取最热的limit篇文章</span></span><br><span class="line">    <span class="function">List&lt;ArticleVo&gt; <span class="title">getNewArticle</span><span class="params">(<span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-ArticleServiceImpl实现类-1"><a href="#③-ArticleServiceImpl实现类-1" class="headerlink" title="③ ArticleServiceImpl实现类"></a>③ ArticleServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ArticleVo&gt; <span class="title">getNewArticle</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.orderByDesc(Article::getCreateDate);<span class="comment">//按创建时间降序排列</span></span><br><span class="line">        queryWrapper.select(Article::getId,Article::getTitle);<span class="comment">//只获取文章的id和标题</span></span><br><span class="line">        queryWrapper.last(<span class="string">"limit "</span>+limit);<span class="comment">//限制只返回前limit篇文章</span></span><br><span class="line">        List&lt;Article&gt; articleList=articleMapper.selectList(queryWrapper);</span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList= copyList(articleList,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-3-测试结果"><a href="#3-6-3-测试结果" class="headerlink" title="3.6.3 测试结果"></a>3.6.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220120123732843.png" alt="image-20220120123732843"></p><ul><li>测试成功，正确地显示了最新的五篇文章</li></ul><h2 id="3-7-文章归档功能"><a href="#3-7-文章归档功能" class="headerlink" title="3.7 文章归档功能"></a>3.7 文章归档功能</h2><h3 id="3-7-1-接口说明"><a href="#3-7-1-接口说明" class="headerlink" title="3.7.1 接口说明"></a>3.7.1 接口说明</h3><ul><li>接口url：/articles/listArchives</li><li>请求方式：POST</li><li>请求参数：无</li><li>功能：根据创建时间某年某月将每一篇文章归类</li><li>返回数据</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"year"</span>: <span class="string">"2021"</span>,</span><br><span class="line">            <span class="string">"month"</span>: <span class="string">"6"</span>,</span><br><span class="line">            <span class="string">"count"</span>: <span class="number">2</span></span><br><span class="line">        }</span><br><span class="line">            </span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-2-编码"><a href="#3-7-2-编码" class="headerlink" title="3.7.2 编码"></a>3.7.2 编码</h3><h4 id="①-dos类"><a href="#①-dos类" class="headerlink" title="① dos类"></a>① dos类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Archives</span> </span>{<span class="comment">//dos层中的类是浏览器要用到，但是又不用持久化存储在数据库中的类</span></span><br><span class="line">    <span class="keyword">private</span> Integer year;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer month;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-ArticleController控制类"><a href="#②-ArticleController控制类" class="headerlink" title="② ArticleController控制类"></a>② ArticleController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    </span><br><span class="line">     <span class="meta">@PostMapping("/listArchives")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">listArchives</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Archives&gt; archivesList=articleService.listArchives();</span><br><span class="line">        <span class="keyword">return</span> Result.success(archivesList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-ArticleService服务类"><a href="#③-ArticleService服务类" class="headerlink" title="③ ArticleService服务类"></a>③ ArticleService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="comment">//添加该接口，用于将文章按照创建年月进行归档</span></span><br><span class="line">    <span class="function">List&lt;Archives&gt; <span class="title">listArchives</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-ArticleServiceImpl实现类"><a href="#④-ArticleServiceImpl实现类" class="headerlink" title="④ ArticleServiceImpl实现类"></a>④ ArticleServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Archives&gt; <span class="title">listArchives</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//调用ArticleMapper的listArchives方法</span></span><br><span class="line">        List&lt;Archives&gt; archivesList = articleMapper.listArchives();</span><br><span class="line">        <span class="keyword">return</span> archivesList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-ArticleMapper类"><a href="#⑤-ArticleMapper类" class="headerlink" title="⑤ ArticleMapper类"></a>⑤ ArticleMapper类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Article</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//添加以下接口</span></span><br><span class="line">    <span class="comment">//用于获取归档后的列表</span></span><br><span class="line">    <span class="function">List&lt;Archives&gt; <span class="title">listArchives</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-ArticleMapper-xml"><a href="#⑥-ArticleMapper-xml" class="headerlink" title="⑥ ArticleMapper.xml"></a>⑥ ArticleMapper.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql语句是将文章表中的创建时间属性分解为年和月，再通过年和月属性进行分类，然后用count统计数量，最后返回年月以及相应的数量--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--year()和month()是mysql提供的方法，year()函数返回一个指定日期的年份值，month()函数返回一个指定日期的月份值--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--FROM_UNIXTIME(create_date/1000)是因为create_date为bigint 13位，直接year()不行，需要先转date型后再year()。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ch.mapper.ArticleMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listArchives"</span> <span class="attr">resultType</span>=<span class="string">"com.ch.dos.Archives"</span>&gt;</span></span><br><span class="line">        select year(FROM_UNIXTIME(create_date/1000)) as year,month(FROM_UNIXTIME(create_date/1000)) as month, count(*) as count from ms_article group by year,month</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-3-测试结果"><a href="#3-7-3-测试结果" class="headerlink" title="3.7.3 测试结果"></a>3.7.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220120144654975.png" alt="image-20220120144654975"></p><ul><li>测试结果成功</li></ul><h2 id="3-8-登陆功能"><a href="#3-8-登陆功能" class="headerlink" title="3.8 登陆功能"></a>3.8 登陆功能</h2><h3 id="3-8-1-接口说明"><a href="#3-8-1-接口说明" class="headerlink" title="3.8.1 接口说明"></a>3.8.1 接口说明</h3><ul><li><p>接口url：/login</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>string</td><td>账号</td></tr><tr><td>password</td><td>string</td><td>密码</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"token"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-8-2-加密处理"><a href="#3-8-2-加密处理" class="headerlink" title="3.8.2 加密处理"></a>3.8.2 加密处理</h3><h4 id="①需要的技术"><a href="#①需要的技术" class="headerlink" title="①需要的技术"></a>①需要的技术</h4><ul><li><p>登录使用jwt技术</p></li><li><p>密码使用md5加密技术</p></li><li><p>token使用redis缓存技术</p></li></ul><h4 id="②相关依赖"><a href="#②相关依赖" class="headerlink" title="②相关依赖"></a>②相关依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jwt加密--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--md5加密--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用于将java实体类转化为对应的json字符串对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-8-3-编码"><a href="#3-8-3-编码" class="headerlink" title="3.8.3 编码"></a>3.8.3 编码</h3><h4 id="①-LoginParam参数类"><a href="#①-LoginParam参数类" class="headerlink" title="① LoginParam参数类"></a>① LoginParam参数类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginParam</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-LoginController控制类"><a href="#②-LoginController控制类" class="headerlink" title="② LoginController控制类"></a>② LoginController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/login")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//SysUserService最好只负责用户表相关的增删改查，所以新建一个LoginService</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginParam loginParam)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> loginService.login(loginParam);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-LoginService服务类"><a href="#③-LoginService服务类" class="headerlink" title="③ LoginService服务类"></a>③ LoginService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SysUserService最好只负责用户表相关的增删改查，所以新建一个LoginService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">login</span><span class="params">(LoginParam loginParam)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-LoginServiceImpl实现类"><a href="#④-LoginServiceImpl实现类" class="headerlink" title="④ LoginServiceImpl实现类"></a>④ LoginServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="comment">//redis缓存相关的类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密盐用于加密</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String slat = <span class="string">"mszlu!@#"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(LoginParam loginParam)</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 检查参数是否合法</span></span><br><span class="line"><span class="comment">         * 2. 根据用户名和密码去user表中查询 是否存在</span></span><br><span class="line"><span class="comment">         * 3. 如果不存在 登录失败</span></span><br><span class="line"><span class="comment">         * 4. 如果存在 ，使用jwt 生成token 返回给前端</span></span><br><span class="line"><span class="comment">         * 5. token放入redis当中，redis  token：user信息 设置过期时间</span></span><br><span class="line"><span class="comment">         *  (登录认证的时候 先认证token字符串是否合法，去redis认证是否存在)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String account=loginParam.getAccount();</span><br><span class="line">        String password=loginParam.getPassword();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(account)||StringUtils.isEmpty(password)){</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ErrorCode.PARAMS_ERROR.getCode(), ErrorCode.PARAMS_ERROR.getMsg());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//用密码盐对密码进行加密</span></span><br><span class="line">        password= DigestUtils.md5Hex(password+slat);</span><br><span class="line">        <span class="comment">//调用SysUserService的根据账号和密码寻找用户的方法</span></span><br><span class="line">        SysUser sysUser=sysUserService.findUser(account,password);</span><br><span class="line">        <span class="keyword">if</span>(sysUser==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ErrorCode.ACCOUNT_PWD_NOT_EXIST.getCode(), ErrorCode.ACCOUNT_PWD_NOT_EXIST.getMsg());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//调用JWTUtils工具类生成token</span></span><br><span class="line">        String token= JWTUtils.createToken(sysUser.getId());</span><br><span class="line">        <span class="comment">//将token和用户信息存储到redis中，时间为1，单位为天</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"TOKEN_"</span>+token, JSON.toJSONString(sysUser),<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">        <span class="keyword">return</span> Result.success(token);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-SysUserService服务类"><a href="#⑤-SysUserService服务类" class="headerlink" title="⑤ SysUserService服务类"></a>⑤ SysUserService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="comment">//添加以下方法</span></span><br><span class="line">    <span class="comment">//根据账号和密码寻找用户并返回</span></span><br><span class="line">    <span class="function">SysUser <span class="title">findUser</span><span class="params">(String account, String password)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-SysUserServiceImpl实现类"><a href="#⑥-SysUserServiceImpl实现类" class="headerlink" title="⑥ SysUserServiceImpl实现类"></a>⑥ SysUserServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">findUser</span><span class="params">(String account, String password)</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;SysUser&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.eq(SysUser::getAccount,account);</span><br><span class="line">        queryWrapper.eq(SysUser::getPassword,password);</span><br><span class="line">        queryWrapper.select(SysUser::getAccount,SysUser::getId,SysUser::getAvatar,SysUser::getNickname);</span><br><span class="line">        queryWrapper.last(<span class="string">"limit 1"</span>);<span class="comment">//找到一个匹配的用户后就停止查询了，否则会将整个数据库查询完才返回</span></span><br><span class="line">        <span class="keyword">return</span> sysUserMapper.selectOne(queryWrapper);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-8-4-测试结果"><a href="#3-8-4-测试结果" class="headerlink" title="3.8.4 测试结果"></a>3.8.4 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220120213444777.png" alt="image-20220120213444777"></p><h2 id="3-9-获取用户信息功能"><a href="#3-9-获取用户信息功能" class="headerlink" title="3.9 获取用户信息功能"></a>3.9 获取用户信息功能</h2><h3 id="3-9-1-接口说明"><a href="#3-9-1-接口说明" class="headerlink" title="3.9.1 接口说明"></a>3.9.1 接口说明</h3><ul><li><p>得从http的head里面拿到这个参数，这样传参相对来说安全一些，返回是数据是我们用户相关的数据，id，账号、昵称和头像</p></li><li><p>接口url：/users/currentUser</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>Authorization</td><td>string</td><td>头部信息(TOKEN)</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: {</span><br><span class="line">        <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">"account"</span>:<span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"nickaname"</span>:<span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"avatar"</span>:<span class="string">"ss"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-9-2-编码"><a href="#3-9-2-编码" class="headerlink" title="3.9.2 编码"></a>3.9.2 编码</h3><h4 id="①-LoginUserVo参数类"><a href="#①-LoginUserVo参数类" class="headerlink" title="① LoginUserVo参数类"></a>① LoginUserVo参数类</h4><p>对于登陆的用户，只需获取以下信息：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUserVo</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-UserController控制类"><a href="#②-UserController控制类" class="headerlink" title="② UserController控制类"></a>② UserController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@GetMapping("/currentUser")</span></span><br><span class="line">    <span class="comment">//返回当前用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">currentUser</span><span class="params">(<span class="meta">@RequestHeader("Authorization")</span> String token)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> sysUserService.findUserByToken(token);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-SysUserService服务类"><a href="#③-SysUserService服务类" class="headerlink" title="③ SysUserService服务类"></a>③ SysUserService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="comment">//添加以下方法，通过token找到对应用户</span></span><br><span class="line">    <span class="function">Result <span class="title">findUserByToken</span><span class="params">(String token)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-SysUserServiceImpl实现类"><a href="#④-SysUserServiceImpl实现类" class="headerlink" title="④ SysUserServiceImpl实现类"></a>④ SysUserServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findUserByToken</span><span class="params">(String token)</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、token合法性校验</span></span><br><span class="line"><span class="comment">         * 是否为空 ，解析是否成功，redis是否存在</span></span><br><span class="line"><span class="comment">         * 2、如果校验失败，返回错误</span></span><br><span class="line"><span class="comment">         *3、如果成功，返回对应结果 LoginUserVo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SysUser sysUser = loginService.checkToken(token);<span class="comment">//调用loginService的checkToken来检查token合法性</span></span><br><span class="line">        <span class="keyword">if</span>(sysUser==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ErrorCode.TOKEN_ERROR.getCode(), ErrorCode.TOKEN_ERROR.getMsg());</span><br><span class="line">        }</span><br><span class="line">        LoginUserVo loginUserVo=<span class="keyword">new</span> LoginUserVo();</span><br><span class="line">        BeanUtils.copyProperties(sysUser,loginUserVo);</span><br><span class="line">        loginUserVo.setId(String.valueOf(sysUser.getId()));</span><br><span class="line">        <span class="keyword">return</span> Result.success(loginUserVo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-LoginService服务类"><a href="#⑤-LoginService服务类" class="headerlink" title="⑤ LoginService服务类"></a>⑤ LoginService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>{</span><br><span class="line">    <span class="comment">//添加以下方法，来检查token合法性，若合法，则将其对应的redis缓存转化成sysUser实体类返回</span></span><br><span class="line">    <span class="function">SysUser <span class="title">checkToken</span><span class="params">(String token)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-LoginServiceImpl实现类"><a href="#⑥-LoginServiceImpl实现类" class="headerlink" title="⑥ LoginServiceImpl实现类"></a>⑥ LoginServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">checkToken</span><span class="params">(String token)</span> </span>{</span><br><span class="line">        <span class="comment">//如果token为空</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token)){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        Map&lt;String, Object&gt; stringObjectMap = JWTUtils.checkToken(token);</span><br><span class="line">        <span class="comment">//如果解析失败</span></span><br><span class="line">        <span class="keyword">if</span>(stringObjectMap ==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果redis中没有对应缓存</span></span><br><span class="line">        String userJson =  redisTemplate.opsForValue().get(<span class="string">"TOKEN_"</span>+token);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(userJson)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将redis中缓存的json对象转化为对应的SysUser对象</span></span><br><span class="line">        SysUser sysUser = JSON.parseObject(userJson, SysUser.class);</span><br><span class="line">        <span class="keyword">return</span> sysUser;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-9-3-测试结果"><a href="#3-9-3-测试结果" class="headerlink" title="3.9.3 测试结果"></a>3.9.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220121114533487.png" alt="image-20220121114533487"></p><p>成功获取用户信息</p><h2 id="3-10-退出登录功能"><a href="#3-10-退出登录功能" class="headerlink" title="3.10 退出登录功能"></a>3.10 退出登录功能</h2><h3 id="3-10-1-接口说明"><a href="#3-10-1-接口说明" class="headerlink" title="3.10.1 接口说明"></a>3.10.1 接口说明</h3><ul><li><p>登陆时，对token进行认证，同时在redis中进行注册，token字符串没法更改掉，只能由前端进行清除，后端能做的就是把redis进行清除</p></li><li><p>接口url：/logout</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>Authorization</td><td>string</td><td>头部信息(TOKEN)</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="literal">null</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-10-2-编码"><a href="#3-10-2-编码" class="headerlink" title="3.10.2 编码"></a>3.10.2 编码</h3><h4 id="①-LogoutController控制类"><a href="#①-LogoutController控制类" class="headerlink" title="① LogoutController控制类"></a>① LogoutController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/logout")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">logout</span><span class="params">(<span class="meta">@RequestHeader("Authorization")</span> String token)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> loginService.logout(token);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-LoginService服务类"><a href="#②-LoginService服务类" class="headerlink" title="② LoginService服务类"></a>② LoginService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>{</span><br><span class="line">    <span class="comment">//添加以下方法，用于退出登陆</span></span><br><span class="line">    <span class="function">Result <span class="title">logout</span><span class="params">(String token)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-LoginServiceImpl实现类"><a href="#③-LoginServiceImpl实现类" class="headerlink" title="③ LoginServiceImpl实现类"></a>③ LoginServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入token，并调用RedisTemplate的delete方法将redis中的token对应的缓存删除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">logout</span><span class="params">(String token)</span> </span>{</span><br><span class="line">        redisTemplate.delete(<span class="string">"TOKEN_"</span>+token);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-11-注册功能"><a href="#3-11-注册功能" class="headerlink" title="3.11 注册功能"></a>3.11 注册功能</h2><h3 id="3-11-1-接口说明"><a href="#3-11-1-接口说明" class="headerlink" title="3.11.1 接口说明"></a>3.11.1 接口说明</h3><ul><li><p>接口url：/register</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>string</td><td>账号</td></tr><tr><td>password</td><td>string</td><td>密码</td></tr><tr><td>nickname</td><td>string</td><td>昵称</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"token"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-11-2-编码"><a href="#3-11-2-编码" class="headerlink" title="3.11.2 编码"></a>3.11.2 编码</h3><h4 id="①-RegisterParam参数类"><a href="#①-RegisterParam参数类" class="headerlink" title="① RegisterParam参数类"></a>① RegisterParam参数类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterParam</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-RegisterController控制类"><a href="#②-RegisterController控制类" class="headerlink" title="② RegisterController控制类"></a>② RegisterController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/register")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RegisterService registerService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(<span class="meta">@RequestBody</span> RegisterParam registerParam)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> registerService.register(registerParam);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-RegisterService服务类"><a href="#③-RegisterService服务类" class="headerlink" title="③ RegisterService服务类"></a>③ RegisterService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">register</span><span class="params">(RegisterParam registerParam)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-RegisterServiceImpl实现类"><a href="#④-RegisterServiceImpl实现类" class="headerlink" title="④ RegisterServiceImpl实现类"></a>④ RegisterServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span><span class="comment">//添加事务注解，一般添加在接口处比较合理，但是添加在实现类上也行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServiceImpl</span> <span class="keyword">implements</span> <span class="title">RegisterService</span></span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line">    <span class="comment">//加密盐用于加密</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String slat = <span class="string">"mszlu!@#"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(RegisterParam registerParam)</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 判断参数 是否合法</span></span><br><span class="line"><span class="comment">         * 2. 判断账户是否存在，存在 返回账户已经被注册</span></span><br><span class="line"><span class="comment">         * 3. 不存在，注册用户</span></span><br><span class="line"><span class="comment">         * 4. 生成token</span></span><br><span class="line"><span class="comment">         * 5. 存入redis 并返回</span></span><br><span class="line"><span class="comment">         * 6. 注意加上事务，一旦中间的任何过程出现问题，注册的用户需要回滚</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String account = registerParam.getAccount();</span><br><span class="line">        String password = registerParam.getPassword();</span><br><span class="line">        String nickname = registerParam.getNickname();</span><br><span class="line">        <span class="comment">//若账户、密码或用户名某一项为空</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(account)||StringUtils.isEmpty(password)||StringUtils.isEmpty(nickname)){</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ErrorCode.PARAMS_ERROR.getCode(), ErrorCode.PARAMS_ERROR.getMsg());</span><br><span class="line">        }</span><br><span class="line">        SysUser sysUser=sysUserService.findUserByAccount(account);</span><br><span class="line">        <span class="comment">//若不存在此账户</span></span><br><span class="line">        <span class="keyword">if</span>(sysUser!=<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ErrorCode.ACCOUNT_EXIST.getCode(), ErrorCode.ACCOUNT_EXIST.getMsg());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//设置基本参数</span></span><br><span class="line">        sysUser = <span class="keyword">new</span> SysUser();</span><br><span class="line">        sysUser.setNickname(nickname);</span><br><span class="line">        sysUser.setAccount(account);</span><br><span class="line">        sysUser.setPassword(DigestUtils.md5Hex(password+slat));</span><br><span class="line">        sysUser.setCreateDate(System.currentTimeMillis());</span><br><span class="line">        sysUser.setLastLogin(System.currentTimeMillis());</span><br><span class="line">        sysUser.setAvatar(<span class="string">"/static/img/logo.b3a48c0.png"</span>);</span><br><span class="line">        sysUser.setAdmin(<span class="number">1</span>); <span class="comment">//1 为true</span></span><br><span class="line">        sysUser.setDeleted(<span class="number">0</span>); <span class="comment">// 0 为false</span></span><br><span class="line">        sysUser.setSalt(<span class="string">""</span>);</span><br><span class="line">        sysUser.setStatus(<span class="string">""</span>);</span><br><span class="line">        sysUser.setEmail(<span class="string">""</span>);</span><br><span class="line">        sysUserService.save(sysUser);</span><br><span class="line">        <span class="comment">//创造对应token并存入redis中</span></span><br><span class="line">        String token= JWTUtils.createToken(sysUser.getId());</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"TOKEN_"</span>+token, JSON.toJSONString(sysUser),<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">        <span class="keyword">return</span> Result.success(token);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-SysUserService服务类-1"><a href="#⑤-SysUserService服务类-1" class="headerlink" title="⑤ SysUserService服务类"></a>⑤ SysUserService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="function">SysUser <span class="title">findUserByAccount</span><span class="params">(String account)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(SysUser sysUser)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-SysUserServiceImpl实现类-1"><a href="#⑥-SysUserServiceImpl实现类-1" class="headerlink" title="⑥ SysUserServiceImpl实现类"></a>⑥ SysUserServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据账户找到对应用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">findUserByAccount</span><span class="params">(String account)</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;SysUser&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.eq(SysUser::getAccount,account);</span><br><span class="line">        queryWrapper.last(<span class="string">"limit 1"</span>);</span><br><span class="line">        sysUserMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(SysUser sysUser)</span> </span>{</span><br><span class="line">        sysUserMapper.insert(sysUser);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-11-3-测试结果"><a href="#3-11-3-测试结果" class="headerlink" title="3.11.3 测试结果"></a>3.11.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220123133820901.png" alt="image-20220123133820901"></p><h2 id="3-12-登陆拦截器"><a href="#3-12-登陆拦截器" class="headerlink" title="3.12 登陆拦截器"></a>3.12 登陆拦截器</h2><h3 id="3-12-1-功能说明"><a href="#3-12-1-功能说明" class="headerlink" title="3.12.1 功能说明"></a>3.12.1 功能说明</h3><p>每次访问需要登录的资源的时候，都需要在代码中进行判断，一旦登录的逻辑有所改变，代码都得进行变动，非常不合适。</p><p>故需要使用登陆拦截器统一进行登录拦截，遇到需要登录才能访问的接口时，如果未登录，拦截器直接返回，并跳转登录页面。</p><h3 id="3-12-2-拦截器实现"><a href="#3-12-2-拦截器实现" class="headerlink" title="3.12.2 拦截器实现"></a>3.12.2 拦截器实现</h3><h4 id="①-LoginInterceptor"><a href="#①-LoginInterceptor" class="headerlink" title="① LoginInterceptor"></a>① LoginInterceptor</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//在执行controller方法之前进行执行</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 需要判断 请求的接口路径是否为 HandlerMethod (controller方法)</span></span><br><span class="line"><span class="comment">         * 2. 判断 token 是否为空，如果为空，则说明未登录</span></span><br><span class="line"><span class="comment">         * 3. 如果 token 不为空，则进行登录验证：loginService.checkToken(token)</span></span><br><span class="line"><span class="comment">         * 4. 如果认证成功，放行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果请求的路劲不是controller中包含的路径，直接放行，因为handler有可能是访问静态资源的</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod)){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//从请求头中获取token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token)){<span class="comment">//若token为空，不放行</span></span><br><span class="line">            Result result = Result.fail(ErrorCode.NO_LOGIN.getCode(), ErrorCode.NO_LOGIN.getMsg());</span><br><span class="line">            <span class="comment">//设置浏览器识别返回的是json</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            <span class="comment">//SON.toJSONString则是将对象转化为Json字符串</span></span><br><span class="line">            response.getWriter().print(JSON.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        SysUser sysUser = loginService.checkToken(token);</span><br><span class="line">        <span class="keyword">if</span> (sysUser == <span class="keyword">null</span>){<span class="comment">//如果由token得到的用户为空，不放行</span></span><br><span class="line">            Result result = Result.fail(ErrorCode.NO_LOGIN.getCode(), ErrorCode.NO_LOGIN.getMsg());</span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().print(JSON.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        UserThreadLocal.put(sysUser);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-配置拦截器"><a href="#②-配置拦截器" class="headerlink" title="② 配置拦截器"></a>② 配置拦截器</h4><ul><li>去配置类中将该拦截器配置进去</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">//假设拦截test接口，后续实际遇到拦截的接口时，再配置真正的拦截接口</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/test"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-12-3-测试结果"><a href="#3-12-3-测试结果" class="headerlink" title="3.12.3 测试结果"></a>3.12.3 测试结果</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("test")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>在postman中发送请求</li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220123135315341.png" alt="image-20220123135315341"></p><h2 id="3-13-Threadlocal保存用户信息"><a href="#3-13-Threadlocal保存用户信息" class="headerlink" title="3.13 Threadlocal保存用户信息"></a>3.13 Threadlocal保存用户信息</h2><ul><li>使用Threadlocal可以将某个用户的信息放在一个线程中</li><li>有多个用户则创建多个线程，每个线程仅存储一个用户信息，这样可以保证线程安全</li><li>当然线程内除了用户信息，也可以存放其他信息</li><li>用户信息明明已经和token一起存储在redis中了，为什么还要用Threadlocal？<ul><li>因为不方便！要获取用户信息就要用LoginService.checkToken(token)，若有的controller需要用户信息，就要先获取token，再注入LoginService，再调用checkToken(token)方法</li></ul></li></ul><h3 id="3-13-1-实现流程"><a href="#3-13-1-实现流程" class="headerlink" title="3.13.1 实现流程"></a>3.13.1 实现流程</h3><ul><li>在登录业务代码中，当用户登录成功时，生成一个登录凭证存储到redis中</li><li>将凭证中的字符串保存在cookie中返回给客户端</li><li>使用一个拦截器拦截请求，从cookie中获取凭证字符串与redis中的凭证进行匹配，获取用户信息</li><li>将用户信息存储到ThreadLocal中，在本次请求中持有用户信息，即可在后续操作中使用到用户信息</li><li>当用户操作完成后，清除Threadlocal中的信息，否则会有内存泄漏风险</li><li>内存泄露原理如下<ul><li>实线代表强引用,虚线代表弱引用</li><li>每一个Thread维护一个ThreadLocalMap, key为使用弱引用的ThreadLocal实例，value为线程变量的副本。</li><li>强引用，使用最普遍的引用，一个对象具有强引用，不会被垃圾回收器回收。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不回收这种对象。</li><li>如果想取消强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样可以使JVM在合适的时间就会回收该对象。</li><li>弱引用，JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。在java中，用java.lang.ref.WeakReference类来表示。</li></ul></li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220123141352666.png" alt="image-20220123141352666"></p><h3 id="3-14-1-编码"><a href="#3-14-1-编码" class="headerlink" title="3.14.1 编码"></a>3.14.1 编码</h3><h4 id="①-UserThreadLocal"><a href="#①-UserThreadLocal" class="headerlink" title="① UserThreadLocal"></a>① UserThreadLocal</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserThreadLocal</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserThreadLocal</span><span class="params">()</span></span>{}</span><br><span class="line">    <span class="comment">//线程变量隔离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SysUser&gt; LOCAL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(SysUser sysUser)</span></span>{</span><br><span class="line">        LOCAL.set(sysUser);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SysUser <span class="title">get</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> LOCAL.get();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>{</span><br><span class="line">        LOCAL.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-清理ThreadLocal信息"><a href="#②-清理ThreadLocal信息" class="headerlink" title="② 清理ThreadLocal信息"></a>② 清理ThreadLocal信息</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//afterCompletion：在所有操作完成后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//如果不删除 ThreadLocal中用完的信息 会有内存泄漏的风险</span></span><br><span class="line">        UserThreadLocal.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-14-文章详情功能"><a href="#3-14-文章详情功能" class="headerlink" title="3.14 文章详情功能"></a>3.14 文章详情功能</h2><h3 id="3-14-1-接口说明"><a href="#3-14-1-接口说明" class="headerlink" title="3.14.1 接口说明"></a>3.14.1 接口说明</h3><ul><li><p>接口url：/articles/view/{id}</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>文章id（路径参数）</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: {</span><br><span class="line">        <span class="attr">id</span>: <span class="string">"1405916999732707330"</span>, </span><br><span class="line">        <span class="attr">title</span>: <span class="string">"SpringBoot入门案例"</span>,</span><br><span class="line">        <span class="attr">summary</span>: <span class="string">"springboot入门案例"</span>,</span><br><span class="line">        <span class="attr">commentCounts</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-14-2-编码"><a href="#3-14-2-编码" class="headerlink" title="3.14.2 编码"></a>3.14.2 编码</h3><h4 id="①-ArticleBody和Catelogy实体类"><a href="#①-ArticleBody和Catelogy实体类" class="headerlink" title="① ArticleBody和Catelogy实体类"></a>① ArticleBody和Catelogy实体类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleBody</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String contentHtml;</span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-ArticleBodyVo、CatelogyVo和ArticleVo类"><a href="#②-ArticleBodyVo、CatelogyVo和ArticleVo类" class="headerlink" title="② ArticleBodyVo、CatelogyVo和ArticleVo类"></a>② ArticleBodyVo、CatelogyVo和ArticleVo类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleBodyVo</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryVo</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleVo</span> </span>{</span><br><span class="line">    <span class="comment">//添加以下两项</span></span><br><span class="line">    <span class="keyword">private</span> ArticleBodyVo body;</span><br><span class="line">    <span class="keyword">private</span> CategoryVo categoryVo;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-ArticleController控制类"><a href="#③-ArticleController控制类" class="headerlink" title="③ ArticleController控制类"></a>③ ArticleController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping("/view/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findArticleById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long articleId)</span></span>{</span><br><span class="line">        <span class="comment">//通过文章id找到对应文章</span></span><br><span class="line">        <span class="keyword">return</span> articleService.findArticleById(articleId);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-ArticleService服务类"><a href="#④-ArticleService服务类" class="headerlink" title="④ ArticleService服务类"></a>④ ArticleService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="comment">//添加以下方法，通过文章id找到对应文章</span></span><br><span class="line">    <span class="function">Result <span class="title">findArticleById</span><span class="params">(Long articleId)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-ArticleServiceImpl实现类"><a href="#⑤-ArticleServiceImpl实现类" class="headerlink" title="⑤ ArticleServiceImpl实现类"></a>⑤ ArticleServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleBodyMapper articleBodyMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findArticleById</span><span class="params">(Long articleId)</span> </span>{</span><br><span class="line">        Article article = articleMapper.selectById(articleId);</span><br><span class="line">        ArticleVo articleVo = copy(article, <span class="keyword">true</span>, <span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(articleVo);</span><br><span class="line">    }</span><br><span class="line">    ----------------------------------------------------------------------------------------</span><br><span class="line">    <span class="comment">//因为有的页面需要ArticleBody和Category数据，有的不需要，故进行重载</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ArticleVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Article&gt; records,<span class="keyword">boolean</span> isTag,<span class="keyword">boolean</span> isAuthor)</span> </span>{</span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Article record : records) {</span><br><span class="line">            articleVoList.add(copy(record,isTag,isAuthor,<span class="keyword">false</span>,<span class="keyword">false</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ArticleVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Article&gt; records,<span class="keyword">boolean</span> isTag,<span class="keyword">boolean</span> isAuthor,<span class="keyword">boolean</span> isArticleBody,<span class="keyword">boolean</span> isCategory)</span> </span>{</span><br><span class="line">        List&lt;ArticleVo&gt; articleVoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Article record : records) {</span><br><span class="line">            articleVoList.add(copy(record,isTag,isAuthor,isArticleBody,isCategory));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line">    -----------------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新增isArticleBody和isCategory</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArticleVo <span class="title">copy</span><span class="params">(Article article,<span class="keyword">boolean</span> isTag,<span class="keyword">boolean</span> isAuthor,<span class="keyword">boolean</span> isArticleBody,<span class="keyword">boolean</span> isCategory)</span></span>{</span><br><span class="line">        ArticleVo articleVo=<span class="keyword">new</span> ArticleVo();</span><br><span class="line">        BeanUtils.copyProperties(article,articleVo);</span><br><span class="line">        articleVo.setId(String.valueOf(article.getId()));</span><br><span class="line">        articleVo.setCreateDate(<span class="keyword">new</span> DateTime(article.getCreateDate()).toString(<span class="string">"yyyy-MM-dd HH:mm"</span>));</span><br><span class="line">        <span class="keyword">if</span>(isTag){</span><br><span class="line">            Long articleId = article.getId();</span><br><span class="line">            articleVo.setTags(tagService.findTagsByArticleId(articleId));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(isAuthor){</span><br><span class="line">            Long authorId = article.getAuthorId();</span><br><span class="line">            articleVo.setAuthor(sysUserService.findUserById(authorId).getNickname());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(isArticleBody){</span><br><span class="line">            Long bodyId = article.getBodyId();</span><br><span class="line">            <span class="comment">//调用ArticleService的findArticleBodyById方法</span></span><br><span class="line">            articleVo.setBody(findArticleBodyById(bodyId));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(isCategory){</span><br><span class="line">            Long categoryId = article.getCategoryId();</span><br><span class="line">            <span class="comment">//调用CategoryService的findCategoryById方法</span></span><br><span class="line">            articleVo.setCategoryVo(categoryService.findCategoryById(categoryId));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> articleVo;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过文章的bodyId找到其对应的ArticleBody</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArticleBodyVo <span class="title">findArticleBodyById</span><span class="params">(Long bodyId)</span> </span>{</span><br><span class="line">        ArticleBody articleBody=articleBodyMapper.selectById(bodyId);</span><br><span class="line">        ArticleBodyVo articleBodyVo=<span class="keyword">new</span> ArticleBodyVo();</span><br><span class="line">        articleBodyVo.setContent(articleBody.getContent());</span><br><span class="line">        <span class="keyword">return</span> articleBodyVo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-CategoryService服务类"><a href="#⑥-CategoryService服务类" class="headerlink" title="⑥ CategoryService服务类"></a>⑥ CategoryService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="comment">//通过文章的categoryId找到对应的category</span></span><br><span class="line">    <span class="function">CategoryVo <span class="title">findCategoryById</span><span class="params">(Long categoryId)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑦-CategoryServiceImpl实现类"><a href="#⑦-CategoryServiceImpl实现类" class="headerlink" title="⑦ CategoryServiceImpl实现类"></a>⑦ CategoryServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CategoryVo <span class="title">findCategoryById</span><span class="params">(Long categoryId)</span> </span>{</span><br><span class="line">        Category category = categoryMapper.selectById(categoryId);</span><br><span class="line">        CategoryVo categoryVo = <span class="keyword">new</span> CategoryVo();</span><br><span class="line">        BeanUtils.copyProperties(category,categoryVo);</span><br><span class="line">        categoryVo.setId(String.valueOf(category.getId()));</span><br><span class="line">        <span class="keyword">return</span> categoryVo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-14-3-测试结果"><a href="#3-14-3-测试结果" class="headerlink" title="3.14.3 测试结果"></a>3.14.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220123165746946.png" alt="image-20220123165746946"></p><p>测试成功！</p><h2 id="3-15-更新阅读次数"><a href="#3-15-更新阅读次数" class="headerlink" title="3.15 更新阅读次数"></a>3.15 更新阅读次数</h2><h3 id="3-15-1-功能说明"><a href="#3-15-1-功能说明" class="headerlink" title="3.15.1 功能说明"></a>3.15.1 功能说明</h3><ul><li>点击查看文章之后，本应该直接返回数据了，这时候做了一个更新阅读次数操作，更新时加写锁，阻塞其他的读操作，性能就会比较低（没办法解决，增加阅读数必然要加锁）</li><li>更新增加了此次接口的耗时（考虑减少耗时），重点是：<strong>如果一旦更新出问题，查看操作必然受影响</strong></li><li>故使用线程池线程池，把更新操作扔到线程池中去执行，这样就不会影响主线程了</li></ul><h3 id="3-15-2-编码"><a href="#3-15-2-编码" class="headerlink" title="3.15.2 编码"></a>3.15.2 编码</h3><h4 id="①-线程池配置类"><a href="#①-线程池配置类" class="headerlink" title="① 线程池配置类"></a>① 线程池配置类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启多线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("taskExecutor")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">asyncServiceExecutor</span><span class="params">()</span> </span>{</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 设置核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 设置最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//配置队列大小</span></span><br><span class="line">        executor.setQueueCapacity(Integer.MAX_VALUE);</span><br><span class="line">        <span class="comment">// 设置线程活跃时间（秒）</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// 设置默认线程名称</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"码神之路博客项目"</span>);</span><br><span class="line">        <span class="comment">// 等待所有任务结束后再关闭线程池</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//执行初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-线程服务类"><a href="#②-线程服务类" class="headerlink" title="② 线程服务类"></a>② 线程服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadService</span> </span>{</span><br><span class="line">    <span class="comment">//期望此操作在线程池执行不会影响原有主线程</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Async("taskExecutor")</span><span class="comment">//命名要和配置类中线程池的命名相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArticleViewCount</span><span class="params">(Article article)</span></span>{</span><br><span class="line">        Integer viewCounts=article.getViewCounts();<span class="comment">//获取阅读数</span></span><br><span class="line">        Article articleUpdate=<span class="keyword">new</span> Article();</span><br><span class="line">        articleUpdate.setViewCounts(viewCounts+<span class="number">1</span>);<span class="comment">//更新阅读数</span></span><br><span class="line">        LambdaUpdateWrapper&lt;Article&gt; updateWrapper=<span class="keyword">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Article::getId,article.getId());<span class="comment">//匹配对应文章</span></span><br><span class="line">        updateWrapper.eq(Article::getViewCounts,viewCounts);<span class="comment">//更新阅读数之前要检查有无其他线程更新过阅读数（乐观锁）</span></span><br><span class="line">        articleMapper.update(articleUpdate,updateWrapper);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-ArticleServiceImpl实现类-2"><a href="#③-ArticleServiceImpl实现类-2" class="headerlink" title="③ ArticleServiceImpl实现类"></a>③ ArticleServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadService threadService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再查看文章详情功能中加入ThreadService更新阅读数的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findArticleById</span><span class="params">(Long articleId)</span> </span>{</span><br><span class="line">        Article article = articleMapper.selectById(articleId);</span><br><span class="line">        ArticleVo articleVo = copy(article, <span class="keyword">true</span>, <span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">        threadService.updateArticleViewCount(article);</span><br><span class="line">        <span class="keyword">return</span> Result.success(articleVo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-15-3-测试结果"><a href="#3-15-3-测试结果" class="headerlink" title="3.15.3 测试结果"></a>3.15.3 测试结果</h3><p>能成功增加阅读数，但是不能实时更新，要手动刷新</p><h2 id="3-16-评论列表功能"><a href="#3-16-评论列表功能" class="headerlink" title="3.16 评论列表功能"></a>3.16 评论列表功能</h2><h3 id="3-16-1-接口说明"><a href="#3-16-1-接口说明" class="headerlink" title="3.16.1 接口说明"></a>3.16.1 接口说明</h3><ul><li><p>接口url：/comments/article/{id}</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>文章id（路径参数）</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">53</span>,</span><br><span class="line">            <span class="string">"author"</span>: {</span><br><span class="line">                <span class="string">"nickname"</span>: <span class="string">"李四"</span>,</span><br><span class="line">                <span class="string">"avatar"</span>: <span class="string">"http://localhost:8080/static/img/logo.b3a48c0.png"</span>,</span><br><span class="line">                <span class="string">"id"</span>: <span class="number">1</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"content"</span>: <span class="string">"写的好"</span>,</span><br><span class="line">            <span class="string">"childrens"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"id"</span>: <span class="number">54</span>,</span><br><span class="line">                    <span class="string">"author"</span>: {</span><br><span class="line">                        <span class="string">"nickname"</span>: <span class="string">"李四"</span>,</span><br><span class="line">                        <span class="string">"avatar"</span>: <span class="string">"http://localhost:8080/static/img/logo.b3a48c0.png"</span>,</span><br><span class="line">                        <span class="string">"id"</span>: <span class="number">1</span></span><br><span class="line">                    },</span><br><span class="line">                    <span class="string">"content"</span>: <span class="string">"111"</span>,</span><br><span class="line">                    <span class="string">"childrens"</span>: [],</span><br><span class="line">                    <span class="string">"createDate"</span>: <span class="string">"1973-11-26 08:52"</span>,</span><br><span class="line">                    <span class="string">"level"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">"toUser"</span>: {</span><br><span class="line">                        <span class="string">"nickname"</span>: <span class="string">"李四"</span>,</span><br><span class="line">                        <span class="string">"avatar"</span>: <span class="string">"http://localhost:8080/static/img/logo.b3a48c0.png"</span>,</span><br><span class="line">                        <span class="string">"id"</span>: <span class="number">1</span></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"createDate"</span>: <span class="string">"1973-11-27 09:53"</span>,</span><br><span class="line">            <span class="string">"level"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"toUser"</span>: <span class="literal">null</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-16-2-编码"><a href="#3-16-2-编码" class="headerlink" title="3.16.2 编码"></a>3.16.2 编码</h3><h4 id="①-Comment实体类"><a href="#①-Comment实体类" class="headerlink" title="① Comment实体类"></a>① Comment实体类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long authorId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long toUid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-CommentVo和UserVo类"><a href="#②-CommentVo和UserVo类" class="headerlink" title="② CommentVo和UserVo类"></a>② CommentVo和UserVo类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentVo</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserVo author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String createDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserVo toUser;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-CommentsController控制类"><a href="#③-CommentsController控制类" class="headerlink" title="③ CommentsController控制类"></a>③ CommentsController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/comments")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentsController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentsService commentsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/article/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">comments</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long articleId)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> commentsService.findCommentsByArticleId(articleId);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-CommentsMapper映射类"><a href="#④-CommentsMapper映射类" class="headerlink" title="④ CommentsMapper映射类"></a>④ CommentsMapper映射类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentsMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Comment</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-CommentsService服务类"><a href="#⑤-CommentsService服务类" class="headerlink" title="⑤ CommentsService服务类"></a>⑤ CommentsService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentsService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">findCommentsByArticleId</span><span class="params">(Long articleId)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑥-CommentsServiceImpl实现类"><a href="#⑥-CommentsServiceImpl实现类" class="headerlink" title="⑥ CommentsServiceImpl实现类"></a>⑥ CommentsServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentsServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommentsService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentsMapper commentsMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findCommentsByArticleId</span><span class="params">(Long articleId)</span> </span>{</span><br><span class="line">        <span class="comment">/*根据文章id，从 comment 表中查询评论列表</span></span><br><span class="line"><span class="comment">         * 根据文章id，找到作者id，然后去用户表里查询用户信息，返回userVo</span></span><br><span class="line"><span class="comment">         * 判断 如果 level = 1 要去查询它有没有子评论</span></span><br><span class="line"><span class="comment">         * 如果有子评论，查询表中哪些记录的parent_id==评论id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Comment::getArticleId,articleId);</span><br><span class="line">        queryWrapper.eq(Comment::getLevel,<span class="number">1</span>);<span class="comment">//先查询第一层的评论，再递归查询其子评论即可</span></span><br><span class="line">        List&lt;Comment&gt; commentList = commentsMapper.selectList(queryWrapper);</span><br><span class="line">        List&lt;CommentVo&gt; commentVoList=copyList(commentList);</span><br><span class="line">        <span class="keyword">return</span> Result.success(commentVoList);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Comment&gt; commentList)</span> </span>{</span><br><span class="line">        List&lt;CommentVo&gt; commentVoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Comment comment : commentList) {</span><br><span class="line">            commentVoList.add(copy(comment));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> commentVoList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CommentVo <span class="title">copy</span><span class="params">(Comment comment)</span> </span>{</span><br><span class="line">        CommentVo commentVo=<span class="keyword">new</span> CommentVo();</span><br><span class="line">        BeanUtils.copyProperties(comment,commentVo);</span><br><span class="line">        commentVo.setId(String.valueOf(comment.getId()));</span><br><span class="line">        Long authorId = comment.getAuthorId();</span><br><span class="line">        <span class="comment">//评论的作者</span></span><br><span class="line">        UserVo author=sysUserService.findUserVoById(authorId);<span class="comment">//通过id找到对应用户并返回一个UserVo对象</span></span><br><span class="line">        commentVo.setAuthor(author);</span><br><span class="line">        <span class="comment">//子评论</span></span><br><span class="line">        Integer level = comment.getLevel();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>==level){</span><br><span class="line">            Long id = comment.getId();</span><br><span class="line">            List&lt;CommentVo&gt; commentVoList=findCommentsByParentId(id);</span><br><span class="line">            commentVo.setChildren(commentVoList);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//给谁评论 to user</span></span><br><span class="line">        <span class="keyword">if</span>(level&gt;<span class="number">1</span>){</span><br><span class="line">            Long toUid = comment.getToUid();</span><br><span class="line">            UserVo toUserVo=sysUserService.findUserVoById(toUid);</span><br><span class="line">            commentVo.setToUser(toUserVo);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> commentVo;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过ParentId找到对应的评论</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title">findCommentsByParentId</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.eq(Comment::getParentId,id);<span class="comment">//传进来的评论id和遍历的评论的parentId要一样</span></span><br><span class="line">        queryWrapper.eq(Comment::getLevel,<span class="number">2</span>);</span><br><span class="line">        List&lt;Comment&gt; comments = commentsMapper.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> copyList(comments);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑦-SysUserService服务类"><a href="#⑦-SysUserService服务类" class="headerlink" title="⑦ SysUserService服务类"></a>⑦ SysUserService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="function">UserVo <span class="title">findUserVoById</span><span class="params">(Long authorId)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑧-SysUserServiceImpl实现类"><a href="#⑧-SysUserServiceImpl实现类" class="headerlink" title="⑧ SysUserServiceImpl实现类"></a>⑧ SysUserServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">findUserVoById</span><span class="params">(Long authorId)</span> </span>{</span><br><span class="line">        UserVo userVo=<span class="keyword">new</span> UserVo();</span><br><span class="line">        SysUser sysUser = sysUserMapper.selectById(authorId);</span><br><span class="line">        <span class="keyword">if</span>(sysUser==<span class="keyword">null</span>){</span><br><span class="line">            sysUser.setId(<span class="number">1L</span>);</span><br><span class="line">            sysUser.setAvatar(<span class="string">"/static/img/logo.b3a48c0.png"</span>);</span><br><span class="line">            sysUser.setNickname(<span class="string">"xlx"</span>);</span><br><span class="line">        }</span><br><span class="line">        BeanUtils.copyProperties(sysUser,userVo);</span><br><span class="line">        <span class="keyword">return</span> userVo;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-16-3-测试结果"><a href="#3-16-3-测试结果" class="headerlink" title="3.16.3 测试结果"></a>3.16.3 测试结果</h3><p>一层评论显示正常，二层评论无法显示，没有报错，日志显示能从数据库查询到信息，估计是前端问题</p><h2 id="3-17-评论功能"><a href="#3-17-评论功能" class="headerlink" title="3.17 评论功能"></a>3.17 评论功能</h2><h3 id="3-17-1-接口说明"><a href="#3-17-1-接口说明" class="headerlink" title="3.17.1 接口说明"></a>3.17.1 接口说明</h3><ul><li><p>接口url：/comments/create/change</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><p>参数名称    参数类型    说明</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>articleId</td><td>long</td><td>文章id</td></tr><tr><td>content</td><td>string</td><td>评论内容</td></tr><tr><td>parent</td><td>long</td><td>父评论id</td></tr><tr><td>toUserId</td><td>long</td><td>被评论的用户id</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="literal">null</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-17-2-编码"><a href="#3-17-2-编码" class="headerlink" title="3.17.2 编码"></a>3.17.2 编码</h3><h4 id="①-CommentParam参数类"><a href="#①-CommentParam参数类" class="headerlink" title="① CommentParam参数类"></a>① CommentParam参数类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentParam</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long toUserId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-CommentsController控制类"><a href="#②-CommentsController控制类" class="headerlink" title="② CommentsController控制类"></a>② CommentsController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/comments")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentsController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentsService commentsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("create/change")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">comment</span><span class="params">(<span class="meta">@RequestBody</span> CommentParam commentParam)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> commentsService.comment(commentParam);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-CommentsService服务类"><a href="#③-CommentsService服务类" class="headerlink" title="③ CommentsService服务类"></a>③ CommentsService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentsService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">comment</span><span class="params">(CommentParam commentParam)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-CommentsServiceImpl实现类"><a href="#④-CommentsServiceImpl实现类" class="headerlink" title="④ CommentsServiceImpl实现类"></a>④ CommentsServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentsServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommentsService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentsMapper commentsMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">comment</span><span class="params">(CommentParam commentParam)</span> </span>{</span><br><span class="line">        <span class="comment">//拿到当前用户</span></span><br><span class="line">        SysUser sysUser = UserThreadLocal.get();</span><br><span class="line">        Comment comment = <span class="keyword">new</span> Comment();</span><br><span class="line">        <span class="comment">//初始化评论</span></span><br><span class="line">        comment.setArticleId(commentParam.getArticleId());</span><br><span class="line">        comment.setAuthorId(sysUser.getId());</span><br><span class="line">        comment.setContent(commentParam.getContent());</span><br><span class="line">        comment.setCreateDate(System.currentTimeMillis());</span><br><span class="line">        Long parent = commentParam.getParent();</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span> || parent == <span class="number">0</span>) {<span class="comment">//判断是否有父评论</span></span><br><span class="line">            comment.setLevel(<span class="number">1</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            comment.setLevel(<span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果是空，parent设为0</span></span><br><span class="line">        comment.setParentId(parent == <span class="keyword">null</span> ? <span class="number">0</span> : parent);</span><br><span class="line">        Long toUserId = commentParam.getToUserId();</span><br><span class="line">        comment.setToUid(toUserId == <span class="keyword">null</span> ? <span class="number">0</span> : toUserId);</span><br><span class="line">        <span class="keyword">this</span>.commentsMapper.insert(comment);</span><br><span class="line">        <span class="comment">//拿到当前评论的文章，将评论数进行更新，并更新数据库中的值</span></span><br><span class="line">        Article article = articleMapper.selectById(commentParam.getArticleId());</span><br><span class="line">        article.setCommentCounts(article.getCommentCounts()+<span class="number">1</span>);</span><br><span class="line">        articleMapper.updateById(article);</span><br><span class="line">        <span class="keyword">return</span> Result.success(comment);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-17-3-设置登陆拦截"><a href="#3-17-3-设置登陆拦截" class="headerlink" title="3.17.3 设置登陆拦截"></a>3.17.3 设置登陆拦截</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/comments/create/change"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-18-文章类别功能"><a href="#3-18-文章类别功能" class="headerlink" title="3.18 文章类别功能"></a>3.18 文章类别功能</h2><h3 id="3-18-1-接口说明"><a href="#3-18-1-接口说明" class="headerlink" title="3.18.1 接口说明"></a>3.18.1 接口说明</h3><ul><li><p>接口url：/categorys</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：无</p></li></ul><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>:<span class="literal">true</span>,</span><br><span class="line"> <span class="string">"code"</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>:<span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>:</span><br><span class="line">    [</span><br><span class="line">        {<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"avatar"</span>:<span class="string">"/category/front.png"</span>,<span class="string">"categoryName"</span>:<span class="string">"前端"</span>},</span><br><span class="line">        {<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"avatar"</span>:<span class="string">"/category/back.png"</span>,<span class="string">"categoryName"</span>:<span class="string">"后端"</span>},</span><br><span class="line">        {<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"avatar"</span>:<span class="string">"/category/lift.jpg"</span>,<span class="string">"categoryName"</span>:<span class="string">"生活"</span>},</span><br><span class="line">        {<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"avatar"</span>:<span class="string">"/category/database.png"</span>,<span class="string">"categoryName"</span>:<span class="string">"数据库"</span>},</span><br><span class="line">        {<span class="string">"id"</span>:<span class="number">5</span>,<span class="string">"avatar"</span>:<span class="string">"/category/language.png"</span>,<span class="string">"categoryName"</span>:<span class="string">"编程语言"</span>}</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-18-2-编码"><a href="#3-18-2-编码" class="headerlink" title="3.18.2 编码"></a>3.18.2 编码</h3><h4 id="①-CategoryController控制类"><a href="#①-CategoryController控制类" class="headerlink" title="① CategoryController控制类"></a>① CategoryController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/categorys")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到所有的类别并返回</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">categories</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> categoryService.findAllCategory();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-CategoryService服务类"><a href="#②-CategoryService服务类" class="headerlink" title="② CategoryService服务类"></a>② CategoryService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">findAllCategory</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-CategoryServiceImpl实现类"><a href="#③-CategoryServiceImpl实现类" class="headerlink" title="③ CategoryServiceImpl实现类"></a>③ CategoryServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAllCategory</span><span class="params">()</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.select(Category::getId,Category::getCategoryName);</span><br><span class="line">        List&lt;Category&gt; categories = categoryMapper.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(copyList(categories));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CategoryVo <span class="title">copy</span><span class="params">(Category category)</span></span>{</span><br><span class="line">        CategoryVo categoryVo = <span class="keyword">new</span> CategoryVo();</span><br><span class="line">        BeanUtils.copyProperties(category,categoryVo);</span><br><span class="line">        categoryVo.setId(String.valueOf(category.getId()));</span><br><span class="line">        <span class="keyword">return</span> categoryVo;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CategoryVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Category&gt; categoryList)</span></span>{</span><br><span class="line">        List&lt;CategoryVo&gt; categoryVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Category category : categoryList) {</span><br><span class="line">            categoryVoList.add(copy(category));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> categoryVoList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-18-3-测试结果"><a href="#3-18-3-测试结果" class="headerlink" title="3.18.3 测试结果"></a>3.18.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220125154204532.png" alt="image-20220125154204532"></p><p>能正常显示分类</p><h2 id="3-19-文章标签功能"><a href="#3-19-文章标签功能" class="headerlink" title="3.19 文章标签功能"></a>3.19 文章标签功能</h2><h3 id="3-19-1-接口说明"><a href="#3-19-1-接口说明" class="headerlink" title="3.19.1 接口说明"></a>3.19.1 接口说明</h3><ul><li><p>接口url：/tags</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：无</p></li><li><p>返回数据：</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"springboot"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"spring"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"springmvc"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"11"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-19-2-编码"><a href="#3-19-2-编码" class="headerlink" title="3.19.2 编码"></a>3.19.2 编码</h3><h4 id="①-TagsController控制类"><a href="#①-TagsController控制类" class="headerlink" title="① TagsController控制类"></a>① TagsController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("tags")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagsController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到所有标签并返回</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAllTag</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> tagService.findAllTag();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-TagService服务类-1"><a href="#②-TagService服务类-1" class="headerlink" title="② TagService服务类"></a>② TagService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">findAllTag</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-TagServiceImpl实现类-1"><a href="#③-TagServiceImpl实现类-1" class="headerlink" title="③ TagServiceImpl实现类"></a>③ TagServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagServiceImpl</span> <span class="keyword">implements</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagMapper tagMapper;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAllTag</span><span class="params">()</span> </span>{</span><br><span class="line">        LambdaQueryWrapper&lt;Tag&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.select(Tag::getId,Tag::getTagName);</span><br><span class="line">        List&lt;Tag&gt; tags = tagMapper.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.success(copyList(tags));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TagVo&gt; <span class="title">copyList</span><span class="params">(List&lt;Tag&gt; tags)</span> </span>{</span><br><span class="line">        List&lt;TagVo&gt; tagVoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Tag tag : tags) {</span><br><span class="line">            tagVoList.add(copy(tag));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tagVoList;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TagVo <span class="title">copy</span><span class="params">(Tag tag)</span></span>{</span><br><span class="line">        TagVo tagVo=<span class="keyword">new</span> TagVo();</span><br><span class="line">        BeanUtils.copyProperties(tag,tagVo);</span><br><span class="line">        tagVo.setId(String.valueOf(tag.getId()));</span><br><span class="line">        <span class="keyword">return</span> tagVo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-19-3-测试结果"><a href="#3-19-3-测试结果" class="headerlink" title="3.19.3 测试结果"></a>3.19.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220125154542434.png" alt="image-20220125154542434"></p><p>能正常显示所有标签</p><h2 id="3-20-文章发布功能"><a href="#3-20-文章发布功能" class="headerlink" title="3.20 文章发布功能"></a>3.20 文章发布功能</h2><h3 id="3-20-1-接口说明"><a href="#3-20-1-接口说明" class="headerlink" title="3.20.1 接口说明"></a>3.20.1 接口说明</h3><ul><li><p>接口url：/articles/publish</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>string</td><td>文章标题</td></tr><tr><td>id</td><td>long</td><td>文章id</td></tr><tr><td>body</td><td>object（{content: “xx”, contentHtml: “xx”}）</td><td>文章内容</td></tr><tr><td>category</td><td>{id: 2, avatar: “/category/back.png”, categoryName: “后端”}</td><td>文章类别</td></tr><tr><td>summary</td><td>string</td><td>文章概述</td></tr><tr><td>tags</td><td>[{id: 5}, {id: 6}]</td><td>文章标签</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>: {<span class="string">"id"</span>:xxxxx}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-20-2-编码"><a href="#3-20-2-编码" class="headerlink" title="3.20.2 编码"></a>3.20.2 编码</h3><h4 id="①-ArticleParam、ArticleBodyParam、ArticleBody和ArticleTag类"><a href="#①-ArticleParam、ArticleBodyParam、ArticleBody和ArticleTag类" class="headerlink" title="① ArticleParam、ArticleBodyParam、ArticleBody和ArticleTag类"></a>① ArticleParam、ArticleBodyParam、ArticleBody和ArticleTag类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleParam</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> ArticleBodyParam body;</span><br><span class="line">    <span class="keyword">private</span> CategoryVo category;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TagVo&gt; tags;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleBodyParam</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String contentHtml;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleBody</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String contentHtml;</span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleTag</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="keyword">private</span> Long tagId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-ArticleController控制类-1"><a href="#②-ArticleController控制类-1" class="headerlink" title="② ArticleController控制类"></a>② ArticleController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping("/publish")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">publish</span><span class="params">(<span class="meta">@RequestBody</span> ArticleParam articleParam)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> articleService.publish(articleParam);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-ArticleBodyMapper和ArticleTagMapper映射类"><a href="#③-ArticleBodyMapper和ArticleTagMapper映射类" class="headerlink" title="③ ArticleBodyMapper和ArticleTagMapper映射类"></a>③ ArticleBodyMapper和ArticleTagMapper映射类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleBodyMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">ArticleBody</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleTagMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">ArticleTag</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-服务类"><a href="#④-服务类" class="headerlink" title="④ 服务类"></a>④ 服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">publish</span><span class="params">(ArticleParam articleParam)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-实现类"><a href="#⑤-实现类" class="headerlink" title="⑤ 实现类"></a>⑤ 实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleBodyMapper articleBodyMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadService threadService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleTagMapper articleTagMapper;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">publish</span><span class="params">(ArticleParam articleParam)</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 发布文章 目的 构建Article对象</span></span><br><span class="line"><span class="comment">         * 2. 作者id  当前的登录用户</span></span><br><span class="line"><span class="comment">         * 3. 标签  要将标签加入到 关联列表当中</span></span><br><span class="line"><span class="comment">         * 4. body 内容存储 article bodyId</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Article article=<span class="keyword">new</span> Article();</span><br><span class="line">        <span class="comment">//拿到当前发布文章的用户，以获取用户id</span></span><br><span class="line">        SysUser sysUser = UserThreadLocal.get();</span><br><span class="line">        <span class="comment">//给article设置初始值，才能插入到数据库中，生成articleId</span></span><br><span class="line">        article.setAuthorId(sysUser.getId());</span><br><span class="line">        article.setTitle(articleParam.getTitle());</span><br><span class="line">        article.setSummary(articleParam.getSummary());</span><br><span class="line">        article.setViewCounts(<span class="number">0</span>);</span><br><span class="line">        article.setCommentCounts(<span class="number">0</span>);</span><br><span class="line">        article.setWeight(Article.Article_Common);</span><br><span class="line">        article.setCreateDate(System.currentTimeMillis());</span><br><span class="line">        article.setCategoryId(Long.parseLong(articleParam.getCategory().getId()));</span><br><span class="line">        article.setBodyId(-<span class="number">1L</span>);</span><br><span class="line">        <span class="comment">//插入之后 会生成一个文章id（因为新建的文章没有文章id所以要insert一下）</span></span><br><span class="line">        articleMapper.insert(article);</span><br><span class="line">        <span class="comment">//文章标签，从articleParam里拿，但是数据是存储在article_tag表里的</span></span><br><span class="line">        List&lt;TagVo&gt; tags = articleParam.getTags();</span><br><span class="line">        <span class="keyword">if</span>(tags!=<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">for</span> (TagVo tag : tags) {</span><br><span class="line">                ArticleTag articleTag=<span class="keyword">new</span> ArticleTag();</span><br><span class="line">                articleTag.setArticleId(article.getId());</span><br><span class="line">                articleTag.setTagId(Long.parseLong(tag.getId()));</span><br><span class="line">                articleTagMapper.insert(articleTag);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//文章主体，从articleParam里拿但是数据是存储在article_body表里的</span></span><br><span class="line">        ArticleBody articleBody=<span class="keyword">new</span> ArticleBody();</span><br><span class="line">        articleBody.setArticleId(article.getId());</span><br><span class="line">        articleBody.setContent(articleParam.getBody().getContent());</span><br><span class="line">        articleBody.setContentHtml(articleParam.getBody().getContentHtml());</span><br><span class="line">        articleBody.setArticleId(article.getId());</span><br><span class="line">        articleBodyMapper.insert(articleBody);</span><br><span class="line">        article.setBodyId(articleBody.getId());</span><br><span class="line">        <span class="comment">//将添加了BodyId的文章在数据库中进行更新</span></span><br><span class="line">        articleMapper.updateById(article);</span><br><span class="line">        <span class="comment">//由接口说明可知需要返回一个ArticleVo对象的id值</span></span><br><span class="line">        ArticleVo articleVo = <span class="keyword">new</span> ArticleVo();</span><br><span class="line">        articleVo.setId(String.valueOf(article.getId()));</span><br><span class="line">        <span class="keyword">return</span> Result.success(articleVo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-20-3-测试结果"><a href="#3-20-3-测试结果" class="headerlink" title="3.20.3 测试结果"></a>3.20.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220125160251226.png" alt="image-20220125160251226"></p><p>文章发布成功</p><h2 id="3-21-文章图片上传"><a href="#3-21-文章图片上传" class="headerlink" title="3.21 文章图片上传"></a>3.21 文章图片上传</h2><h3 id="3-21-1-接口说明"><a href="#3-21-1-接口说明" class="headerlink" title="3.21.1 接口说明"></a>3.21.1 接口说明</h3><ul><li><p>接口url：/upload</p></li><li><p>请求方式：POST</p></li><li><p>请求参数：</p></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>file</td><td>上传的文件名称</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>:<span class="literal">true</span>,</span><br><span class="line"> <span class="string">"code"</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="string">"msg"</span>:<span class="string">"success"</span>,</span><br><span class="line">    <span class="string">"data"</span>:<span class="string">"https://static.mszlu.com/aa.png"</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="3-21-2-云服务器"><a href="#3-21-2-云服务器" class="headerlink" title="3.21.2 云服务器"></a>3.21.2 云服务器</h3><h4 id="为什么要用云服务器"><a href="#为什么要用云服务器" class="headerlink" title="为什么要用云服务器"></a>为什么要用云服务器</h4><ul><li>一般像图片、视频这种比较大的资源最好不要放在本地的应用服务器里，因为如果你的应用服务器带宽是1MB/s，一张图片是100k的话，只要同时有10个人访问你的图片，那么第十一个人就会被卡死</li><li>但是如果我们把图片上传到云服务器上，用户访问文字时在应用服务器里，访问图片时去云服务器，这样就算很多人同时访问，最多也就是图片加载慢一点，并不会影响网站的正常访问</li></ul><h3 id="3-21-3-编码"><a href="#3-21-3-编码" class="headerlink" title="3.21.3 编码"></a>3.21.3 编码</h3><h4 id="①-注册账号"><a href="#①-注册账号" class="headerlink" title="① 注册账号"></a>① 注册账号</h4><p>该项目使用的云服务器为<strong>七牛云</strong>，去七牛云官网注册账号</p><h4 id="②-新建空间"><a href="#②-新建空间" class="headerlink" title="② 新建空间"></a>② 新建空间</h4><p>在个人空间管理中新建一个服务器空间</p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220125162247529.png" alt="image-20220125162247529"></p><h4 id="③-引入依赖"><a href="#③-引入依赖" class="headerlink" title="③ 引入依赖"></a>③ 引入依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.7.0, 7.7.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="④-yml配置类"><a href="#④-yml配置类" class="headerlink" title="④ yml配置类"></a>④ yml配置类</h4><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置密钥，要去个人中心的密钥管理中获取</span></span><br><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">mbX_tr-DPk-qxs6t5DmjDViztrlw9tKDpTGn9jq8</span></span><br><span class="line">  <span class="attr">accessSecretKey:</span> <span class="string">Xm4k8XLQSGgFx1DaIvm2XQ804z0ucCH3pX6C-U-W</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置上传文件总的最大值为20MB以及单个文件的最大值为2MB</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">20MB</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">2MB</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220125163414556.png" alt="image-20220125163414556"></p><h4 id="⑤-QiniuUtils工具类"><a href="#⑤-QiniuUtils工具类" class="headerlink" title="⑤ QiniuUtils工具类"></a>⑤ QiniuUtils工具类</h4><ul><li>该工具类七牛云官网有提供，直接复制，然后改改参数即可</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个url是最终存储在云服务器上文件的访问地址前缀，每个人都不一样</span></span><br><span class="line">    <span class="comment">//随便上传一个文件，然后去服务器的空间里面的文件管理，查看文件的访问地址即可获得</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> String url = <span class="string">"http://r695duold.hn-bkt.clouddn.com/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改以下两个值放到yml中，在密钥管理中获取</span></span><br><span class="line">    <span class="meta">@Value("${qiniu.accessKey}")</span></span><br><span class="line">    <span class="keyword">private</span>  String accessKey;</span><br><span class="line">    <span class="meta">@Value("${qiniu.accessSecretKey}")</span></span><br><span class="line">    <span class="keyword">private</span>  String accessSecretKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(MultipartFile file,String fileName)</span></span>{</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        <span class="comment">//在官网创建空间时会让你指定所在区域，我选的是华南，故这里用Region.huanan()</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.huanan());</span><br><span class="line">        <span class="comment">//...其他参数参考类注释</span></span><br><span class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line">        <span class="comment">//...生成上传凭证，然后准备上传，修改上传名称为自己创立空间的空间名称（是你自己的）</span></span><br><span class="line">        String bucket = <span class="string">"ch1998"</span>;</span><br><span class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">byte</span>[] uploadBytes = file.getBytes();</span><br><span class="line">            Auth auth = Auth.create(accessKey, accessSecretKey);</span><br><span class="line">            String upToken = auth.uploadToken(bucket);</span><br><span class="line">                Response response = uploadManager.put(uploadBytes, fileName, upToken);</span><br><span class="line">                <span class="comment">//解析上传成功的结果</span></span><br><span class="line">                DefaultPutRet putRet = JSON.parseObject(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            } <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>查看url：</li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220125163607780.png" alt="image-20220125163607780"></p><h4 id="⑤-UploadController控制类"><a href="#⑤-UploadController控制类" class="headerlink" title="⑤ UploadController控制类"></a>⑤ UploadController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("upload")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QiniuUtils qiniuUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam("image")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        <span class="comment">//传进来的文件名称 比如说xx.jpg</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//将原始的文件名称进行转化，使之唯一化</span></span><br><span class="line">        <span class="comment">//randomUUID随机生成一个UID，然后拼接上原来文件的后缀名</span></span><br><span class="line">        <span class="comment">//substringAfterLast作用是，取originalFilename中"."后面的字符串并返回，也就是文件后缀名</span></span><br><span class="line">        String fileName = UUID.randomUUID().toString() + <span class="string">"."</span> + StringUtils.substringAfterLast(originalFilename, <span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> upload = qiniuUtils.upload(file, fileName);</span><br><span class="line">        <span class="keyword">if</span> (upload) {</span><br><span class="line">            <span class="comment">//返回最终生成的文件访问地址</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(QiniuUtils.url + fileName);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="number">20001</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-22-导航—文章分类功能"><a href="#3-22-导航—文章分类功能" class="headerlink" title="3.22 导航—文章分类功能"></a>3.22 导航—文章分类功能</h2><h3 id="3-22-1-接口说明"><a href="#3-22-1-接口说明" class="headerlink" title="3.22.1 接口说明"></a>3.22.1 接口说明</h3><ul><li><p>接口url：/categorys/detail</p></li><li><p>请求方式：GET</p></li><li><p>请求参数：</p></li><li><p>返回数据：</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>, </span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/category/front.png"</span>, </span><br><span class="line">            <span class="string">"categoryName"</span>: <span class="string">"前端"</span>, </span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"前端是什么，大前端"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/category/back.png"</span>, </span><br><span class="line">            <span class="string">"categoryName"</span>: <span class="string">"后端"</span>, </span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"后端最牛叉"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">3</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/category/lift.jpg"</span>, </span><br><span class="line">            <span class="string">"categoryName"</span>: <span class="string">"生活"</span>, </span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"生活趣事"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">4</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/category/database.png"</span>, </span><br><span class="line">            <span class="string">"categoryName"</span>: <span class="string">"数据库"</span>, </span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"没数据库，啥也不管用"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">5</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/category/language.png"</span>, </span><br><span class="line">            <span class="string">"categoryName"</span>: <span class="string">"编程语言"</span>, </span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"好多语言，该学哪个？"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-22-2-编码"><a href="#3-22-2-编码" class="headerlink" title="3.22.2 编码"></a>3.22.2 编码</h3><h4 id="①-CategoryController控制类-1"><a href="#①-CategoryController控制类-1" class="headerlink" title="① CategoryController控制类"></a>① CategoryController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/categorys")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/detail")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">categoriesDetail</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> categoryService.findAllCategoryDetail();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-CategoryService服务类-1"><a href="#②-CategoryService服务类-1" class="headerlink" title="② CategoryService服务类"></a>② CategoryService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function">Result <span class="title">findAllCategoryDetail</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-CategoryServiceImpl实现类-1"><a href="#③-CategoryServiceImpl实现类-1" class="headerlink" title="③ CategoryServiceImpl实现类"></a>③ CategoryServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAllCategoryDetail</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;Category&gt; categories = categoryMapper.selectList(<span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> Result.success(copyList(categories));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-22-3-测试结果"><a href="#3-22-3-测试结果" class="headerlink" title="3.22.3 测试结果"></a>3.22.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220126145554083.png" alt="image-20220126145554083"></p><p>可以正常显示所有分类</p><h2 id="3-23-导航—文章标签功能"><a href="#3-23-导航—文章标签功能" class="headerlink" title="3.23 导航—文章标签功能"></a>3.23 导航—文章标签功能</h2><h3 id="3-23-1-接口说明"><a href="#3-23-1-接口说明" class="headerlink" title="3.23.1 接口说明"></a>3.23.1 接口说明</h3><ul><li>接口url：/tags/detail</li><li>请求方式：GET</li><li>请求参数：</li><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>, </span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">5</span>, </span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"springboot"</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/tag/java.png"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">6</span>, </span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"spring"</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/tag/java.png"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">7</span>, </span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"springmvc"</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/tag/java.png"</span></span><br><span class="line">        }, </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">8</span>, </span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"11"</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/tag/css.png"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-23-2-编码"><a href="#3-23-2-编码" class="headerlink" title="3.23.2 编码"></a>3.23.2 编码</h3><h4 id="①-TagsController控制类-1"><a href="#①-TagsController控制类-1" class="headerlink" title="① TagsController控制类"></a>① TagsController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("tags")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagsController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/detail")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAllTagDetail</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> tagService.findAllTagDetail();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-TagService服务类-2"><a href="#②-TagService服务类-2" class="headerlink" title="② TagService服务类"></a>② TagService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">findAllTagDetail</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-TagServiceImpl实现类-2"><a href="#③-TagServiceImpl实现类-2" class="headerlink" title="③ TagServiceImpl实现类"></a>③ TagServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagServiceImpl</span> <span class="keyword">implements</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagMapper tagMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAllTagDetail</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;Tag&gt; tags = tagMapper.selectList(<span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> Result.success(copyList(tags));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-23-3-测试结果"><a href="#3-23-3-测试结果" class="headerlink" title="3.23.3 测试结果"></a>3.23.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220126145848483.png" alt="image-20220126145848483"></p><p>可以正常显示所有标签</p><h2 id="3-24-分类文章列表以及标签文章列表功能"><a href="#3-24-分类文章列表以及标签文章列表功能" class="headerlink" title="3.24 分类文章列表以及标签文章列表功能"></a>3.24 分类文章列表以及标签文章列表功能</h2><h3 id="3-24-1-接口说明"><a href="#3-24-1-接口说明" class="headerlink" title="3.24.1 接口说明"></a>3.24.1 接口说明</h3><h4 id="①-分类文章列表"><a href="#①-分类文章列表" class="headerlink" title="① 分类文章列表"></a>① 分类文章列表</h4><ul><li>接口url：/category/detail/{id}</li><li>请求方式：GET</li><li>请求参数：</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>分类id</td><td>路径参数</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>, </span><br><span class="line">    <span class="string">"data"</span>: </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/category/front.png"</span>, </span><br><span class="line">            <span class="string">"categoryName"</span>: <span class="string">"前端"</span>, </span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"前端是什么，大前端"</span></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-标签文章列表"><a href="#②-标签文章列表" class="headerlink" title="② 标签文章列表"></a>② 标签文章列表</h4><ul><li>接口url：/tags/detail/{id}</li><li>请求方式：GET</li><li>请求参数：</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>标签id</td><td>路径参数</td></tr></tbody></table><ul><li>返回数据：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"code"</span>: <span class="number">200</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"success"</span>, </span><br><span class="line">    <span class="string">"data"</span>: </span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">5</span>, </span><br><span class="line">            <span class="string">"tagName"</span>: <span class="string">"springboot"</span>, </span><br><span class="line">            <span class="string">"avatar"</span>: <span class="string">"/static/tag/java.png"</span></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-24-2-编码"><a href="#3-24-2-编码" class="headerlink" title="3.24.2 编码"></a>3.24.2 编码</h3><h4 id="①-PageParam参数类"><a href="#①-PageParam参数类" class="headerlink" title="① PageParam参数类"></a>① PageParam参数类</h4><ul><li>当点击某一分类时，本质上是调用了显示文章列表的接口，但是只会显示所有文章，不能根据分类来显示，故需要在分页参数中加入categoryId这一属性，然后在接收参数时判断categoryId是否为空，若不为空，则在显示文章列表时，要过滤掉那些分类id不等于categoryId的文章</li><li>同理，要根据标签分类，就要加入tagId属性，要根据日期分类，就要加入year和month属性</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageParam</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> page=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="keyword">private</span> Long tagId;</span><br><span class="line">    <span class="keyword">private</span> String year;</span><br><span class="line">    <span class="keyword">private</span> String month;</span><br><span class="line">    <span class="comment">//传递6的话变成06</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMonth</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.month != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.month.length() == <span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>+<span class="keyword">this</span>.month;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.month;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-CategoryController和TagsController控制类"><a href="#②-CategoryController和TagsController控制类" class="headerlink" title="② CategoryController和TagsController控制类"></a>② CategoryController和TagsController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/categorys")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/detail/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">categoryDetailById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> categoryService.categoryDetailById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("tags")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagsController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/detail/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findTagDetailById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> tagService.findTagDetailById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-CategoryService和TagService服务类"><a href="#③-CategoryService和TagService服务类" class="headerlink" title="③ CategoryService和TagService服务类"></a>③ CategoryService和TagService服务类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">categoryDetailById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="function">Result <span class="title">findTagDetailById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="④-CategoryServiceImpl和TagServiceImpl实现类"><a href="#④-CategoryServiceImpl和TagServiceImpl实现类" class="headerlink" title="④ CategoryServiceImpl和TagServiceImpl实现类"></a>④ CategoryServiceImpl和TagServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">categoryDetailById</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        Category category=categoryMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(copy(category));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagServiceImpl</span> <span class="keyword">implements</span> <span class="title">TagService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagMapper tagMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findTagDetailById</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        Tag tag=tagMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(copy(tag));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="⑤-ArticleServiceImpl实现类-1"><a href="#⑤-ArticleServiceImpl实现类-1" class="headerlink" title="⑤ ArticleServiceImpl实现类"></a>⑤ ArticleServiceImpl实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ArticleVo&gt; <span class="title">listArticle</span><span class="params">(PageParam pageParam)</span> </span>{</span><br><span class="line">        Page&lt;Article&gt; page=<span class="keyword">new</span> Page&lt;&gt;(pageParam.getPage(),pageParam.getPageSize());</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper=<span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//第一项是根据是否置顶排序，第二项是根据创建时间排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getWeight,Article::getCreateDate);</span><br><span class="line">        <span class="keyword">if</span>(pageParam.getCategoryId()!=<span class="keyword">null</span>){<span class="comment">//若CategoryId不为空</span></span><br><span class="line">            <span class="comment">//只显示CategoryId与接收到的pageParam.getCategoryId()相同的文章</span></span><br><span class="line">            queryWrapper.eq(Article::getCategoryId,pageParam.getCategoryId());</span><br><span class="line">        }</span><br><span class="line">        List&lt;Long&gt; articleIdList =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pageParam.getTagId()!=<span class="keyword">null</span>){<span class="comment">//若TagId不为空</span></span><br><span class="line">            LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper=<span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">            articleTagLambdaQueryWrapper.eq(ArticleTag::getTagId, pageParam.getTagId());</span><br><span class="line">            <span class="comment">//从article_tag表中获取与接收到的tagId相同的记录</span></span><br><span class="line">            List&lt;ArticleTag&gt; articleTags = articleTagMapper.selectList(articleTagLambdaQueryWrapper);</span><br><span class="line">            <span class="keyword">for</span> (ArticleTag articleTag : articleTags) {</span><br><span class="line">                <span class="comment">//将获取到的记录的articleId添加到articleIdList中</span></span><br><span class="line">                articleIdList.add(articleTag.getArticleId());</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//若articleIdList不为0，也就是有记录，到article表中根据id查询对应文章</span></span><br><span class="line">            <span class="keyword">if</span> (articleTags.size() &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// and id in(1,2,3)</span></span><br><span class="line">                queryWrapper.in(Article::getId,articleIdList);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        Page&lt;Article&gt; articlePage = articleMapper.selectPage(page, queryWrapper);</span><br><span class="line">        List&lt;Article&gt; records = articlePage.getRecords();</span><br><span class="line">        List&lt;ArticleVo&gt;  articleVoList= copyList(records,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> articleVoList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-24-3-测试结果"><a href="#3-24-3-测试结果" class="headerlink" title="3.24.3 测试结果"></a>3.24.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220126150314982.png" alt="image-20220126150314982"></p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220126152445290.png" alt="image-20220126152445290"></p><p>可以正常显示某个分类或标签对应的文章列表</p><h2 id="3-25-归档文章列表"><a href="#3-25-归档文章列表" class="headerlink" title="3.25 归档文章列表"></a>3.25 归档文章列表</h2><p>实现出来有bug，能够成功从数据库查到文章数据，并且也返回给前端了，但是前端不显示任何文章，怀疑是前端问题，目前解决不了，暂不完成</p><h2 id="3-26-统一缓存处理（优化）"><a href="#3-26-统一缓存处理（优化）" class="headerlink" title="3.26 统一缓存处理（优化）"></a>3.26 统一缓存处理（优化）</h2><h3 id="3-26-1-功能说明"><a href="#3-26-1-功能说明" class="headerlink" title="3.26.1 功能说明"></a>3.26.1 功能说明</h3><ul><li>将一些访问量比较大的接口放入内存中，可以加快用户访问速度</li></ul><h3 id="3-26-2-编码"><a href="#3-26-2-编码" class="headerlink" title="3.26.2 编码"></a>3.26.2 编码</h3><h4 id="①-Cache接口"><a href="#①-Cache接口" class="headerlink" title="① Cache接口"></a>① Cache接口</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch.common.cache;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target({ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cache {</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 1 * 60 * 1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="②-CacheAspect增强类"><a href="#②-CacheAspect增强类" class="headerlink" title="② CacheAspect增强类"></a>② CacheAspect增强类</h4><ul><li>比较固定，可以直接copy</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch.common.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.ch.model.params.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheAspect</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.ch.common.cache.Cache)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("pt()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span></span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Signature signature = pjp.getSignature();</span><br><span class="line">            <span class="comment">//类名</span></span><br><span class="line">            String className = pjp.getTarget().getClass().getSimpleName();</span><br><span class="line">            <span class="comment">//调用的方法名</span></span><br><span class="line">            String methodName = signature.getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Class[] parameterTypes = <span class="keyword">new</span> Class[pjp.getArgs().length];</span><br><span class="line">            Object[] args = pjp.getArgs();</span><br><span class="line">            <span class="comment">//参数</span></span><br><span class="line">            String params = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) {</span><br><span class="line">                <span class="keyword">if</span>(args[i] != <span class="keyword">null</span>) {</span><br><span class="line">                    params += JSON.toJSONString(args[i]);</span><br><span class="line">                    parameterTypes[i] = args[i].getClass();</span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    parameterTypes[i] = <span class="keyword">null</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(params)) {</span><br><span class="line">                <span class="comment">//加密 以防出现key过长以及字符转义获取不到的情况</span></span><br><span class="line">                params = DigestUtils.md5Hex(params);</span><br><span class="line">            }</span><br><span class="line">            Method method = pjp.getSignature().getDeclaringType().getMethod(methodName, parameterTypes);</span><br><span class="line">            <span class="comment">//获取Cache注解</span></span><br><span class="line">            Cache annotation = method.getAnnotation(Cache.class);</span><br><span class="line">            <span class="comment">//缓存过期时间</span></span><br><span class="line">            <span class="keyword">long</span> expire = annotation.expire();</span><br><span class="line">            <span class="comment">//缓存名称</span></span><br><span class="line">            String name = annotation.name();</span><br><span class="line">            <span class="comment">//先从redis获取</span></span><br><span class="line">            String redisKey = name + <span class="string">"::"</span> + className+<span class="string">"::"</span>+methodName+<span class="string">"::"</span>+params;</span><br><span class="line">            String redisValue = redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisValue)){</span><br><span class="line">                log.info(<span class="string">"走了缓存~~~,{},{}"</span>,className,methodName);</span><br><span class="line">                <span class="keyword">return</span> JSON.parseObject(redisValue, Result.class);</span><br><span class="line">            }</span><br><span class="line">            Object proceed = pjp.proceed();</span><br><span class="line">            redisTemplate.opsForValue().set(redisKey,JSON.toJSONString(proceed), Duration.ofMillis(expire));</span><br><span class="line">            log.info(<span class="string">"存入缓存~~~ {},{}"</span>,className,methodName);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable throwable) {</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Result.fail(-<span class="number">999</span>,<span class="string">"系统错误"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="③-应用"><a href="#③-应用" class="headerlink" title="③ 应用"></a>③ 应用</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如说在ArticleController中的请求上加上@Cache注解，expire和name是我们规定的参数，一个表示缓存时间，一个表示功能名字</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/articles")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Cache(expire = 5 * 60 * 1000,name = "listArticle")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">listArticle</span><span class="params">(<span class="meta">@RequestBody</span> PageParam pageParam)</span></span>{<span class="comment">//用pageParam接收前端的参数</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(articleService.listArticle(pageParam));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-26-3-测试结果"><a href="#3-26-3-测试结果" class="headerlink" title="3.26.3 测试结果"></a>3.26.3 测试结果</h3><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220127134901207.png" alt="image-20220127134901207"></p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220127134934438.png" alt="image-20220127134934438"></p><p>成功存入内存，并且再次访问时，从内存中读取缓存</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/13/20220113_springboot2/"/>
      <url>/2022/01/13/20220113_springboot2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring与SpringBoot"><a href="#一、Spring与SpringBoot" class="headerlink" title="一、Spring与SpringBoot"></a>一、Spring与SpringBoot</h1><h2 id="1-Spring能做什么"><a href="#1-Spring能做什么" class="headerlink" title="1 Spring能做什么"></a>1 Spring能做什么</h2><h3 id="1-1-Spring的能力"><a href="#1-1-Spring的能力" class="headerlink" title="1.1 Spring的能力"></a>1.1 Spring的能力</h3><p><img src="D:\GitBlog\source\media\f8f3c4e9545d43a413900c7eb2e3ec1.jpg" alt="f8f3c4e9545d43a413900c7eb2e3ec1"></p><h3 id="1-2-Spring的生态"><a href="#1-2-Spring的生态" class="headerlink" title="1.2 Spring的生态"></a>1.2 Spring的生态</h3><p><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></p><p>覆盖了：</p><p>web开发</p><p>数据访问</p><p>安全控制</p><p>分布式</p><p>消息服务</p><p>移动开发</p><p>批处理</p><p>……</p><h3 id="1-3-Spring5重大升级"><a href="#1-3-Spring5重大升级" class="headerlink" title="1.3 Spring5重大升级"></a>1.3 Spring5重大升级</h3><h4 id="1-3-1-响应式编程"><a href="#1-3-1-响应式编程" class="headerlink" title="1.3.1 响应式编程"></a>1.3.1 响应式编程</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602642309979-eac6fe50-dc84-49cc-8ab9-e45b13b90121.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h4 id="1-3-2-内部源码设计"><a href="#1-3-2-内部源码设计" class="headerlink" title="1.3.2 内部源码设计"></a>1.3.2 内部源码设计</h4><p>基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。</p><h2 id="2-为什么用SpringBoot"><a href="#2-为什么用SpringBoot" class="headerlink" title="2 为什么用SpringBoot"></a>2 为什么用SpringBoot</h2><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p><p>能快速创建出生产级别的Spring应用</p><h3 id="2-1-SpringBoot优点"><a href="#2-1-SpringBoot优点" class="headerlink" title="2.1 SpringBoot优点"></a>2.1 SpringBoot优点</h3><ul><li><p>Create stand-alone Spring applications</p></li><li><ul><li>创建独立Spring应用</li></ul></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p></li><li><ul><li>内嵌web服务器</li></ul></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p></li><li><ul><li>自动starter依赖，简化构建配置</li></ul></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p></li><li><ul><li>自动配置Spring以及第三方功能</li></ul></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p></li><li><ul><li>提供生产级别的监控、健康检查及外部化配置</li></ul></li><li><p>Absolutely no code generation and no requirement for XML configuration</p></li><li><ul><li>无代码生成、无需编写XML</li></ul></li></ul><p>SpringBoot是整合Spring技术栈的一站式框架</p><p>SpringBoot是简化Spring技术栈的快速开发脚手架</p><h3 id="2-2-SpringBoot缺点"><a href="#2-2-SpringBoot缺点" class="headerlink" title="2.2 SpringBoot缺点"></a>2.2 SpringBoot缺点</h3><ul><li>人称版本帝，迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ul><h2 id="3-时代背景"><a href="#3-时代背景" class="headerlink" title="3 时代背景"></a>3 时代背景</h2><h3 id="3-1-微服务"><a href="#3-1-微服务" class="headerlink" title="3.1 微服务"></a>3.1 微服务</h3><p><a href="https://martinfowler.com/articles/microservices.html">James Lewis and Martin Fowler (2014)</a>  提出微服务完整概念。<a href="https://martinfowler.com/microservices/">https://martinfowler.com/microservices/</a></p><p>In short, the <strong>microservice architectural style</strong> is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with <strong>lightweight</strong> mechanisms, often an <strong>HTTP</strong> resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully <strong>automated deployment</strong> machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be <strong>written in different programming languages</strong> and use different data storage technologies.– <a href="https://martinfowler.com/articles/microservices.html">James Lewis and Martin Fowler (2014)</a></p><ul><li><p>微服务是一种架构风格</p></li><li><p>一个应用拆分为一组小型服务</p></li><li><p>每个服务运行在自己的进程内，也就是可独立部署和升级</p></li><li><p>服务之间使用轻量级HTTP交互</p></li><li><p>服务围绕业务功能拆分</p></li><li><p>可以由全自动部署机制独立部署</p></li><li><p>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</p></li></ul><h3 id="3-2-分布式"><a href="#3-2-分布式" class="headerlink" title="3.2 分布式"></a>3.2 分布式</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1613913/1599562347965-a617a866-4270-44e9-9c5b-ced552683eda.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h4 id="3-2-1-分布式的困难"><a href="#3-2-1-分布式的困难" class="headerlink" title="3.2.1 分布式的困难"></a>3.2.1 分布式的困难</h4><ul><li><p>远程调用</p></li><li><p>服务发现</p></li><li><p>负载均衡</p></li><li><p>服务容错</p></li><li><p>配置管理</p></li><li><p>服务监控</p></li><li><p>链路追踪</p></li><li><p>日志管理</p></li><li><p>任务调度</p></li><li><p>……</p></li></ul><h4 id="3-2-2-分布式的解决"><a href="#3-2-2-分布式的解决" class="headerlink" title="3.2.2 分布式的解决"></a>3.2.2 分布式的解决</h4><ul><li>SpringBoot + SpringCloud</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1613913/1599799119457-841ef47a-6585-4ca4-8e3d-8298e796012c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/watermark,type_d3F5LW1pY3JvaGVp,size_25,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h3 id="3-3-云原生"><a href="#3-3-云原生" class="headerlink" title="3.3 云原生"></a>3.3 云原生</h3><p>原生应用如何上云。 Cloud Native</p><h4 id="3-3-1-上云的困难"><a href="#3-3-1-上云的困难" class="headerlink" title="3.3.1 上云的困难"></a>3.3.1 上云的困难</h4><ul><li><p>服务自愈</p></li><li><p>弹性伸缩</p></li><li><p>服务隔离</p></li><li><p>自动化部署</p></li><li><p>灰度发布</p></li><li><p>流量治理</p></li><li><p>……</p></li></ul><h4 id="3-3-2-上云的解决"><a href="#3-3-2-上云的解决" class="headerlink" title="3.3.2 上云的解决"></a>3.3.2 上云的解决</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1613913/1599563498261-8b0b4d86-bd9b-49a3-aefc-89696a375dcb.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h2 id="4-如何学习SpringBoot"><a href="#4-如何学习SpringBoot" class="headerlink" title="4 如何学习SpringBoot"></a>4 如何学习SpringBoot</h2><h3 id="4-1-官网文档架构"><a href="#4-1-官网文档架构" class="headerlink" title="4.1 官网文档架构"></a>4.1 官网文档架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602654700738-b6c50c90-0649-4d62-98d3-57658caf0fdb.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_50,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602654837853-48916a4f-cb5a-422c-ba7a-83b027c5bf24.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_36,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>查看版本新特性；</p><p><a href="https://github.com/spring-projects/spring-boot/wiki#release-notes">https://github.com/spring-projects/spring-boot/wiki#release-notes</a></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602730009896-1b651f2c-133c-4f62-b21c-92a002f09e73.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_33,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h1 id="二、SpringBoot2入门"><a href="#二、SpringBoot2入门" class="headerlink" title="二、SpringBoot2入门"></a>二、SpringBoot2入门</h1><h2 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1 系统要求"></a>1 系统要求</h2><ul><li><p><a href="https://www.java.com/">Java 8</a> &amp; 兼容java14 .</p></li><li><p>Maven 3.3+</p></li><li><p>idea 2019.1.2</p></li></ul><h3 id="1-1-maven设置"><a href="#1-1-maven设置" class="headerlink" title="1.1 maven设置"></a>1.1 maven设置</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>**映射中央仓库为阿里镜像，加快依赖下载速度**</span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在maven的conf的settings.xml中修改依赖的下载位置，默认在C盘，建议改到D盘</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.2.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: ${user.home}/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\maven_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span><span class="comment">&lt;!--加入这一句即可，中间放的是自己创建的文件夹--&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-HelloWorld"><a href="#2-HelloWorld" class="headerlink" title="2 HelloWorld"></a>2 HelloWorld</h2><p>需求：浏览发送/hello请求，响应 Hello，Spring Boot 2 </p><h3 id="2-1-创建maven工程"><a href="#2-1-创建maven工程" class="headerlink" title="2.1 创建maven工程"></a>2.1 创建maven工程</h3><h3 id="2-2-引入依赖"><a href="#2-2-引入依赖" class="headerlink" title="2.2 引入依赖"></a>2.2 引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--web场景启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-创建主程序"><a href="#2-3-创建主程序" class="headerlink" title="2.3 创建主程序"></a>2.3 创建主程序</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>：这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-编写业务"><a href="#2-4-编写业务" class="headerlink" title="2.4 编写业务"></a>2.4 编写业务</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, Spring Boot 2!"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><p>直接运行main方法</p><h3 id="2-6-简化配置"><a href="#2-6-简化配置" class="headerlink" title="2.6 简化配置"></a>2.6 简化配置</h3><p>application.properties</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br></pre></td></tr></tbody></table></figure><h3 id="2-7-简化部署"><a href="#2-7-简化部署" class="headerlink" title="2.7 简化部署"></a>2.7 简化部署</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>把项目打成jar包，直接在目标服务器执行即可。</p><p>注意点：</p><ul><li>取消掉cmd的快速编辑模式</li></ul><h1 id="三、了解自动配置原理"><a href="#三、了解自动配置原理" class="headerlink" title="三、了解自动配置原理"></a>三、了解自动配置原理</h1><h2 id="1-SpringBoot特点"><a href="#1-SpringBoot特点" class="headerlink" title="1 SpringBoot特点"></a>1 SpringBoot特点</h2><h3 id="1-1-依赖管理"><a href="#1-1-依赖管理" class="headerlink" title="1.1 依赖管理"></a>1.1 依赖管理</h3><ul><li>父项目做依赖管理</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">依赖管理    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目</span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制</span><br></pre></td></tr></tbody></table></figure><ul><li>开发导入starter场景启动器</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、见到很多 spring-boot-starter-* ： *就代表某种场景</span><br><span class="line">2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class="line">3、SpringBoot所有支持的场景</span><br><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span><br><span class="line">4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class="line">5、所有场景启动器最底层的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>无需关注版本号，自动版本仲裁</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、引入依赖默认都可以不写版本</span><br><span class="line">2、引入非版本仲裁的jar，要写版本号。</span><br></pre></td></tr></tbody></table></figure><ul><li>可以修改默认版本号</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、查看spring-boot-dependencies里面规定当前依赖的版本用的key。</span><br><span class="line">2、在当前项目里面重写配置，由于maven的就近原则，会优先用当前工程的配置，再去使用父工程的配置</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-自动配置"><a href="#1-2-自动配置" class="headerlink" title="1.2 自动配置"></a>1.2 自动配置</h3><ul><li><p>自动配好Tomcat</p></li><li><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p></li><li><ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需以前的包扫描配置</li></ul></li><li><ul><li>想要改变扫描路径，@SpringBootApplication(scanBasePackages=<strong>“com.atguigu”</strong>)<ul><li>或者@ComponentScan 指定扫描路径</li></ul></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages="com.atguigu")</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan("com.atguigu.boot")</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>各种配置拥有默认值</p></li><li><ul><li>默认配置最终都是映射到某个类上，如：MultipartProperties</li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p></li><li><ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li></ul></li><li><ul><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li><li></li></ul></li><li><p>……</p></li></ul><h2 id="2-容器功能"><a href="#2-容器功能" class="headerlink" title="2 容器功能"></a>2 容器功能</h2><h3 id="2-1-组件添加"><a href="#2-1-组件添加" class="headerlink" title="2.1 组件添加"></a>2.1 组件添加</h3><h4 id="2-1-1-Configuration"><a href="#2-1-1-Configuration" class="headerlink" title="2.1.1 @Configuration"></a>2.1.1 @Configuration</h4><ul><li><p>基本使用</p></li><li><p><strong>Full模式与Lite模式</strong></p><ul><li><p>示例</p></li><li><p>最佳实战</p><ul><li><p>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</p></li><li><p>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</p></li></ul></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#############################Configuration使用示例######################################################</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment"> *      组件依赖：某个组件要调用容器中的其他组件</span></span><br><span class="line"><span class="comment"> *      组件依赖必须使用Full模式默认。其他建议使用Lite模式，会加快SpringBoot的启动</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>{<span class="comment">//返回的组件名就是user01</span></span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("tom")</span><span class="comment">//可以通过该方式修改组件名，此处返回的组件名为tom，而不是tomcatPet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">"tomcat"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################<span class="meta">@Configuration</span>测试代码如下########################################</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan("com.atguigu.boot")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) {</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line"></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">"tom"</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">"tom"</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"组件："</span>+(tom01 == tom02));<span class="comment">//结果为true，说明容器中的组件是单实例的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);<span class="comment">//配置类也是容器中的一个组件</span></span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true)，则MyConfig是容器的代理对象，当使用MyConfig创建对象时，就是去容器中调用组件；而若为false，就是直接创建，不保持单实例</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);<span class="comment">//结果为true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">"user01"</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">"tom"</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"用户的宠物："</span>+(user01.getPet() == tom));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-1-2-Bean、-Component、-Controller、-Service、-Repository"><a href="#2-1-2-Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="2.1.2 @Bean、@Component、@Controller、@Service、@Repository"></a>2.1.2 @Bean、@Component、@Controller、@Service、@Repository</h4><h4 id="2-1-3-ComponentScan、-Import"><a href="#2-1-3-ComponentScan、-Import" class="headerlink" title="2.1.3 @ComponentScan、@Import"></a>2.1.3 @ComponentScan、@Import</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@Import({User.class, DBHelper.class})</span></span><br><span class="line"> * 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import({User.class, DBHelper.class})</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>@Import 高级用法： <a href="https://www.bilibili.com/video/BV1gW411W7wy?p=8">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></p><h4 id="2-1-4-Conditional"><a href="#2-1-4-Conditional" class="headerlink" title="2.1.4 @Conditional"></a>2.1.4 @Conditional</h4><p>条件装配：满足Conditional指定的条件，则进行组件注入</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">=====================测试条件装配==========================</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name = "tom")，表示若容器中**有**一个叫tom的组件，则该方法中的组件注册才会生效；</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = "tom")</span><span class="comment">//表示若容器中**没有**一个叫tom的组件，则该方法中的组件注册才会生效；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>{</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("tom22")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">"tomcat"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(<span class="string">"容器中Tom组件："</span>+tom);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">"user01"</span>);</span><br><span class="line">        System.out.println(<span class="string">"容器中user01组件："</span>+user01);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> tom22 = run.containsBean(<span class="string">"tom22"</span>);</span><br><span class="line">        System.out.println(<span class="string">"容器中tom22组件："</span>+tom22);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-原生配置文件引入"><a href="#2-2-原生配置文件引入" class="headerlink" title="2.2 原生配置文件引入"></a>2.2 原生配置文件引入</h3><h4 id="2-2-1-ImportResource"><a href="#2-2-1-ImportResource" class="headerlink" title="2.2.1 @ImportResource"></a>2.2.1 @ImportResource</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在配置文件中配置haha和hehe两个组件，此时SpringBoot并不知道该配置文件的存在--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"haha"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.boot.bean.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hehe"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.boot.bean.Pet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tomcat"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource("classpath:beans.xml")</span><span class="comment">//在任一配置类上标注即可，用于导入Spring的配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{}</span><br><span class="line"></span><br><span class="line">======================测试=================</span><br><span class="line"><span class="keyword">boolean</span> haha = run.containsBean(<span class="string">"haha"</span>);</span><br><span class="line"><span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">"hehe"</span>);</span><br><span class="line">System.out.println(<span class="string">"haha："</span>+haha);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"hehe："</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-配置绑定"><a href="#2-3-配置绑定" class="headerlink" title="2.3 配置绑定"></a>2.3 配置绑定</h3><p>即将JavaBean中的属性与配置文件中的配置一一绑定</p><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用（比较复杂，不方便）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>{</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>{</span><br><span class="line">         Properties pps = <span class="keyword">new</span> Properties();</span><br><span class="line">         pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">"a.properties"</span>));</span><br><span class="line">         Enumeration enum1 = pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) {</span><br><span class="line">             String strKey = (String) enum1.nextElement();</span><br><span class="line">             String strValue = pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">"="</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h4 id="2-3-1-Component-ConfigurationProperties"><a href="#2-3-1-Component-ConfigurationProperties" class="headerlink" title="2.3.1 @Component + @ConfigurationProperties"></a>2.3.1 @Component + @ConfigurationProperties</h4><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mycar.brand</span>=<span class="string">BYD</span></span><br><span class="line"><span class="meta">mycar.price</span>=<span class="string">100000</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "mycar")</span><span class="comment">//prefix表示该类中的属性与配置文件中哪个前缀的配置对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Car{"</span> +</span><br><span class="line">                <span class="string">"brand='"</span> + brand + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", price="</span> + price +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-3-2-EnableConfigurationProperties-ConfigurationProperties"><a href="#2-3-2-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="2.3.2 @EnableConfigurationProperties + @ConfigurationProperties"></a>2.3.2 @EnableConfigurationProperties + @ConfigurationProperties</h4><p>适用场景：对应第三方jar包中的类，如果该类上边没有@Component，我们也不好直接给他加上，就可以在我们自己的配置类中用@EnableConfigurationProperties(xx.class)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span><span class="comment">//开启Car配置绑定功能，并把Car这个组件自动注册到容器中，相当于@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line">}</span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "mycar")</span><span class="comment">//prefix表示该类中的属性与配置文件中哪个前缀的配置对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>归根结底，两者的区别在于注解的地方不同而已，一个在要绑定的类上，一个在配置类上</p><h2 id="3-自动配置原理入门"><a href="#3-自动配置原理入门" class="headerlink" title="3 自动配置原理入门"></a>3 自动配置原理入门</h2><p><strong>xxxAutoConfiguration</strong>，表示这是一个自动配置类</p><h3 id="3-1-引导加载自动配置类"><a href="#3-1-引导加载自动配置类" class="headerlink" title="3.1 引导加载自动配置类"></a>3.1 引导加载自动配置类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication{}</span><br><span class="line"></span><br><span class="line">======================  </span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><ul><li>@Configuration：代表当前是一个配置类</li><li>@ComponentScan：指定扫描哪些Spring注解；</li><li><strong>@EnableAutoConfiguration</strong></li></ul><p>@EnableAutoConfiguration包含以下两个注解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration {}</span><br></pre></td></tr></tbody></table></figure><p>① @AutoConfigurationPackage</p><p>自动配置包：指定了默认的包规则</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage {}</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来，一般默认是主程序所在的包下。</span></span><br></pre></td></tr></tbody></table></figure><p>② @Import(AutoConfigurationImportSelector.class)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata)，给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader)，得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br></pre></td></tr></tbody></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602845382065-5c41abf5-ee10-4c93-89e4-2a9b831c3ceb.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class="line">spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br></pre></td></tr></tbody></table></figure><p>实际上就是在spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories中写死了SpringBboot启动后要给容器中加载的配置类，并通过一些方法读入该文件，再通过注解实现配置</p><h4 id="3-1-1-按需开启自动配置项"><a href="#3-1-1-按需开启自动配置项" class="headerlink" title="3.1.1 按需开启自动配置项"></a>3.1.1 按需开启自动配置项</h4><p> 虽然我们127个场景的所有自动配置启动的时候默认全部加载，但实际上不会全部生效。</p><p>按照条件装配规则<strong>（@Conditional）</strong>，最终会按需配置。</p><h3 id="3-2-修改默认配置"><a href="#3-2-修改默认配置" class="headerlink" title="3.2 修改默认配置"></a>3.2 修改默认配置</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中的文件上传解析器组件不叫这个名字：multipartResolver</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>{</span><br><span class="line">    <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">    <span class="comment">//其作用就是，如果你的文件上传解析器的命名不符合规范，就将其规范化后返回</span></span><br><span class="line">    <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">}</span><br><span class="line">给容器中加入了文件上传解析器；</span><br></pre></td></tr></tbody></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><p>总结：</p><ul><li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。@EnableConfigurationProperties(xxxProperties.Class)，xxxProperties和配置文件进行了绑定，进去xxxProperties里面就能看到其绑定前缀，再去配置文件中进行修改即可。</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p><ul><li><p>用户直接自己@Bean替换底层的组件</p></li><li><p>用户去看这个组件是获取的配置文件什么值，然后去修改即可。</p></li></ul></li></ul><p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p><h3 id="3-3-最佳实践"><a href="#3-3-最佳实践" class="headerlink" title="3.3 最佳实践"></a>3.3 最佳实践</h3><ul><li><p>引入场景依赖</p></li><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li></ul></li><li><p>查看自动配置了哪些（选做）</p></li><li><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug=true开启自动配置报告。Negative（不生效）\Positive（生效）</li></ul></li><li><p>是否需要修改</p></li><li><ul><li>参照文档修改配置项</li></ul></li><li><ul><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些前缀。</li></ul></li></ul></li><li><ul><li>自定义加入或者替换组件</li></ul></li><li><ul><li><ul><li>@Bean、@Component。。。</li></ul></li></ul></li><li><ul><li>自定义器  <strong>XXXXXCustomizer</strong>；</li><li>……</li></ul></li></ul><h2 id="4-开发小技巧"><a href="#4-开发小技巧" class="headerlink" title="4 开发小技巧"></a>4 开发小技巧</h2><h3 id="4-1-Lombok"><a href="#4-1-Lombok" class="headerlink" title="4.1 Lombok"></a>4.1 Lombok</h3><p>简化JavaBean开发</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea中搜索安装lombok插件</span><br><span class="line">===============================简化JavaBean开发===================================</span><br><span class="line">@NoArgsConstructor//无参</span><br><span class="line">@AllArgsConstructor//有参</span><br><span class="line">@Data//getter和setter</span><br><span class="line">@ToString</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">public class User {</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    private Pet pet;</span><br><span class="line"></span><br><span class="line">    public User(String name,Integer age){</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================简化日志开发===================================</span><br><span class="line">@Slf4j//引入日志</span><br><span class="line">@RestController</span><br><span class="line">public class HelloController {</span><br><span class="line">    @RequestMapping("/hello")</span><br><span class="line">    public String handle01(@RequestParam("name") String name){</span><br><span class="line">        </span><br><span class="line">        log.info("请求进来了....");</span><br><span class="line">        </span><br><span class="line">        return "Hello, Spring Boot 2!"+"你好："+name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-dev-tools"><a href="#4-2-dev-tools" class="headerlink" title="4.2 dev-tools"></a>4.2 dev-tools</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>项目或者页面修改以后：Ctrl+F9；</p><h3 id="4-3-Spring-Initailizr（项目初始化向导）"><a href="#4-3-Spring-Initailizr（项目初始化向导）" class="headerlink" title="4.3 Spring Initailizr（项目初始化向导）"></a>4.3 Spring Initailizr（项目初始化向导）</h3><p>①选择我们需要的开发场景</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602922147241-73fb2496-e795-4b5a-b909-a18c6011a028.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>②自动依赖引入</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602921777330-8fc5c198-75da-4ff9-b82c-71ee3fe18af8.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>③自动创建项目结构</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602921758313-5099fe18-4c7b-4417-bf6f-2f40b9028296.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>④自动编写好主配置类</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602922039074-79e98aad-8158-4113-a7e7-305b57b0a6bf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h1 id="四、SpringBoot2核心技术-核心功能"><a href="#四、SpringBoot2核心技术-核心功能" class="headerlink" title="四、SpringBoot2核心技术-核心功能"></a>四、SpringBoot2核心技术-核心功能</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602997544936-57c91eb5-89fb-4ab7-a15d-dd761ae6e0d8.png" alt="img"></p><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1 配置文件"></a>1 配置文件</h2><h3 id="1-1-文件类型"><a href="#1-1-文件类型" class="headerlink" title="1.1 文件类型"></a>1.1 文件类型</h3><h4 id="1-1-properties"><a href="#1-1-properties" class="headerlink" title="1.1 properties"></a>1.1 properties</h4><p>同以前的properties用法</p><h4 id="1-2-yaml"><a href="#1-2-yaml" class="headerlink" title="1.2 yaml"></a>1.2 yaml</h4><h5 id="1-2-1-简介"><a href="#1-2-1-简介" class="headerlink" title="1.2.1 简介"></a>1.2.1 简介</h5><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p>非常适合用来做以数据为中心的配置文件</p><h5 id="1-2-2-基本语法"><a href="#1-2-2-基本语法" class="headerlink" title="1.2.2 基本语法"></a>1.2.2 基本语法</h5><ul><li><p>key: value；kv之间有空格</p></li><li><p>大小写敏感</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用tab，只允许空格</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p></li><li><p>‘#’表示注释</p></li><li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</p></li></ul><h5 id="1-2-3-数据类型"><a href="#1-2-3-数据类型" class="headerlink" title="1.2.3 数据类型"></a>1.2.3 数据类型</h5><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></tbody></table></figure><ul><li>对象：键值对的集合。map、hash、set、object </li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> {<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>}</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></tbody></table></figure><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></tbody></table></figure><h5 id="1-2-4-示例"><a href="#1-2-4-示例" class="headerlink" title="1.2.4 示例"></a>1.2.4 示例</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> Boolean boss;</span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Pet pet;</span><br><span class="line"><span class="keyword">private</span> String[] interests;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line"><span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>{</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double weight;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>在yaml中字符串可加单双引号也可不加</li><li>单引号会将\n作为字符串输出，双引号会将\n作为换行输出</li><li>也就是<strong>单引号会转义，双引号不会转义</strong></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml表示以上对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> {<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>}</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">tom</span>}</span><br><span class="line">      <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>}</span><br><span class="line">    <span class="attr">health:</span> [{<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>},{<span class="attr">name:</span> <span class="string">mike</span>,<span class="attr">weigh:</span> <span class="number">52</span>}]</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-配置提示"><a href="#1-2-配置提示" class="headerlink" title="1.2 配置提示"></a>1.2 配置提示</h3><p>自定义的类和配置文件绑定一般没有提示。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--添加此依赖后对于自定义的类也能有提示了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--由于上面添加的spring-boot-configuration-processor包只是为了写代码方便，对于开发毫无影响，因此最后打包的时候最好将该包去掉，免得占用空间，下面的&lt;configuration&gt;就可以做到这一点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-Web开发"><a href="#2-Web开发" class="headerlink" title="2 Web开发"></a>2 Web开发</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1608701608750-77d03c43-c254-4132-acdf-843958446b27.png" alt="img"></p><h3 id="2-1-SpringMVC自动配置概览"><a href="#2-1-SpringMVC自动配置概览" class="headerlink" title="2.1 SpringMVC自动配置概览"></a>2.1 SpringMVC自动配置概览</h3><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.<ul><li>内容协商视图解析器和BeanName视图解析器</li></ul></li></ul><ul><li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).<ul><li>静态资源（包括webjars）</li></ul></li><li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.<ul><li>自动注册 <code>Converter，GenericConverter，Formatter </code></li></ul></li><li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).<ul><li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li></ul></li><li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).<ul><li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li></ul></li><li>Static <code>index.html</code> support.<ul><li>静态index.html 页支持</li></ul></li><li>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).<ul><li>自定义 <code>Favicon</code>  </li></ul></li><li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).<ul><li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li></ul></li></ul><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><p><strong>不用@EnableWebMvc注解。使用</strong> <code>**@Configuration**</code> <strong>+</strong> <code>**WebMvcConfigurer**</code> <strong>自定义规则</strong></p><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p><p><strong>声明</strong> <code>**WebMvcRegistrations**</code> <strong>改变默认底层组件</strong></p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p><p><strong>使用</strong> <code>**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**</code></p><h3 id="2-2-简单功能分析"><a href="#2-2-简单功能分析" class="headerlink" title="2.2 简单功能分析"></a>2.2 简单功能分析</h3><h4 id="2-2-1-静态资源访问"><a href="#2-2-1-静态资源访问" class="headerlink" title="2.2.1 静态资源访问"></a>2.2.1 静态资源访问</h4><h5 id="1-静态资源目录"><a href="#1-静态资源目录" class="headerlink" title="1 静态资源目录"></a>1 静态资源目录</h5><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问 ： 当前项目根路径/ + 静态资源名 </p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220115114411922.png" alt="image-20220115114411922"></p><p>原理： 静态映射/**。也就是所有请求都会经过静态资源处理器</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源处理器去上述指定目录下寻找，静态资源也找不到则响应404页面</p><p>改变默认的静态资源路径</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>,<span class="string">...</span>]</span><br></pre></td></tr></tbody></table></figure><h5 id="2-静态资源访问前缀"><a href="#2-静态资源访问前缀" class="headerlink" title="2 静态资源访问前缀"></a>2 静态资源访问前缀</h5><p>默认无前缀</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></tbody></table></figure><p>原因：比如在用户未登陆之前，我们要用拦截器去拦截一些请求，但是如果指定拦截器去拦截/**，则会将静态资源一起拦截，所以我们要改变默认的静态资源路径，一般在前面加个前缀，再让拦截器让带有该前缀的资源通过。</p><p>访问方式变化：localhost:8080/1.jpg —-&gt; localhost:8080/**res/**1.jpg </p><h5 id="3-webjar"><a href="#3-webjar" class="headerlink" title="3 webjar"></a>3 webjar</h5><p>官方地址：<a href="https://www.webjars.org/">https://www.webjars.org/</a></p><p>webjar其实就是将web开发要用的一些依赖打包成jar包，要用时引入相应依赖即可</p><p>以jquery为例子，引入之后就有相应的jar包了</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20220115120735208.png" alt="image-20220115120735208"></p><p>要访问其静态资源，只需访问下面的地址即可，因为springboot会自动映射 /<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>/**</p><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p><h4 id="2-2-2-欢迎页支持"><a href="#2-2-2-欢迎页支持" class="headerlink" title="2.2.2 欢迎页支持"></a>2.2.2 欢迎页支持</h4><ul><li>静态资源路径下  index.html<ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>controller能处理/index</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/index")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"nihao"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-3-自定义-Favicon"><a href="#2-2-3-自定义-Favicon" class="headerlink" title="2.2.3 自定义 Favicon"></a>2.2.3 自定义 <code>Favicon</code></h4><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-4-静态资源配置原理"><a href="#2-2-4-静态资源配置原理" class="headerlink" title="2.2.4 静态资源配置原理"></a>2.2.4 静态资源配置原理</h4><ul><li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration（主要）</li><li>WebMvcAutoConfiguration的生效条件如下：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><ul><li>给容器中配了什么：@EnableConfigurationProperties</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><ul><li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties==<strong>spring.mvc</strong>、ResourceProperties==<strong>spring.resources</strong></li></ul><h5 id="①配置类构造器"><a href="#①配置类构造器" class="headerlink" title="①配置类构造器"></a>①配置类构造器</h5><p>配置类只有一个有参构造器，则有参构造器所有参数的值都会从容器中确定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class="line"><span class="comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class="line"><span class="comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class="line"><span class="comment">//DispatcherServletPath  </span></span><br><span class="line"><span class="comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="params"><span class="function">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="②资源处理的默认规则"><a href="#②资源处理的默认规则" class="headerlink" title="②资源处理的默认规则"></a>②资源处理的默认规则</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) {<span class="comment">//判断静态资源处理规则是否生效，不生效则输出提示并返回</span></span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">//webjars的规则</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) { customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>).setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//静态资源默认路径规则StaticLocations</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) {</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern).addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>静态资源的默认路径</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = { <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> };</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment"> * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></tbody></table></figure><ul><li>可在配置文件中禁用静态资源规则</li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="string">禁用所有静态资源规则</span></span><br></pre></td></tr></tbody></table></figure><h5 id="③欢迎页的处理规则"><a href="#③欢迎页的处理规则" class="headerlink" title="③欢迎页的处理规则"></a>③欢迎页的处理规则</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>{</span><br><span class="line">WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) {</span><br><span class="line"><span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">"/**"</span>.equals(staticPathPattern)) {</span><br><span class="line">           <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">logger.info(<span class="string">"Adding welcome page: "</span> + welcomePage.get());</span><br><span class="line">setRootViewName(<span class="string">"forward:index.html"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {</span><br><span class="line">           <span class="comment">// 调用Controller  /index</span></span><br><span class="line">logger.info(<span class="string">"Adding welcome page template: index"</span>);</span><br><span class="line">setRootViewName(<span class="string">"index"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="④favicon"><a href="#④favicon" class="headerlink" title="④favicon"></a>④favicon</h5><p>/favicon.ico</p><h3 id="2-3-请求参数处理"><a href="#2-3-请求参数处理" class="headerlink" title="2.3 请求参数处理"></a>2.3 请求参数处理</h3><h4 id="2-3-1请求映射"><a href="#2-3-1请求映射" class="headerlink" title="2.3.1请求映射"></a>2.3.1请求映射</h4><h5 id="①rest使用与原理"><a href="#①rest使用与原理" class="headerlink" title="①rest使用与原理"></a>①rest使用与原理</h5><ul><li>@xxxMapping；</li><li>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</li><li><ul><li>以前：/getUser-获取用户    /deleteUser-删除用户  /editUser-修改用户      /saveUser-保存用户</li><li>现在： /user    GET-获取用户    DELETE-删除用户     PUT-修改用户     POST-保存用户</li><li>核心Filter：HiddenHttpMethodFilter<ul><li>用法： 表单method=post，隐藏域 _method=put</li></ul></li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/index"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"rest-get"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/index"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"rest-posst"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/index"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"rest-delete"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/index"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"put"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"rest-put"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>SpringBoot中手动开启</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到过滤器绑定的配置文件，为spring.mvc.hiddenmethod.filte</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/index")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@PostMapping("/index")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"post"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@DeleteMapping("/index")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"delete"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@PutMapping("/index")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">put</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"put"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>如何把_method 这个名字换成我们自己喜欢的</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个配置类自定义filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span></span>{</span><br><span class="line">        HiddenHttpMethodFilter methodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">"_m"</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>Rest原理（表单提交要使用REST的时候）</p><ul><li>表单提交会带上**_method=PUT**</li><li>请求过来被HiddenHttpMethodFilter拦截<ul><li>请求是否正常，并且是POST<ul><li>获取到**_method**的值。</li><li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</li><li>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</li></ul></li></ul></li></ul><p><strong>Rest使用客户端工具，</strong></p><ul><li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li></ul><h5 id="②请求映射原理"><a href="#②请求映射原理" class="headerlink" title="②请求映射原理"></a>②请求映射原理</h5><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181171918-b8acfb93-4914-4208-9943-b37610e93864.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet中的doDispatch（）方法开始</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181460034-ba25f3c0-9cfd-4432-8949-3d1dd88d8b12.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181662070-9e526de8-fd78-4a02-9410-728f059d6aef.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_48,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>所有的请求映射都在HandlerMapping中，SpringBoot默认配置了五个HandlerMapping</p><p>其中RequestMappingHandlerMapping存储的就是我们定义的所有的处理器请求映射</p><p>具体流程如下：</p><ul><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p><ul><li><p>如果有就找到这个请求对应的handler</p></li><li><p>如果没有就找下一个 HandlerMapping</p></li><li><p>比如SpringBoot自动配置欢迎页的 映射就在WelcomePageHandlerMapping ，在RequestMappingHandlerMapping中找不到</p></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) {<span class="comment">//循环遍历所有处理器映射</span></span><br><span class="line">            HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>若我们需要一些自定义的映射处理，我们也可以自己给容器中放HandlerMapping</p><h4 id="2-3-2-普通参数与基本注解"><a href="#2-3-2-普通参数与基本注解" class="headerlink" title="2.3.2 普通参数与基本注解"></a>2.3.2 普通参数与基本注解</h4><h5 id="①-注解："><a href="#①-注解：" class="headerlink" title="① 注解："></a>① 注解：</h5><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p><ul><li><strong>@PathVariable</strong><ul><li>@PathVariable用于传入路径变量，在请求参数中写入变量名（要写在{}中），并在方法的参数中用@PathVariable进行结束，变量名要和请求参数中的一致</li><li>在有多个请求参数的时候，也可在方法中传入一个Map&lt;String，String&gt;，直接接收路径中的所有变量</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/car/{id}/{username}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@PathVariable("username")</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv)</span></span>{</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>,id);</span><br><span class="line">    map.put(<span class="string">"username"</span>,name);</span><br><span class="line">    map.put(<span class="string">"pv"</span>,pv);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@RequestHeader</strong><ul><li>@RequestHeader用于获取请求头。若有添加参数，则获取特定的请求头，若无参数，则获取所有的请求头</li><li>若要获取所有请求头，传入的参数要为Map&lt;String,String&gt;</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/car")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@RequestHeader("User-Agent")</span> String userAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,)</span></span>{</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"userAgent"</span>,userAgent);</span><br><span class="line">    map.put(<span class="string">"headers"</span>,header);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@RequestParam</strong><ul><li>@RequestParam用于获取请求参数。</li><li>对于路径中传进来的参数，若同一变量有多个值，可用数值接收，也可用Map&lt;String,String&gt;接收</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/car?age=18&amp;inters=game&amp;inters=sport")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@RequestParam("age")</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@RequestParam("inters")</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,)</span></span>{</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"age"</span>,age);</span><br><span class="line">    map.put(<span class="string">"inters"</span>,inters);</span><br><span class="line">    map.put(<span class="string">"params"</span>,params);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@CookieValue</strong><ul><li>@CookieValue用于获取Cookie的值</li><li><strong>_ga</strong>是Cookie的名字，也可以直接将参数定义为Cookie类型，直接获取整个Cookie，再通过Cookie本身携带的获取各种属性</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/car")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@CookieValue("_ga")</span> String _ga,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="meta">@CookieValue("_ga")</span> Cookie cookie)</span></span>{</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"_ga"</span>,_ga);</span><br><span class="line">    System.out.println(cookie.getName()+<span class="string">"===&gt;"</span>+cookie.getValue());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@RequestBody</strong><ul><li>@RequestBody用于获取请求体，也就是一个请求中所有的K：V值</li><li>只有POST请求有请求体，比如一个表单</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/save")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>{<span class="comment">//表单回传的数据是将所有的KV拼接成一个String</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"content"</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;<span class="comment">//返回值为{"content","username=ch&amp;email=aa"}</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@RequestAttribute</strong><ul><li>@RequestAttribute用于获取请求域中的参数</li><li>前提是要在同一请求中，故只能用请求转发，不能用重定向</li><li>除了用注解，也可用HttpServletRequest来获取请求域中的参数</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="comment">//不能用RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/goto")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gotoSuccess</span><span class="params">(HttpServletRequest request)</span></span>{</span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/success"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//必须要添加该注解，否则不会跳转</span></span><br><span class="line">    <span class="meta">@GetMapping("/success")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute</span> String msg,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      HttpServletRequest request)</span></span>{</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"msg"</span>,msg);</span><br><span class="line">        String msg1 = (String) request.getAttribute(<span class="string">"msg"</span>);</span><br><span class="line">        map.put(<span class="string">"msg1"</span>,msg1);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>@MatrixVariable</strong><ul><li>@MatrixVariable一般是用来接收路径中传递的Cookie中的KV值的</li><li>在路径中传递Cookie中的KV值一般用矩阵变量形式，这样可以与一般的路径参数区分开来</li><li>@MatrixVariable要能生效则url一定要用路径变量（{}）</li><li>SpringBoot默认是禁用了矩阵变量的功能，要手动开启</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原理：对于路径的处理是通过UrlPathHelper进行解析。而是否支持矩阵变量是通过UrlPathHelper中的removeSemicolonContent属性（移除分号后内容）来判断的，若为false，则表示不移除分号后内容，即支持矩阵变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：在配置类中手动重写一个WebMvcConfigurer</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>{</span><br><span class="line">            UrlPathHelper urlPathHelper=<span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">            urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">            configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：让配置类去实现WebMvcConfigurer接口</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>{</span><br><span class="line">        UrlPathHelper urlPathHelper=<span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>{</span><br><span class="line">    <span class="comment">//请求路径为/cars/sell;low=34;brand=byd,audi,yd，此处sell为路径变量，low，brand为矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping("/cars/{path}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable("low")</span> Integer low,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@MatrixVariable("brand")</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@PathVariable("path")</span> String path)</span></span>{</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"low"</span>,low);</span><br><span class="line">        map.put(<span class="string">"brand"</span>,brand);</span><br><span class="line">        map.put(<span class="string">"path"</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">        <span class="comment">//输出为{"path":"sell","low":34,"brand":["byd","audi","yd"]}</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于有多个路径变量，且路径变量中含有相同的矩阵变量名的情况：</span></span><br><span class="line">    <span class="comment">//请求路径为/boss/1;age=20/2;age=10</span></span><br><span class="line">    <span class="meta">@GetMapping("/boss/{bossId}/{empId}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = "age",pathVar = "bossId")</span> Integer bossAge,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@MatrixVariable(value = "age",pathVar = "empId")</span> Integer empAge,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@PathVariable("bossId")</span> String bossId,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@PathVariable("empId")</span> String empId)</span></span>{</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"bossAge"</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">"empAge"</span>,empAge);</span><br><span class="line">        map.put(<span class="string">"bossId"</span>,bossId);</span><br><span class="line">        map.put(<span class="string">"empId"</span>,empId);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">        <span class="comment">//输出为{"empId":"2","bossAge":20,"bossId":"1","empAge":10}</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="②-Servlet-API："><a href="#②-Servlet-API：" class="headerlink" title="② Servlet API："></a>② Servlet API：</h5><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p><p><strong>ServletRequestMethodArgumentResolver  以上的部分参数</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>{</span><br><span class="line">Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line"><span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">(pushBuilder != <span class="keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">Principal.class.isAssignableFrom(paramType) ||</span><br><span class="line">InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">HttpMethod.class == paramType ||</span><br><span class="line">Locale.class == paramType ||</span><br><span class="line">TimeZone.class == paramType ||</span><br><span class="line">ZoneId.class == paramType);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="③-复杂参数："><a href="#③-复杂参数：" class="headerlink" title="③ 复杂参数："></a>③ 复杂参数：</h5><p><strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）、</strong>Errors/BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map,  Model model, HttpServletRequest request 都是可以给request域中放数据，</span><br><span class="line">request.getAttribute();</span><br></pre></td></tr></tbody></table></figure><p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel（）；—&gt; BindingAwareModelMap 是Model 也是Map</p><p><strong>mavContainer</strong>.getModel(); 获取到值的</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271442869-63b4c3c7-c721-4074-987d-cbe5999273ae.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271678813-d8e1a1e5-94fa-412c-a7f1-6f27174fd127.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271813894-037be041-92a5-49af-a49c-c350b3dd587a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h5 id="④-自定义对象参数："><a href="#④-自定义对象参数：" class="headerlink" title="④ 自定义对象参数："></a>④ 自定义对象参数：</h5><p>可以自动类型转换与格式化，可以级联封装。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     姓名： &lt;input name="userName"/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     年龄： &lt;input name="age"/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     生日： &lt;input name="birth"/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物姓名：&lt;input name="pet.name"/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物年龄：&lt;input name="pet.age"/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">result</span><br></pre></td></tr></tbody></table></figure><h2 id="2、POJO封装过程"><a href="#2、POJO封装过程" class="headerlink" title="2、POJO封装过程"></a>2、POJO封装过程</h2><ul><li><strong>ServletModelAttributeMethodProcessor</strong></li></ul><h2 id="3、参数处理原理"><a href="#3、参数处理原理" class="headerlink" title="3、参数处理原理"></a>3、参数处理原理</h2><ul><li><p>HandlerMapping中找到能处理请求的Handler（Controller.method()）</p></li><li><p>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></p></li><li><p>适配器执行目标方法并确定方法参数的每一个值</p></li></ul><h3 id="1、HandlerAdapter"><a href="#1、HandlerAdapter" class="headerlink" title="1、HandlerAdapter"></a>1、HandlerAdapter</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603262942726-107353bd-f8b7-44f6-93cf-2a3cad4093cf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>0 - 支持方法上标注@RequestMapping </p><p>1 - 支持函数式编程的</p><p>xxxxxx</p><h3 id="2、执行目标方法"><a href="#2、执行目标方法" class="headerlink" title="2、执行目标方法"></a>2、执行目标方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line"><span class="comment">//下面的两行是DispatcherServlet中的doDispatch中的代码</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod); <span class="comment">//执行目标方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ServletInvocableHandlerMethod</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"><span class="comment">//获取方法的参数值</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br></pre></td></tr></tbody></table></figure><h3 id="3、参数解析器-HandlerMethodArgumentResolver"><a href="#3、参数解析器-HandlerMethodArgumentResolver" class="headerlink" title="3、参数解析器-HandlerMethodArgumentResolver"></a>3、参数解析器-HandlerMethodArgumentResolver</h3><p>确定将要执行的目标方法的每一个参数的值是什么;</p><p>SpringMVC目标方法能写多少种参数类型。取决于参数解析器。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263283504-85bbd4d5-a9af-4dbf-b6a2-30b409868774.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263394724-33122714-9d06-42ec-bf45-e440e8b49c05.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>当前解析器是否支持解析这种参数</li><li>支持就调用 resolveArgument</li></ul><h3 id="4、返回值处理器"><a href="#4、返回值处理器" class="headerlink" title="4、返回值处理器"></a>4、返回值处理器</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263524227-386da4be-43b1-4b17-a2cc-8cf886346af9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h3 id="5、如何确定目标方法每一个参数的值"><a href="#5、如何确定目标方法每一个参数的值" class="headerlink" title="5、如何确定目标方法每一个参数的值"></a>5、如何确定目标方法每一个参数的值</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">============InvocableHandlerMethod==========================</span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) {</span><br><span class="line"><span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) {</span><br><span class="line">MethodParameter parameter = parameters[i];</span><br><span class="line">parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) {</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">"No suitable resolver"</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) {</span><br><span class="line"><span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">String exMsg = ex.getMessage();</span><br><span class="line"><span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) {</span><br><span class="line">logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-1、挨个判断所有参数解析器那个支持解析这个参数"><a href="#5-1、挨个判断所有参数解析器那个支持解析这个参数" class="headerlink" title="5.1、挨个判断所有参数解析器那个支持解析这个参数"></a>5.1、挨个判断所有参数解析器那个支持解析这个参数</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>{</span><br><span class="line">HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) {</span><br><span class="line"><span class="keyword">if</span> (resolver.supportsParameter(parameter)) {</span><br><span class="line">result = resolver;</span><br><span class="line"><span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-2、解析这个参数的值"><a href="#5-2、解析这个参数的值" class="headerlink" title="5.2、解析这个参数的值"></a>5.2、解析这个参数的值</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可</span><br></pre></td></tr></tbody></table></figure><h4 id="5-3、自定义类型参数-封装POJO"><a href="#5-3、自定义类型参数-封装POJO" class="headerlink" title="5.3、自定义类型参数 封装POJO"></a>5.3、自定义类型参数 封装POJO</h4><p><strong>ServletModelAttributeMethodProcessor  这个参数处理器支持</strong></p><p> <strong>是否为简单类型。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimpleValueType</span><span class="params">(Class&lt;?&gt; type)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> (Void.class != type &amp;&amp; <span class="keyword">void</span>.class != type &amp;&amp;</span><br><span class="line">(ClassUtils.isPrimitiveOrWrapper(type) ||</span><br><span class="line">Enum.class.isAssignableFrom(type) ||</span><br><span class="line">CharSequence.class.isAssignableFrom(type) ||</span><br><span class="line">Number.class.isAssignableFrom(type) ||</span><br><span class="line">Date.class.isAssignableFrom(type) ||</span><br><span class="line">Temporal.class.isAssignableFrom(type) ||</span><br><span class="line">URI.class == type ||</span><br><span class="line">URL.class == type ||</span><br><span class="line">Locale.class == type ||</span><br><span class="line">Class.class == type));</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">"ModelAttributeMethodProcessor requires ModelAndViewContainer"</span>);</span><br><span class="line">Assert.state(binderFactory != <span class="keyword">null</span>, <span class="string">"ModelAttributeMethodProcessor requires WebDataBinderFactory"</span>);</span><br><span class="line"></span><br><span class="line">String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line"><span class="keyword">if</span> (ann != <span class="keyword">null</span>) {</span><br><span class="line">mavContainer.setBinding(name, ann.binding());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Object attribute = <span class="keyword">null</span>;</span><br><span class="line">BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mavContainer.containsAttribute(name)) {</span><br><span class="line">attribute = mavContainer.getModel().get(name);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line"><span class="comment">// Create attribute instance</span></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span> (BindException ex) {</span><br><span class="line"><span class="keyword">if</span> (isBindExceptionRequired(parameter)) {</span><br><span class="line"><span class="comment">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class="line"><span class="keyword">if</span> (parameter.getParameterType() == Optional.class) {</span><br><span class="line">attribute = Optional.empty();</span><br><span class="line">}</span><br><span class="line">bindingResult = ex.getBindingResult();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) {</span><br><span class="line"><span class="comment">// Bean property binding and validation;</span></span><br><span class="line"><span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line">WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line"><span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) {</span><br><span class="line">bindRequestParameters(binder, webRequest);</span><br><span class="line">}</span><br><span class="line">validateIfApplicable(binder, parameter);</span><br><span class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) {</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line"><span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) {</span><br><span class="line">attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">}</span><br><span class="line">bindingResult = binder.getBindingResult();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class="line">Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> attribute;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p><strong>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</strong></p><p><strong>WebDataBinder :web数据绑定器，将请求参数的值绑定到指定的JavaBean里面</strong></p><p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</strong></p><p><strong>GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean – Integer）</strong></p><p><strong>byte – &gt; file</strong></p><p>@FunctionalInterface<strong>public interface</strong> Converter&lt;S, T&gt;</p><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603337871521-25fc1aa1-133a-4ce0-a146-d565633d7658.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_39,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603338486441-9bbd22a9-813f-49bd-b51b-e66c7f4b8598.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>未来我们可以给WebDataBinder里面放自己的Converter；</p><p><strong>private static final class</strong> StringToNumber&lt;T **extends** Number&gt; <strong>implements</strong> Converter&lt;String, T&gt;</p><p>自定义 Converter</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>{</span><br><span class="line">            UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">            <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">            urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">            configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>{</span><br><span class="line">            registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Pet&gt;() {</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Pet <span class="title">convert</span><span class="params">(String source)</span> </span>{</span><br><span class="line">                    <span class="comment">// 啊猫,3</span></span><br><span class="line">                    <span class="keyword">if</span>(!StringUtils.isEmpty(source)){</span><br><span class="line">                        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">                        String[] split = source.split(<span class="string">","</span>);</span><br><span class="line">                        pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">                        pet.setAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">                        <span class="keyword">return</span> pet;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、目标方法执行完成"><a href="#6、目标方法执行完成" class="headerlink" title="6、目标方法执行完成"></a>6、目标方法执行完成</h3><p>将所有的数据都放在 <strong>ModelAndViewContainer</strong>；包含要去的页面地址View。还包含Model数据。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603272018605-1bce3142-bdd9-4834-a028-c753e91c52ac.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h3 id="7、处理派发结果"><a href="#7、处理派发结果" class="headerlink" title="7、处理派发结果"></a>7、处理派发结果</h3><p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);</p><p>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">InternalResourceView：</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">exposeHelpers(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line"><span class="keyword">if</span> (rd == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not get RequestDispatcher for ["</span> + getUrl() +</span><br><span class="line"><span class="string">"]: Check that the corresponding file exists within your web application archive!"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line"><span class="keyword">if</span> (useInclude(request, response)) {</span><br><span class="line">response.setContentType(getContentType());</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">logger.debug(<span class="string">"Including ["</span> + getUrl() + <span class="string">"]"</span>);</span><br><span class="line">}</span><br><span class="line">rd.include(request, response);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line"><span class="comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">logger.debug(<span class="string">"Forwarding to ["</span> + getUrl() + <span class="string">"]"</span>);</span><br><span class="line">}</span><br><span class="line">rd.forward(request, response);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">暴露模型作为请求域属性</span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);</span><br></pre></td></tr></tbody></table></figure><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="params"><span class="function">HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//model中的所有数据遍历挨个放在请求域中</span></span><br><span class="line">model.forEach((name, value) -&gt; {</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">request.setAttribute(name, value);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">request.removeAttribute(name);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="4、数据响应与内容协商"><a href="#4、数据响应与内容协商" class="headerlink" title="4、数据响应与内容协商"></a>4、数据响应与内容协商</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749073-2573e24a-9ea9-459e-ad94-a433e1082624.png" alt="img"></p><h2 id="1、响应JSON"><a href="#1、响应JSON" class="headerlink" title="1、响应JSON"></a>1、响应JSON</h2><h3 id="1-1、jackson-jar-ResponseBody"><a href="#1-1、jackson-jar-ResponseBody" class="headerlink" title="1.1、jackson.jar+@ResponseBody"></a>1.1、jackson.jar+@ResponseBody</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">web场景自动引入了json场景</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="-7"><a href="#-7" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151090728-f7c60e6f-d0c0-4541-bfa3-8cc805dfd5d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_21,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></h3><p>给前端自动返回json数据；</p><h4 id="1、返回值解析器"><a href="#1、返回值解析器" class="headerlink" title="1、返回值解析器"></a>1、返回值解析器</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151359370-01cd1fbe-628a-4eea-9430-d79a78f59125.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_25,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="params"><span class="function">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown return value type: "</span> + returnType.getParameterType().getName());</span><br><span class="line">}</span><br><span class="line">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">}</span><br><span class="line">RequestResponseBodyMethodProcessor  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="params"><span class="function">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>{</span><br><span class="line"></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">        <span class="comment">// 使用消息转换器进行写出操作</span></span><br><span class="line">writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2、返回值解析器原理"><a href="#2、返回值解析器原理" class="headerlink" title="2、返回值解析器原理"></a>2、返回值解析器原理</h4><h3 id="-8"><a href="#-8" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151728659-68c8ce8a-1b2b-4ab0-b86d-c3a875184672.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></h3><ul><li><p>1、返回值处理器判断是否支持这种类型返回值 supportsReturnType</p></li><li><p>2、返回值处理器调用 handleReturnValue 进行处理</p></li><li><p>3、RequestResponseBodyMethodProcessor 可以处理返回值标了@ResponseBody 注解的。</p></li><li><ul><li>\1.  利用 MessageConverters 进行处理 将数据写为json</li></ul></li><li><ul><li><ul><li>1、内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li><li>2、服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，</li></ul></li></ul></li><li><ul><li><ul><li>3、SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理？</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>1、得到MappingJackson2HttpMessageConverter可以将对象写为json</li><li>2、利用MappingJackson2HttpMessageConverter将对象转为json再写出去。</li></ul></li></ul></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163005521-a20d1d8e-0494-43d0-8135-308e7a22e896.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_32,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h3 id="1-2、SpringMVC到底支持哪些返回值"><a href="#1-2、SpringMVC到底支持哪些返回值" class="headerlink" title="1.2、SpringMVC到底支持哪些返回值"></a>1.2、SpringMVC到底支持哪些返回值</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line">有 <span class="meta">@ModelAttribute</span> 且为对象类型的</span><br><span class="line"><span class="meta">@ResponseBody</span> 注解 ---&gt; RequestResponseBodyMethodProcessor；</span><br></pre></td></tr></tbody></table></figure><h3 id="1-3、HTTPMessageConverter原理"><a href="#1-3、HTTPMessageConverter原理" class="headerlink" title="1.3、HTTPMessageConverter原理"></a>1.3、HTTPMessageConverter原理</h3><h4 id="1、MessageConverter规范"><a href="#1、MessageConverter规范" class="headerlink" title="1、MessageConverter规范"></a>1、MessageConverter规范</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163447900-e2748217-0f31-4abb-9cce-546b4d790d0b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>HttpMessageConverter: 看是否支持将 此 Class类型的对象，转为MediaType类型的数据。</p><p>例子：Person对象转为JSON。或者 JSON转为Person</p><h4 id="2、默认的MessageConverter"><a href="#2、默认的MessageConverter" class="headerlink" title="2、默认的MessageConverter"></a>2、默认的MessageConverter</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163584708-e19770d6-6b35-4caa-bf21-266b73cb1ef1.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>0 - 只支持Byte类型的</p><p>1 - String</p><p>2 - String</p><p>3 - Resource</p><p>4 - ResourceRegion</p><p>5 - DOMSource.*<em>class *</em> SAXSource.<strong>class</strong>) \ StAXSource.**class **StreamSource.**class **Source.<strong>class</strong></p><p><strong>6 -</strong> MultiValueMap</p><p>7 - <strong>true</strong> </p><p><strong>8 - true</strong></p><p><strong>9 - 支持注解方式xml处理的。</strong></p><p>最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的jackson的objectMapper转换的）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605164243168-1a31e9af-54a4-463e-b65a-c28ca7a8a2fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_34,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h2 id="2、内容协商"><a href="#2、内容协商" class="headerlink" title="2、内容协商"></a>2、内容协商</h2><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p><h3 id="1、引入xml依赖"><a href="#1、引入xml依赖" class="headerlink" title="1、引入xml依赖"></a>1、引入xml依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、postman分别测试返回json和xml"><a href="#2、postman分别测试返回json和xml" class="headerlink" title="2、postman分别测试返回json和xml"></a>2、postman分别测试返回json和xml</h3><p>只需要改变请求头中Accept字段。Http协议中规定的，告诉服务器本客户端可以接收的数据类型。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173127653-8a06cd0f-b8e1-4e22-9728-069b942eba3f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_33,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h3 id="3、开启浏览器参数方式内容协商功能"><a href="#3、开启浏览器参数方式内容协商功能" class="headerlink" title="3、开启浏览器参数方式内容协商功能"></a>3、开启浏览器参数方式内容协商功能</h3><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span>  <span class="comment">#开启请求参数内容协商模式</span></span><br></pre></td></tr></tbody></table></figure><p>发请求： <a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=json</a></p><p><a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=</a>xml</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230907471-b0ed34bc-6782-40e7-84b7-615726312f01.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>确定客户端接收什么样的内容类型；</p><p>1、Parameter策略优先确定是要返回json数据（获取请求头中的format的值）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605231074299-25f5b062-2de1-4a09-91bf-11e018d6ec0e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>2、最终进行内容协商返回给客户端json即可。</p><h3 id="4、内容协商原理"><a href="#4、内容协商原理" class="headerlink" title="4、内容协商原理"></a>4、内容协商原理</h3><ul><li><p>1、判断当前响应头中是否已经有确定的媒体类型。MediaType</p></li><li><p><strong>2、获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段）【application/xml】</strong></p></li><li><ul><li><strong>contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略</strong></li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230462280-ef98de47-6717-4e27-b4ec-3eb0690b55d0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li></ul></li><li><ul><li><strong>HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型</strong> </li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230546376-65dcf657-7653-4a58-837a-f5657778201a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li></ul></li><li><p>3、遍历循环所有当前系统的 <strong>MessageConverter</strong>，看谁支持操作这个对象（Person）</p></li><li><p>4、找到支持操作Person的converter，把converter支持的媒体类型统计出来。</p></li><li><p>5、客户端需要【application/xml】。服务端能力【10种、json、xml】</p></li><li><p>  <img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173876646-f63575e2-50c8-44d5-9603-c2d11a78adae.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p></li><li><p>6、进行内容协商的最佳匹配媒体类型</p></li><li><p>7、用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173657818-73331882-6086-490c-973b-af46ccf07b32.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>导入了jackson处理xml的包，xml的converter就会自动进来</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">WebMvcConfigurationSupport</span><br><span class="line">jackson2XmlPresent = ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.dataformat.xml.XmlMapper"</span>, classLoader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2XmlPresent) {</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) {</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">}</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(builder.build()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、自定义-MessageConverter"><a href="#5、自定义-MessageConverter" class="headerlink" title="5、自定义 MessageConverter"></a>5、自定义 MessageConverter</h3><p><strong>实现多协议数据兼容。json、xml、x-guigu</strong></p><p><strong>0、</strong>@ResponseBody 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理</p><p>1、Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理</p><p>2、所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）</p><p>3、内容协商找到最终的 <strong>messageConverter</strong>；</p><p>SpringMVC的什么功能。一个入口给容器中添加一个  WebMvcConfigurer</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() {</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{</span><br><span class="line"></span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605260623995-8b1f7cec-9713-4f94-9cf1-8dbc496bd245.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605261062877-0a27cc41-51cb-4018-a9af-4e0338a247cd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong></p><p><strong>大家考虑，上述功能除了我们完全自定义外？SpringBoot有没有为我们提供基于配置文件的快速修改媒体类型功能？怎么配置呢？【提示：参照SpringBoot官方文档web开发内容协商章节】</strong></p><h1 id="5、视图解析与模板引擎"><a href="#5、视图解析与模板引擎" class="headerlink" title="5、视图解析与模板引擎"></a>5、视图解析与模板引擎</h1><p>视图解析：<strong>SpringBoot默认不支持 JSP，需要引入第三方模板引擎技术实现页面渲染。</strong></p><h2 id="1、视图解析"><a href="#1、视图解析" class="headerlink" title="1、视图解析"></a>1、视图解析</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749039-cefbf687-4feb-441d-bad8-c6d933248d3c.png" alt="img"></p><h3 id="1、视图解析原理流程"><a href="#1、视图解析原理流程" class="headerlink" title="1、视图解析原理流程"></a>1、视图解析原理流程</h3><p>1、目标方法处理的过程中，所有数据都会被放在 <strong>ModelAndViewContainer 里面。包括数据和视图地址</strong></p><p><strong>2、方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在</strong> <strong>ModelAndViewContainer</strong> </p><p><strong>3、任何目标方法执行完成以后都会返回 ModelAndView（<strong><strong>数据和视图地址</strong></strong>）。</strong></p><p><strong>4、****processDispatchResult  处理派发结果（页面改如何响应）</strong></p><ul><li><p>1、<strong>render</strong>(<strong>mv</strong>, request, response); 进行页面渲染逻辑</p></li><li><ul><li>1、根据方法的String返回值得到 <strong>View</strong> 对象【定义了页面的渲染逻辑】</li></ul></li><li><ul><li><ul><li>1、所有的视图解析器尝试是否能根据当前返回值得到<strong>View</strong>对象</li><li>2、得到了  <strong>redirect:/main.html</strong> –&gt; Thymeleaf new <strong>RedirectView</strong>()</li></ul></li></ul></li><li><ul><li><ul><li>3、ContentNegotiationViewResolver 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li><li>4、view.render(mv.getModelInternal(), request, response);   视图对象调用自定义的render进行页面渲染工作</li></ul></li></ul></li><li><ul><li><ul><li><ul><li><strong>RedirectView 如何渲染【重定向到一个页面】</strong></li><li><strong>1、获取目标url地址</strong></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><strong>2、****response.sendRedirect(encodedURL);</strong></li></ul></li></ul></li></ul></li></ul><p><strong>视图解析：</strong></p><ul><li><ul><li><strong>返回值以 forward: 开始： new InternalResourceView(forwardUrl); –&gt;  转发****request.getRequestDispatcher(path).forward(request, response);</strong> </li><li><strong>返回值以</strong> <strong>redirect: 开始：</strong> <strong>new RedirectView() –》 render就是重定向</strong> </li></ul></li><li><ul><li><strong>返回值是普通字符串： new ThymeleafView（）—&gt;</strong> </li></ul></li></ul><p>自定义视图解析器+自定义视图； <strong>大厂学院。</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605680247945-088b0f17-185c-490b-8889-103e8b4d8c07.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679959020-54b96fe7-f2fc-4b4d-a392-426e1d5413de.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679471537-7db702dc-b165-4dc6-b64a-26459ee5fd6c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679913592-151a616a-c754-4da3-a2c1-91dc0230a48d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h2 id="2、模板引擎-Thymeleaf"><a href="#2、模板引擎-Thymeleaf" class="headerlink" title="2、模板引擎-Thymeleaf"></a>2、模板引擎-Thymeleaf</h2><h3 id="1、thymeleaf简介"><a href="#1、thymeleaf简介" class="headerlink" title="1、thymeleaf简介"></a>1、thymeleaf简介</h3><p>Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text.</p><p><strong>现代化、服务端Java模板引擎</strong></p><h3 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h3><h4 id="1、表达式"><a href="#1、表达式" class="headerlink" title="1、表达式"></a>1、表达式</h4><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td>生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><h4 id="2、字面量"><a href="#2、字面量" class="headerlink" title="2、字面量"></a>2、字面量</h4><p>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></p><p>空值: <strong>null</strong></p><p>变量： one，two，…. 变量不能有空格</p><h4 id="3、文本操作"><a href="#3、文本操作" class="headerlink" title="3、文本操作"></a>3、文本操作</h4><p>字符串拼接: <strong>+</strong></p><p>变量替换: <strong>|The name is ${name}|</strong> </p><h4 id="4、数学运算"><a href="#4、数学运算" class="headerlink" title="4、数学运算"></a>4、数学运算</h4><p>运算符: + , - , * , / , %</p><h4 id="5、布尔运算"><a href="#5、布尔运算" class="headerlink" title="5、布尔运算"></a>5、布尔运算</h4><p>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></p><p>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </p><h4 id="6、比较运算"><a href="#6、比较运算" class="headerlink" title="6、比较运算"></a>6、比较运算</h4><p>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> **)**等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </p><h4 id="7、条件运算"><a href="#7、条件运算" class="headerlink" title="7、条件运算"></a>7、条件运算</h4><p>If-then: <strong>(if) ? (then)</strong></p><p>If-then-else: <strong>(if) ? (then) : (else)</strong></p><p>Default: (value) <strong>?: (defaultvalue)</strong> </p><h4 id="8、特殊操作"><a href="#8、特殊操作" class="headerlink" title="8、特殊操作"></a>8、特殊操作</h4><p>无操作： _</p><h3 id="3、设置属性值-th-attr"><a href="#3、设置属性值-th-attr" class="headerlink" title="3、设置属性值-th:attr"></a>3、设置属性值-th:attr</h3><p>设置单个值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:attr</span>=<span class="string">"action=@{/subscribe}"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:attr</span>=<span class="string">"value=#{subscribe.submit}"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>设置多个值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../images/gtvglogo.png"</span>  <span class="attr">th:attr</span>=<span class="string">"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上两个的代替写法 th:xxxx</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:value</span>=<span class="string">"#{subscribe.submit}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:action</span>=<span class="string">"@{/subscribe}"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>所有h5兼容的标签写法</p><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes</a></p><h3 id="4、迭代"><a href="#4、迭代" class="headerlink" title="4、迭代"></a>4、迭代</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : ${prods}"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.name}"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.price}"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.inStock}? #{true} : #{false}"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod,iterStat : ${prods}"</span> <span class="attr">th:class</span>=<span class="string">"${iterStat.odd}? 'odd'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.name}"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.price}"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.inStock}? #{true} : #{false}"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5、条件运算"><a href="#5、条件运算" class="headerlink" title="5、条件运算"></a>5、条件运算</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:href</span>=<span class="string">"@{/product/comments(prodId=${prod.id})}"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:if</span>=<span class="string">"${not #lists.isEmpty(prod.comments)}"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"${user.role}"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#{roles.manager}"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="-9"><a href="#-9" class="headerlink" title=""></a></h1><h3 id="6、属性优先级"><a href="#6、属性优先级" class="headerlink" title="6、属性优先级"></a>6、属性优先级</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605498132699-4fae6085-a207-456c-89fa-e571ff1663da.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h1 id="-10"><a href="#-10" class="headerlink" title=""></a></h1><h2 id="3、thymeleaf使用"><a href="#3、thymeleaf使用" class="headerlink" title="3、thymeleaf使用"></a>3、thymeleaf使用</h2><h4 id="1、引入Starter"><a href="#1、引入Starter" class="headerlink" title="1、引入Starter"></a>1、引入Starter</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="2、自动配置好了thymeleaf"><a href="#2、自动配置好了thymeleaf" class="headerlink" title="2、自动配置好了thymeleaf"></a>2、自动配置好了thymeleaf</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ TemplateMode.class, SpringTemplateEngine.class })</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>{ }</span><br></pre></td></tr></tbody></table></figure><h1 id="-11"><a href="#-11" class="headerlink" title=""></a></h1><p>自动配好的策略</p><ul><li><p>1、所有thymeleaf的配置值都在 ThymeleafProperties</p></li><li><p>2、配置好了 <strong>SpringTemplateEngine</strong> </p></li><li><p><strong>3、配好了</strong> <strong>ThymeleafViewResolver</strong> </p></li><li><p>4、我们只需要直接开发页面</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;  <span class="comment">//xxx.html</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、页面开发"><a href="#3、页面开发" class="headerlink" title="3、页面开发"></a>3、页面开发</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> xmlns:th=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 th:text=<span class="string">"${msg}"</span>&gt;哈哈&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    &lt;a href=<span class="string">"www.atguigu.com"</span> th:href=<span class="string">"${link}"</span>&gt;去百度&lt;/a&gt;  &lt;br/&gt;</span><br><span class="line">    &lt;a href=<span class="string">"www.atguigu.com"</span> th:href=<span class="string">"@{link}"</span>&gt;去百度<span class="number">2</span>&lt;/a&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="4、构建后台管理系统"><a href="#4、构建后台管理系统" class="headerlink" title="4、构建后台管理系统"></a>4、构建后台管理系统</h2><h3 id="1、项目创建"><a href="#1、项目创建" class="headerlink" title="1、项目创建"></a>1、项目创建</h3><p>thymeleaf、web-starter、devtools、lombok</p><h3 id="2、静态资源处理"><a href="#2、静态资源处理" class="headerlink" title="2、静态资源处理"></a>2、静态资源处理</h3><p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p><h3 id="3、路径构建"><a href="#3、路径构建" class="headerlink" title="3、路径构建"></a>3、路径构建</h3><p>th:action=”@{/login}”</p><h3 id="4、模板抽取"><a href="#4、模板抽取" class="headerlink" title="4、模板抽取"></a>4、模板抽取</h3><p>th:insert/replace/include</p><h3 id="5、页面跳转"><a href="#5、页面跳转" class="headerlink" title="5、页面跳转"></a>5、页面跳转</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/login")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(User user, HttpSession session, Model model)</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.hasLength(user.getUserName()) &amp;&amp; <span class="string">"123456"</span>.equals(user.getPassword())){</span><br><span class="line">        <span class="comment">//把登陆成功的用户保存起来</span></span><br><span class="line">        session.setAttribute(<span class="string">"loginUser"</span>,user);</span><br><span class="line">        <span class="comment">//登录成功重定向到main.html;  重定向防止表单重复提交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"账号密码错误"</span>);</span><br><span class="line">        <span class="comment">//回到登录页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、数据渲染"><a href="#6、数据渲染" class="headerlink" title="6、数据渲染"></a>6、数据渲染</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/dynamic_table")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(Model model)</span></span>{</span><br><span class="line">    <span class="comment">//表格内容的遍历</span></span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="string">"123456"</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="string">"lisi"</span>, <span class="string">"123444"</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="string">"haha"</span>, <span class="string">"aaaaa"</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="string">"hehe "</span>, <span class="string">"aaddd"</span>));</span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>,users);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"table/dynamic_table"</span>;</span><br><span class="line">}</span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"display table table-bordered"</span> id=<span class="string">"hidden-table-info"</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">"gradeX"</span> th:each=<span class="string">"user,stats:${users}"</span>&gt;</span><br><span class="line">        &lt;td th:text=<span class="string">"${stats.count}"</span>&gt;Trident&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=<span class="string">"${user.userName}"</span>&gt;Internet&lt;/td&gt;</span><br><span class="line">        &lt;td &gt;[[${user.password}]]&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="6、拦截器"><a href="#6、拦截器" class="headerlink" title="6、拦截器"></a>6、拦截器</h1><h2 id="1、HandlerInterceptor-接口"><a href="#1、HandlerInterceptor-接口" class="headerlink" title="1、HandlerInterceptor 接口"></a>1、HandlerInterceptor 接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录检查</span></span><br><span class="line"><span class="comment"> * 1、配置好拦截器要拦截哪些请求</span></span><br><span class="line"><span class="comment"> * 2、把这些配置放在容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">"preHandle拦截的请求路径是{}"</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>){</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"请先登录"</span>);</span><br><span class="line"><span class="comment">//        re.sendRedirect("/");</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        log.info(<span class="string">"postHandle执行{}"</span>,modelAndView);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        log.info(<span class="string">"afterCompletion执行异常{}"</span>,ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2、配置拦截器"><a href="#2、配置拦截器" class="headerlink" title="2、配置拦截器"></a>2、配置拦截器</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、编写一个拦截器实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span></span><br><span class="line"><span class="comment"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/"</span>,<span class="string">"/login"</span>,<span class="string">"/css/**"</span>,<span class="string">"/fonts/**"</span>,<span class="string">"/images/**"</span>,<span class="string">"/js/**"</span>); <span class="comment">//放行的请求</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3、拦截器原理"><a href="#3、拦截器原理" class="headerlink" title="3、拦截器原理"></a>3、拦截器原理</h2><p>1、根据当前请求，找到<strong>HandlerExecutionChain【</strong>可以处理请求的handler以及handler的所有 拦截器】</p><p>2、先来<strong>顺序执行</strong> 所有拦截器的 preHandle方法</p><ul><li>1、如果当前拦截器prehandler返回为true。则执行下一个拦截器的preHandle</li><li>2、如果当前拦截器返回为false。直接    倒序执行所有已经执行了的拦截器的  afterCompletion；</li></ul><p><strong>3、如果任何一个拦截器返回false。直接跳出不执行目标方法</strong></p><p><strong>4、所有拦截器都返回True。执行目标方法</strong></p><p><strong>5、倒序执行所有拦截器的postHandle方法。</strong></p><p><strong>6、前面的步骤有任何异常都会直接倒序触发</strong> afterCompletion</p><p>7、页面成功渲染完成以后，也会倒序触发 afterCompletion</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605764129365-5b31a748-1541-4bee-9692-1917b3364bc6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605765121071-64cfc649-4892-49a3-ac08-88b52fb4286f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_35,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h1 id="7、文件上传"><a href="#7、文件上传" class="headerlink" title="7、文件上传"></a>7、文件上传</h1><h2 id="1、页面表单"><a href="#1、页面表单" class="headerlink" title="1、页面表单"></a>1、页面表单</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2、文件上传代码"><a href="#2、文件上传代码" class="headerlink" title="2、文件上传代码"></a>2、文件上传代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MultipartFile 自动封装上传过来的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headerImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> photos</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping("/upload")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam("email")</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestParam("username")</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart("headerImg")</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart("photos")</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"上传的信息：email={}，username={}，headerImg={}，photos={}"</span>,</span><br><span class="line">            email,username,headerImg.getSize(),photos.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!headerImg.isEmpty()){</span><br><span class="line">        <span class="comment">//保存到文件服务器，OSS服务器</span></span><br><span class="line">        String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">        headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">"H:\\cache\\"</span>+originalFilename));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(photos.length &gt; <span class="number">0</span>){</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile photo : photos) {</span><br><span class="line">            <span class="keyword">if</span>(!photo.isEmpty()){</span><br><span class="line">                String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                photo.transferTo(<span class="keyword">new</span> File(<span class="string">"H:\\cache\\"</span>+originalFilename));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3、自动配置原理"><a href="#3、自动配置原理" class="headerlink" title="3、自动配置原理"></a>3、自动配置原理</h2><p>**文件上传自动配置类-MultipartAutoConfiguration-**<strong>MultipartProperties</strong></p><ul><li><p>自动配置好了 <strong>StandardServletMultipartResolver   【文件上传解析器】</strong></p></li><li><p><strong>原理步骤</strong></p></li><li><ul><li><strong>1、请求进来使用文件上传解析器判断（</strong>isMultipart<strong>）并封装（</strong>resolveMultipart，<strong>返回</strong>MultipartHttpServletRequest<strong>）文件上传请求</strong></li><li><strong>2、参数解析器来解析请求中的文件内容封装成MultipartFile</strong></li></ul></li><li><ul><li><strong>3、将request中文件信息封装为一个Map；</strong>MultiValueMap&lt;String, MultipartFile&gt;</li></ul></li></ul><p><strong>FileCopyUtils</strong>。实现文件流的拷贝</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/upload")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam("email")</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestParam("username")</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart("headerImg")</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart("photos")</span> MultipartFile[] photos)</span></span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605847414866-32b6cc9c-5191-4052-92eb-069d652dfbf9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h1 id="8、异常处理"><a href="#8、异常处理" class="headerlink" title="8、异常处理"></a>8、异常处理</h1><h2 id="1、错误处理"><a href="#1、错误处理" class="headerlink" title="1、错误处理"></a>1、错误处理</h2><h4 id="1、默认规则"><a href="#1、默认规则" class="headerlink" title="1、默认规则"></a>1、默认规则</h4><ul><li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</p></li><li><p>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024421363-77083c34-0b0e-4698-bb72-42da351d3944.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024616835-bc491bf0-c3b1-4ac3-b886-d4ff3c9874ce.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p></li><li><p><strong>要对其进行自定义，添加</strong><code>**View**</code><strong>解析为</strong><code>**error**``** **</code></p></li><li><p>要完全替换默认行为，可以实现 <code>ErrorController </code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</p></li><li><p>error/下的4xx，5xx页面会被自动解析；</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024592756-d4ab8a6b-ec37-426b-8b39-010463603d57.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li></ul></li></ul><h4 id="2、定制错误处理逻辑"><a href="#2、定制错误处理逻辑" class="headerlink" title="2、定制错误处理逻辑"></a>2、定制错误处理逻辑</h4><ul><li><p>自定义错误页</p></li><li><ul><li>error/404.html   error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li></ul></li><li><p>@ControllerAdvice+@ExceptionHandler处理全局异常；底层是 <strong>ExceptionHandlerExceptionResolver 支持的</strong></p></li><li><p>@ResponseStatus+自定义异常 ；底层是 <strong>ResponseStatusExceptionResolver ，把responsestatus注解的信息底层调用</strong> <strong>response.sendError(statusCode, resolvedReason)；tomcat发送的/error</strong></p></li><li><p>Spring底层的异常，如 参数类型转换异常；<strong>DefaultHandlerExceptionResolver 处理框架底层的异常。</strong></p></li><li><ul><li>response.sendError(HttpServletResponse.<strong>SC_BAD_REQUEST</strong>, ex.getMessage()); </li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114118010-f4aaf5ee-2747-4402-bc82-08321b2490ed.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li></ul></li><li><p>自定义实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则</p></li><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114688649-e6502134-88b3-48db-a463-04c23eddedc7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li></ul></li><li><p><strong>ErrorViewResolver</strong>  实现自定义处理异常；</p></li><li><ul><li>response.sendError 。error请求就会转给controller</li><li>你的异常没有任何人能处理。tomcat底层 response.sendError。error请求就会转给controller</li></ul></li><li><ul><li><strong>basicErrorController 要去的页面地址是</strong> <strong>ErrorViewResolver</strong>  ；</li></ul></li></ul><h4 id="3、异常处理自动配置原理"><a href="#3、异常处理自动配置原理" class="headerlink" title="3、异常处理自动配置原理"></a>3、异常处理自动配置原理</h4><ul><li><p><strong>ErrorMvcAutoConfiguration  自动配置异常处理规则</strong></p></li><li><ul><li><strong>容器中的组件：类型：DefaultErrorAttributes -&gt;</strong> <strong>id：errorAttributes</strong></li></ul></li><li><ul><li><ul><li><strong>public class</strong> <strong>DefaultErrorAttributes</strong> <strong>implements</strong> <strong>ErrorAttributes</strong>, <strong>HandlerExceptionResolver</strong></li><li><strong>DefaultErrorAttributes</strong>：定义错误页面中可以包含哪些数据。</li></ul></li></ul></li><li><ul><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044430037-8d599e30-1679-407c-96b7-4df345848fa4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044487738-8cb1dcda-08c5-4104-a634-b2468512e60f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_31,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li></ul></li></ul></li><li><ul><li><strong>容器中的组件：类型：****BasicErrorController –&gt; id：basicErrorController（json+白页 适配响应）</strong></li></ul></li><li><ul><li><ul><li><strong>处理默认</strong> <strong>/error 路径的请求；页面响应</strong> <strong>new</strong> ModelAndView(<strong>“error”</strong>, model)；</li><li><strong>容器中有组件 View</strong>-&gt;<strong>id是error</strong>；（响应默认错误页）</li></ul></li></ul></li><li><ul><li><ul><li>容器中放组件 <strong>BeanNameViewResolver（视图解析器）；按照返回的视图名作为组件的id去容器中找View对象。</strong></li></ul></li></ul></li><li><ul><li><strong>容器中的组件：</strong>类型：<strong>DefaultErrorViewResolver -&gt; id：</strong>conventionErrorViewResolver</li></ul></li><li><ul><li><ul><li>如果发生错误，会以HTTP的状态码 作为视图页地址（viewName），找到真正的页面</li><li>error/404、5xx.html</li></ul></li></ul></li></ul><p>如果想要返回页面；就会找error视图【<strong>StaticView</strong>】。(默认是一个白页)</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043870164-3770e116-344f-448e-8bff-8f32438edc9a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img">写出去json</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043904074-50b7f088-2d2b-4da5-85e2-0a756da74dca.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_35,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"> 错误页</p><h4 id="4、异常处理步骤流程"><a href="#4、异常处理步骤流程" class="headerlink" title="4、异常处理步骤流程"></a>4、异常处理步骤流程</h4><p>1、执行目标方法，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束；并且用 <strong>dispatchException</strong> </p><p>2、进入视图解析流程（页面渲染？） </p><p>processDispatchResult(processedRequest, response, mappedHandler, <strong>mv</strong>, <strong>dispatchException</strong>);</p><p>3、<strong>mv</strong> = <strong>processHandlerException</strong>；处理handler发生的异常，处理完成返回ModelAndView；</p><ul><li><p>1、遍历所有的 <strong>handlerExceptionResolvers，看谁能处理当前异常【<strong><strong>HandlerExceptionResolver处理器异常解析器</strong></strong>】</strong></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047252166-ce71c3a1-0e0e-4499-90f4-6d80014ca19f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p></li><li><p><strong>2、系统默认的  异常解析器；</strong></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047109161-c68a46c1-202a-4db1-bbeb-23fcae49bbe9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p></li><li><ul><li><strong>1、DefaultErrorAttributes先来处理异常。把异常信息保存到rrequest域，并且返回null；</strong></li><li><strong>2、默认没有任何人能处理异常，所以异常会被抛出</strong></li></ul></li><li><ul><li><ul><li><strong>1、如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理</strong></li><li><strong>2、解析错误视图；遍历所有的</strong>  <strong>ErrorViewResolver  看谁能解析。</strong></li></ul></li></ul></li><li><ul><li><ul><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047900473-e31c1dc3-7a5f-4f70-97de-5203429781fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li><li><strong>3、默认的</strong> <strong>DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html</strong> </li></ul></li></ul></li><li><ul><li><ul><li><strong>4、模板引擎最终响应这个页面</strong> <strong>error/500.html</strong> </li></ul></li></ul></li></ul><h1 id="9、Web原生组件注入（Servlet、Filter、Listener）"><a href="#9、Web原生组件注入（Servlet、Filter、Listener）" class="headerlink" title="9、Web原生组件注入（Servlet、Filter、Listener）"></a>9、Web原生组件注入（Servlet、Filter、Listener）</h1><h2 id="1、使用Servlet-API"><a href="#1、使用Servlet-API" class="headerlink" title="1、使用Servlet API"></a>1、使用Servlet API</h2><p>@ServletComponentScan(basePackages = <strong>“com.atguigu.admin”</strong>) :指定原生Servlet组件都放在那里</p><p>@WebServlet(urlPatterns = <strong>“/my”</strong>)：效果：直接响应，<strong>没有经过Spring的拦截器？</strong></p><p>@WebFilter(urlPatterns={<strong>“/css/*“</strong>,<strong>“/images/*“</strong>})</p><p>@WebListener</p><p>推荐可以这种方式；</p><p>扩展：DispatchServlet 如何注册进来</p><ul><li><p>容器中自动配置了  DispatcherServlet  属性绑定到 WebMvcProperties；对应的配置文件配置项是 <strong>spring.mvc。</strong></p></li><li><p><strong>通过</strong> <strong>ServletRegistrationBean</strong><dispatcherservlet> 把 DispatcherServlet  配置进来。</dispatcherservlet></p></li><li><p>默认映射的是 / 路径。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606284869220-8b63d54b-39c4-40f6-b226-f5f095ef9304.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_32,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>Tomcat-Servlet；</p><p>多个Servlet都能处理到同一层路径，精确优选原则</p><p>A： /my/</p><p>B： /my/1</p><h2 id="2、使用RegistrationBean"><a href="#2、使用RegistrationBean" class="headerlink" title="2、使用RegistrationBean"></a>2、使用RegistrationBean</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ServletRegistrationBean`, `FilterRegistrationBean`, and `ServletListenerRegistrationBean</span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegistConfig {</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean myServlet(){</span><br><span class="line">        MyServlet myServlet = new MyServlet();</span><br><span class="line"></span><br><span class="line">        return new ServletRegistrationBean(myServlet,"/my","/my02");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean myFilter(){</span><br><span class="line"></span><br><span class="line">        MyFilter myFilter = new MyFilter();</span><br><span class="line">//        return new FilterRegistrationBean(myFilter,myServlet());</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList("/my","/css/*"));</span><br><span class="line">        return filterRegistrationBean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean myListener(){</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = new MySwervletContextListener();</span><br><span class="line">        return new ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="10、嵌入式Servlet容器"><a href="#10、嵌入式Servlet容器" class="headerlink" title="10、嵌入式Servlet容器"></a>10、嵌入式Servlet容器</h1><h2 id="1、切换嵌入式Servlet容器"><a href="#1、切换嵌入式Servlet容器" class="headerlink" title="1、切换嵌入式Servlet容器"></a>1、切换嵌入式Servlet容器</h2><ul><li><p>默认支持的webServer</p></li><li><ul><li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code></li><li><code>ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器</code></li></ul></li><li><p>切换服务器</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606280937533-504d0889-b893-4a01-af68-2fc31ffce9fc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_26,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>原理</p></li><li><ul><li>SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat</li><li>web应用会创建一个web版的ioc容器 <code>ServletWebServerApplicationContext</code> </li></ul></li><li><ul><li><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <code>**ServletWebServerFactory**``（Servlet 的web服务器工厂---&gt; Servlet 的web服务器）</code> </li><li>SpringBoot底层默认有很多的WebServer工厂；<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code></li></ul></li><li><ul><li><code>底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration</code></li><li><code>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）</code></li></ul></li><li><ul><li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory</code></li><li><code>TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();</code></li></ul></li><li><ul><li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）</code></li></ul></li><li><p>``</p></li></ul><h2 id="2、定制Servlet容器"><a href="#2、定制Servlet容器" class="headerlink" title="2、定制Servlet容器"></a>2、定制Servlet容器</h2><ul><li><p>实现  <strong>WebServerFactoryCu</strong>stomizer<configurableservletwebserverfactory> </configurableservletwebserverfactory></p></li><li><ul><li>把配置文件的值和<code>**ServletWebServerFactory 进行绑定**</code></li></ul></li><li><p>修改配置文件 <strong>server.xxx</strong></p></li><li><p>直接自定义 <strong>ConfigurableServletWebServerFactory</strong> </p></li></ul><p><strong>xxxxx<strong><strong>Customizer</strong></strong>：定制化器，可以改变xxxx的默认规则</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> </span>{</span><br><span class="line">        server.setPort(<span class="number">9000</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="11、定制化原理"><a href="#11、定制化原理" class="headerlink" title="11、定制化原理"></a>11、定制化原理</h1><h2 id="1、定制化的常见方式"><a href="#1、定制化的常见方式" class="headerlink" title="1、定制化的常见方式"></a>1、定制化的常见方式</h2><ul><li><p>修改配置文件；</p></li><li><p><strong>xxxxxCustomizer；</strong></p></li><li><p><strong>编写自定义的配置类   xxxConfiguration；+</strong> <strong>@Bean替换、增加容器中默认组件；视图解析器</strong> </p></li><li><p><strong>Web应用 编写一个配置类实现</strong> <strong>WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能</p></li><li><ul><li>原理</li><li>1、WebMvcAutoConfiguration  默认的SpringMVC的自动配置功能类。静态资源、欢迎页…..</li></ul></li><li><ul><li>2、一旦使用 @EnableWebMvc 、。会 @Import(DelegatingWebMvcConfiguration.<strong>class</strong>)</li><li>3、<strong>DelegatingWebMvcConfiguration</strong> 的 作用，只保证SpringMVC最基本的使用</li></ul></li><li><ul><li><ul><li>把所有系统中的 WebMvcConfigurer 拿过来。所有功能的定制都是这些 WebMvcConfigurer  合起来一起生效</li><li>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</li></ul></li></ul></li><li><ul><li><ul><li><strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends</strong> <strong>WebMvcConfigurationSupport</strong></li></ul></li></ul></li><li><ul><li>4、<strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须  @ConditionalOnMissingBean(<strong>WebMvcConfigurationSupport</strong>.<strong>class</strong>)</li><li>5、@EnableWebMvc  导致了 <strong>WebMvcAutoConfiguration  没有生效。</strong></li></ul></li><li><p>… …</p></li></ul><h2 id="2、原理分析套路"><a href="#2、原理分析套路" class="headerlink" title="2、原理分析套路"></a>2、原理分析套路</h2><p><strong>场景starter</strong> <strong>- xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties –</strong> <strong>绑定配置文件项</strong> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习笔记"><a href="#Vue学习笔记" class="headerlink" title="Vue学习笔记"></a>Vue学习笔记</h1><h1 id="一、如何创建一个Vue程序"><a href="#一、如何创建一个Vue程序" class="headerlink" title="一、如何创建一个Vue程序"></a>一、如何创建一个Vue程序</h1><p>在HTML页面中引入如下命令行：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在HTML页面中添加标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  {{ message }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在js页面中添加Vue实例--&gt;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="attr">data</span>: {</span><br><span class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue!'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h1 id="二、Vue实例"><a href="#二、Vue实例" class="headerlink" title="二、Vue实例"></a>二、Vue实例</h1><h2 id="2-1-el挂载点"><a href="#2-1-el挂载点" class="headerlink" title="2.1 el挂载点"></a>2.1 el挂载点</h2><ul><li>作用范围是HTML标签内，通过两个大括号标识变量，如</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  {{ message }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="attr">data</span>: {</span><br><span class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue!'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li><p>el挂载点可用于任意一种选择器，一般用<strong>id选择器</strong></p></li><li><p>el挂载点不可作用于单标签，以及HTML标签和body标签，一般建议用<strong>div标签</strong></p></li></ul><h2 id="2-2-data数据对象"><a href="#2-2-data数据对象" class="headerlink" title="2.2 data数据对象"></a>2.2 data数据对象</h2><ul><li>如何操作数组和对象类型数据：</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    {{ message }}</span><br><span class="line">    {{user.name}},{{user.mobile}}</span><br><span class="line">    {{hobby[0]}},{{hobby[1]}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">message</span>:<span class="string">"你好"</span>,</span><br><span class="line">            <span class="attr">user</span>:{</span><br><span class="line">                <span class="attr">name</span>:<span class="string">"陈豪"</span>,</span><br><span class="line">                <span class="attr">mobile</span>:<span class="string">"15819552366"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="attr">hobby</span>:[<span class="string">"电影"</span>,<span class="string">"音乐"</span>,<span class="string">"游戏"</span>]</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-methods方法体"><a href="#2-3-methods方法体" class="headerlink" title="2.3 methods方法体"></a>2.3 methods方法体</h2><ul><li>用来定义方法</li><li>方法内部可定义函数，用来执行具体的操作</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">            <span class="attr">doIt</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                alert(<span class="string">"完成"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="三、本地应用"><a href="#三、本地应用" class="headerlink" title="三、本地应用"></a>三、本地应用</h1><h2 id="3-1-Vue指令"><a href="#3-1-Vue指令" class="headerlink" title="3.1 Vue指令"></a>3.1 Vue指令</h2><h3 id="3-1-1-v-text"><a href="#3-1-1-v-text" class="headerlink" title="3.1.1 v-text"></a>3.1.1 v-text</h3><ul><li>用来设置标签的文本值</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">"message+'!'"</span>&gt;</span>哈利波特<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{message+"!"}}哈利波特<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="attr">data</span>: {</span><br><span class="line">    <span class="attr">message</span>: <span class="string">'你好'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>以下为运行结果</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你好!</span><br><span class="line">你好!哈利波特</span><br></pre></td></tr></tbody></table></figure><p>以上两种方式都可以，但是<strong>v-text会替换掉所有的内容</strong>，所以如果要进行部分替换，建议用插值表达（即两个大括号）</p><h3 id="3-1-2-v-html"><a href="#3-1-2-v-html" class="headerlink" title="3.1.2 v-html"></a>3.1.2 v-html</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"context"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"context"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">context</span>:<span class="string">"&lt;a href='http://www.baidu.com'&gt;点击跳转&lt;/a&gt;"</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>运行结果如下：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href='http://www.baidu.com'&gt;点击跳转&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">点击跳转//此处有超链接</span><br></pre></td></tr></tbody></table></figure><ul><li>当数据对象是普通的文本时，v-html与v-text的效果是一样的</li><li>但是当数据对象中含有html标签的时候，v-html会将html标签解析出来</li></ul><h3 id="3-1-3-v-on"><a href="#3-1-3-v-on" class="headerlink" title="3.1.3 v-on"></a>3.1.3 v-on</h3><ul><li>v-on是用来绑定事件的</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">v-on:click</span>=<span class="string">"doIt"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> @<span class="attr">click</span>=<span class="string">"doIt2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">            <span class="attr">doIt</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                alert(<span class="string">"完成"</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">doIt2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                alert(<span class="string">"恭喜"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>@与v-on具有同样效果</li><li>methods内部可定义多个函数</li><li>函数可传入参数</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> @<span class="attr">click</span>=<span class="string">"doIt(666)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:{</span></span><br><span class="line"><span class="javascript">            <span class="attr">doIt</span>:<span class="function"><span class="keyword">function</span>(<span class="params">p1</span>)</span>{<span class="comment">//可传入多个参数</span></span></span><br><span class="line"><span class="javascript">                alert(p1)<span class="comment">//上面传入的实参是能够被传递到这里来的，输出的是666</span></span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>事件修饰符：事件的后面加上.修饰符可以对事件进行修饰</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"doIt"</span>&gt;</span>//enter修饰符的作用是按下enter时触发，还有其他很多修饰符</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:{</span></span><br><span class="line"><span class="javascript">            <span class="attr">doIt</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"你好"</span>)</span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-4-this指令"><a href="#3-1-4-this指令" class="headerlink" title="3.1.4 this指令"></a>3.1.4 this指令</h3><ul><li>this指令用来操作取得我们定义的元素，这是Vue的特色，即<strong>不通过操作dom元素改变页面，而是通过操作数据改变页面</strong></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"changeFood"</span>&gt;</span>{{food}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">food</span>:<span class="string">"番茄炒蛋"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">            <span class="attr">changeFood</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                <span class="built_in">this</span>.food+=<span class="string">"好吃！"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>运行结果：每单击一次 “番茄炒蛋” 文本，后面就会加上一个 “好吃！”</li></ul><h3 id="3-1-5-v-show"><a href="#3-1-5-v-show" class="headerlink" title="3.1.5 v-show"></a>3.1.5 v-show</h3><ul><li>v-show可以根据true和false切换元素的显示状态，<strong>但不会删除dom元素</strong></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"图片开关"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:\Users\95671\Desktop\五条悟.jpg"</span> <span class="attr">v-show</span>=<span class="string">"onoff"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">onoff</span>:<span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">            <span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                <span class="built_in">this</span>.onoff=!<span class="built_in">this</span>.onoff</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-6-v-if"><a href="#3-1-6-v-if" class="headerlink" title="3.1.6 v-if"></a>3.1.6 v-if</h3><ul><li><p>v-if可以根据true和false切换元素的显示状态，<strong>是通过添加或删除dom元素实现显示或隐藏的</strong></p></li><li><p><strong>如果需要非常频繁地切换，则使用 v-show 较好，如果在运行时条件很少改变，则使用 v-if 较好</strong></p></li></ul><h3 id="3-1-7-v-bind"><a href="#3-1-7-v-bind" class="headerlink" title="3.1.7 v-bind"></a>3.1.7 v-bind</h3><ul><li>v-bind可以绑定元素的属性，比如src，title，class</li><li>v-bind的格式：<strong>v-bind：属性名=“定义好的属性值”</strong>，v-bind可以直接省略，写成<strong>：属性名=“定义好的属性值”</strong></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--写一个css样式绑定active类，显示红色边框--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.active</span>{</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定单击事件，同时绑定class属性，是否为actice类取决于isActive是否为true--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:\Users\95671\Desktop\五条悟.jpg"</span> <span class="attr">:class</span>=<span class="string">"{active:isActive}"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">onoff</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">isActive</span>:<span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">            <span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                <span class="built_in">this</span>.isActive=!<span class="built_in">this</span>.isActive</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-8-v-for"><a href="#3-1-8-v-for" class="headerlink" title="3.1.8 v-for"></a>3.1.8 v-for</h3><ul><li><p>可以根据数据生成列表结构，常用数组类型的数据来生成</p></li><li><p>语法规则：v-for=”(item,index) in arr”，其中arr是数据名称，与data中定义数据名一致，in是固定的，item是遍历出来后的每一项的名字，可以更改，index是数组下标，也是可以自定义名字的，也可不写，直接写成v-for=”item in arr”</p></li><li><p>v-for会将所在标签中的所有内容拷贝出若干份</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in arr"</span>&gt;</span></span><br><span class="line">          {{inde}}{{item}}</span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">arr</span>:[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>]</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>运行结果：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br><span class="line">44</span><br><span class="line">55</span><br></pre></td></tr></tbody></table></figure><ul><li>若数组中存的是对象数据，则用.属性值的方法</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in user"</span>&gt;</span></span><br><span class="line">          {{item.name}}</span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span><br><span class="line">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="attr">data</span>:{</span><br><span class="line">            <span class="attr">arr</span>:[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>],</span><br><span class="line">            <span class="attr">user</span>:[</span><br><span class="line">                {<span class="attr">name</span>:<span class="string">"chenhao"</span>},</span><br><span class="line">                {<span class="attr">name</span>:<span class="string">"xlx"</span>}</span><br><span class="line">           ]</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">methods</span>:{</span><br><span class="line">        </span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>运行结果</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chenhao</span><br><span class="line">xlx</span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-9-v-model"><a href="#3-1-9-v-model" class="headerlink" title="3.1.9 v-model"></a>3.1.9 v-model</h3><ul><li>v-model指令用于获取和设置表单元素的值<strong>（双向数据绑定）</strong></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{massage}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:{</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>:<span class="string">"你好"</span></span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>运行后，文本框内会出现“你好”，当我们修改文本框中的内容时，<strong>message的值也会跟着改变，这就是双向数据绑定的含义</strong></li></ul><h2 id="3-2-项目：小豪笔记本"><a href="#3-2-项目：小豪笔记本" class="headerlink" title="3.2 项目：小豪笔记本"></a>3.2 项目：小豪笔记本</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>小豪记事本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"noindex, nofollow"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"googlebot"</span> <span class="attr">content</span>=<span class="string">"noindex, nofollow"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/index.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 主体区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"todoapp"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>小豪记事本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span> @<span class="attr">keyup.enter</span>=<span class="string">"add"</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">placeholder</span>=<span class="string">"请输入任务"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"new-todo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"todo"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"index"</span>&gt;</span>{{index+1}}.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">"remove(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 统计和清空 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span> <span class="attr">v-show</span>=<span class="string">"this.list.length"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>{{this.list.length}}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> items left</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> @<span class="attr">click</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line">        Clear</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;footer class="info"&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;</span></span><br><span class="line"><span class="comment">      &lt;a href="http://www.itheima.com/"&gt;&lt;img src="./img/black.png" alt="" /&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/p&gt;</span></span><br><span class="line"><span class="comment">  &lt;/footer&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>:<span class="string">"#todoapp"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>:{</span></span><br><span class="line"><span class="javascript">        <span class="attr">list</span>:[<span class="string">"吃饭饭"</span>,<span class="string">"睡觉觉"</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">inputValue</span>:<span class="string">"今天要做点什么呢..."</span></span></span><br><span class="line"><span class="javascript">      },</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>:{</span></span><br><span class="line"><span class="javascript">        <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.inputValue)</span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        <span class="attr">remove</span>:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.splice(index,<span class="number">1</span>)<span class="comment">//表示删除第index个，每次删除1个，若不加1这个参数，则会将内容相同的所有项都删掉</span></span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        <span class="attr">clear</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.list.splice(0,this.list.length)</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list=[];</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="四、网络应用"><a href="#四、网络应用" class="headerlink" title="四、网络应用"></a>四、网络应用</h1><h2 id="4-1-axios"><a href="#4-1-axios" class="headerlink" title="4.1 axios"></a>4.1 axios</h2><ul><li>引入axios</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>在导入axios之后，会在页面上注册一个全局的axios对象</p></li><li><p>axios使用格式：</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   axios.get(地址?key=value&amp;key2=values).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>{},<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{})</span></span><br><span class="line"><span class="javascript">   axios.post(地址,{<span class="attr">key</span>:value,<span class="attr">key2</span>:value2}).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>{},<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{})</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>使用示例：</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取笑话"</span> @<span class="attr">click</span>=<span class="string">"getJoke"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> {{ joke }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 官网提供的 axios 在线地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            接口:随机获取一条笑话</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            请求地址:https://autumnfish.cn/api/joke</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            请求方法:get</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            请求参数:无</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            响应内容:随机笑话</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:{</span></span><br><span class="line"><span class="javascript">                <span class="attr">joke</span>:<span class="string">"很好笑的笑话"</span></span></span><br><span class="line"><span class="javascript">            },</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">                <span class="attr">getJoke</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//此处打印出来的joke是"很好笑的笑话"，说明this还是指的页面</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.joke);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> that = <span class="built_in">this</span>;<span class="comment">//由于this会改变，所以将其保存起来</span></span></span><br><span class="line"><span class="javascript">                    axios.get(<span class="string">"https://autumnfish.cn/api/joke"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>{</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//此处打印出来的joke是undefined，但是这个this指的不是response</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="built_in">this</span>.joke);</span></span><br><span class="line"><span class="javascript">                        that.joke = response.data;</span></span><br><span class="line"><span class="javascript">                    },<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{  })</span></span><br><span class="line"><span class="javascript">                }</span></span><br><span class="line"><span class="javascript">            },</span></span><br><span class="line"><span class="javascript">        })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/21/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/21/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>spring boot学习笔记</p><h1 id="复制项目"><a href="#复制项目" class="headerlink" title="复制项目:"></a>复制项目:</h1><p>复制某个module，改名，将里面的除了src和pom.xml的其他文件都删掉，打开pom将里面其<artifactid>的名字也改了，然后将下面两项删掉（因为如果没有这两项他就会和去找artifactId），或者也改名</artifactid></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot_learn_01<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>springboot_learn_01<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后要复制项目时，上面对应的名字都要修改成新module的名字，然后在idea中引入</p><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211121153355584.png" alt="image-20211121153355584"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/19/ssm%E6%95%B4%E5%90%88/"/>
      <url>/2021/11/19/ssm%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>ssm整合</p><h1 id="一、Spring整合Mybatis"><a href="#一、Spring整合Mybatis" class="headerlink" title="一、Spring整合Mybatis"></a>一、Spring整合Mybatis</h1><ul><li>Maven依赖：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet-JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven资源过滤设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>创建数据库</li><li>编写对应实体类</li><li>编写mybaits-config.xml</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>//此处的配置是可以放到spring配置文件中去做的</span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ch.pojo"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/kuang/dao/*.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>编写applicationContext.xml</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>编写数据库配置文件 database.properties</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><ul><li>编写Dao层的 Mapper接口</li><li>编写接口对应的 Mapper.xml 文件</li><li>编写Service层的接口和实现类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>{</span><br><span class="line">       <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>编写spring配置文件来整合Mybatis</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="二、Spring整合service层"><a href="#二、Spring整合service层" class="headerlink" title="二、Spring整合service层"></a>二、Spring整合service层</h1><ul><li>编写spring-service.xml配置文件</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>是</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/19/Mybatis-Spring%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/19/Mybatis-Spring%E6%95%B4%E5%90%88%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Mybatis-Spring</p><h1 id="一、Mybatis-Spring概述"><a href="#一、Mybatis-Spring概述" class="headerlink" title="一、Mybatis-Spring概述"></a>一、Mybatis-Spring概述</h1><ul><li>什么是Mybatis-Spring</li></ul><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中</p><ul><li>MyBatis-Spring 需要以下版本：</li></ul><table><thead><tr><th align="left">MyBatis-Spring</th><th align="left">MyBatis</th><th align="left">Spring 框架</th><th align="left">Spring Batch</th><th align="left">Java</th></tr></thead><tbody><tr><td align="left">2.0</td><td align="left">3.5+</td><td align="left">5.0+</td><td align="left">4.0+</td><td align="left">Java 8+</td></tr><tr><td align="left">1.3</td><td align="left">3.4+</td><td align="left">3.2.2+</td><td align="left">2.1+</td><td align="left">Java 6+</td></tr></tbody></table><ul><li>何如引入依赖：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="二、整合实现"><a href="#二、整合实现" class="headerlink" title="二、整合实现"></a>二、整合实现</h1><h2 id="2-1-整合实现方式一"><a href="#2-1-整合实现方式一" class="headerlink" title="2.1 整合实现方式一"></a>2.1 整合实现方式一</h2><ul><li>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SqlSessionFactory需要一个 DataSource（数据源）。这可以是任意的 DataSource，只需要和配置其它 Spring 数据库连接一样配置它就可以了。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这是任意的一个dataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在创建sqlSessionFactory时,上述的配置已经足够,但也可以增加其他设置,如:</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--绑定mapper.xml文件，此时在mybatis配置文件中就不用再注册对应的mapper了，否则会报错--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/ch/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configLocation用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基础配置非常有用。通常，基础配置指的是 &lt; settings&gt; 或 &lt; typeAliases&gt;元素。需要注意的是，这个配置文件并不需要是一个完整的 MyBatis 配置。确切地说，任何环境配置（&lt;environments&gt;），数据源（&lt;DataSource&gt;）和 MyBatis 的事务管理器（&lt;transactionManager&gt;）都会被忽略。SqlSessionFactoryBean 会创建它自有的 MyBatis 环境配置（Environment），并按要求设置自定义环境的值。--&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>注册sqlSessionTemplate，关联sqlSessionFactory</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--利用构造器注入,因为sqlSessionTemplate中没有set方法,index表示第几个参数--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>增加Dao接口的实现类；私有化sqlSessionTemplate</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = "userDao")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sqlSession不用我们自己创建了，Spring来管理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>{</span><br><span class="line">        UserMapper mapper = sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UserTest</span><span class="params">()</span></span>{</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-dao.xml"</span>);</span><br><span class="line">    UserMapper mapper = (UserMapper)context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) {</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-整合实现方式二"><a href="#2-2-整合实现方式二" class="headerlink" title="2.2 整合实现方式二"></a>2.2 整合实现方式二</h2><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory ，这样就不再需要管理SqlSessionTemplate </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承SqlSessionDaoSupport</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>{</span><br><span class="line">        UserMapper mapper =getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在spring配置文件中将SqlSessionFactory注入</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.ch.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-整合实现方式三"><a href="#2-3-整合实现方式三" class="headerlink" title="2.3 整合实现方式三"></a>2.3 整合实现方式三</h2><p>在spring配置文件中做如下配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!-- 注入sqlSessionFactory，此处的value要对应注册的sqlSessionFactoryd--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/17/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/17/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Spring5学习笔记</p><h2 id="一、Spring框架概述"><a href="#一、Spring框架概述" class="headerlink" title="一、Spring框架概述"></a>一、Spring框架概述</h2><h2 id="1-1-什么是Spring"><a href="#1-1-什么是Spring" class="headerlink" title="1.1 什么是Spring"></a>1.1 什么是Spring</h2><ul><li>Spring 是轻量级的开源的 JavaEE 框架</li><li>Spring 可以解决企业应用开发的复杂性</li><li>Spring 有两个核心部分：IOC 和 Aop<ul><li><strong>IOC：</strong>控制反转，把创建对象过程交给 Spring 进行管理</li><li><strong>Aop：</strong>面向切面，不修改源代码进行功能增强 </li></ul></li><li>Spring 特点 <ul><li>方便解耦，简化开发 </li><li>Aop 编程支持 </li><li>方便程序测试 </li><li>方便和其他框架进行整合 </li><li>方便进行事务操作 </li><li>降低 API 开发难度 </li></ul></li></ul><h2 id="1-2-如何创建Spring项目"><a href="#1-2-如何创建Spring项目" class="headerlink" title="1.2 如何创建Spring项目"></a>1.2 如何创建Spring项目</h2><h3 id="1-2-1-手动创建方法"><a href="#1-2-1-手动创建方法" class="headerlink" title="1.2.1 手动创建方法"></a>1.2.1 手动创建方法</h3><ol><li>创建普通的java工程</li><li>导入spring5相关的jar包（只需导入核心的四个包以及longging包即可正常运行spring）<img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211117220627931.png" alt="image-20211117220627931"></li></ol><h3 id="1-2-2-通过Maven创建Spring"><a href="#1-2-2-通过Maven创建Spring" class="headerlink" title="1.2.2 通过Maven创建Spring"></a>1.2.2 通过Maven创建Spring</h3><h1 id="二、IOC"><a href="#二、IOC" class="headerlink" title="二、IOC"></a>二、IOC</h1><h2 id="2-1-IOC概述"><a href="#2-1-IOC概述" class="headerlink" title="2.1  IOC概述"></a>2.1  IOC概述</h2><ul><li>IOC：控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理 </li><li>使用 IOC 目的：为了耦合度降低 </li></ul><h2 id="2-2-IOC底层原理"><a href="#2-2-IOC底层原理" class="headerlink" title="2.2 IOC底层原理"></a>2.2 IOC底层原理</h2><p>IOC底层是基于<strong>xml 解析、工厂模式、反射</strong>实现的<img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211117221352677.png" alt="image-20211117221352677"></p><p>IOC 思想基于 IOC 容器完成，<strong>IOC 容器底层就是对象工厂</strong></p><h2 id="2-3-IOC的实现"><a href="#2-3-IOC的实现" class="headerlink" title="2.3 IOC的实现"></a>2.3 IOC的实现</h2><p>Spring 提供 IOC 容器实现两种方式：（两个接口） </p><ul><li>BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用（ 加载配置文件时候不会创建对象，在获取对象才去创建对象 ）</li><li>ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人 员进行使用 （ 加载配置文件时候就会把在配置文件对象进行创建）</li></ul><p>此外，ApplicationContext接口也有自己的实现类<img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211117221857383.png" alt="image-20211117221857383"></p><h2 id="2-4-IOC操作Bean管理"><a href="#2-4-IOC操作Bean管理" class="headerlink" title="2.4 IOC操作Bean管理"></a>2.4 IOC操作Bean管理</h2><h3 id="2-4-1-什么是Bean管理"><a href="#2-4-1-什么是Bean管理" class="headerlink" title="2.4.1 什么是Bean管理"></a>2.4.1 什么是Bean管理</h3><p>Bean 管理指的是两个操作 ：</p><ul><li>（1）Spring<strong>创建对象</strong> </li><li>（2）Spirng <strong>注入属性</strong></li></ul><p>Bean 管理操作有两种方式 </p><ul><li>（1）基于xml配置文件方式实现 </li><li>（2）基于注解方式实现【推荐】</li></ul><h3 id="2-4-2-基于xml的Bean管理实现"><a href="#2-4-2-基于xml的Bean管理实现" class="headerlink" title="2.4.2 基于xml的Bean管理实现"></a>2.4.2 基于xml的Bean管理实现</h3><h4 id="2-4-2-1创建对象"><a href="#2-4-2-1创建对象" class="headerlink" title="2.4.2.1创建对象"></a>2.4.2.1创建对象</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.User"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建 </li><li>在 bean 标签有很多属性，介绍常用的属性<ul><li>id 属性：唯一标识</li><li>class属性：类全路径（包类路径）</li></ul></li><li>创建对象时候，默认也是执行无参数构造方法完成对象创建，如果创建了有参构造方法，则会覆盖掉无参的，会导致IOC的创建bean对象失败</li></ul><h4 id="2-4-2-2-注入属性"><a href="#2-4-2-2-注入属性" class="headerlink" title="2.4.2.2 注入属性"></a>2.4.2.2 注入属性</h4><ul><li>使用set方法进行注入<ul><li>（1）在类中定义属性及其对应的set方法</li><li>（2）在spring配置文件中配置该类进行对象创建，并同时配置其属性</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"围城"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"钱钟书"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{<span class="comment">//ClassPathXmlApplicationContext("bean.xml")用于用xml配置的情况</span></span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        Book book = context.getBean(<span class="string">"book"</span>, Book.class);<span class="comment">//返回类型与xml中配置的类型不一致</span></span><br><span class="line">    System.out.println(book);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用有参构造进行注入<ul><li>（1）在类中定义属性以及该类的有参构造器</li><li>（2）在spring配置文件中配置该类进行对象创建，并同时配置其属性</li></ul></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"杀死一只知更鸟"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"哈珀·李"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>p名称空间注入【了解即可】</li></ul><h4 id="2-4-2-3-注入其他类型的属性"><a href="#2-4-2-3-注入其他类型的属性" class="headerlink" title="2.4.2.3 注入其他类型的属性"></a>2.4.2.3 注入其他类型的属性</h4><ul><li>null值</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"围城"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>属性值包含特殊符号，比如&lt;和&gt;（使用CDATA）</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;围城&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"钱钟书"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>外部bean<ul><li>创建两个类 service 类和 dao 类 </li><li>在 service 调用 dao 里面的方法 </li><li>在 spring 配置文件中进行配置</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"UserService的add方法"</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.UserService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.UserDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>内部bean</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>{<span class="comment">//员工类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;<span class="comment">//员工类内部含有部门类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>{<span class="comment">//部门类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈豪"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dept"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Dept"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"技术部"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>级联赋值</p><ul><li><p>第一种写法：</p></li><li><p>```xml</p><bean id="emp" class="com.ch.pojo.Emp">    <property name="name" value="陈豪">    <property name="dept" ref="dept"></property></property></bean><bean id="dept" class="com.ch.pojo.Dept">    <property name="name" value="技术部"></property></bean><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第二种写法：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class Emp {</span><br><span class="line">      private String name;</span><br><span class="line">      private Dept dept;</span><br><span class="line">  </span><br><span class="line">      public Dept getDept() {//生成内部类属性对应的get方法</span><br><span class="line">          return dept;</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure></li><li><p>```xml</p><bean id="emp" class="com.ch.pojo.Emp">    <property name="name" value="陈豪">    <property name="dept" ref="dept">    <property name="dept.name" value="财务部"></property></property></property></bean><bean id="dept" class="com.ch.pojo.Dept"></bean><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.4.2.4 注入集合属性</span><br><span class="line"></span><br><span class="line">- 数组</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;property name="courses1"&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;value&gt;语文课&lt;/value&gt;</span><br><span class="line">        &lt;value&gt;数学课&lt;/value&gt;</span><br><span class="line">    &lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>list</p></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>英语课<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>政治课<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>map</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"地理课"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"生物课"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>set</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>物理课<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>化学课<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在集合里面注入对象属性</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"围城"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"钱钟书"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"杀死一只知更鸟"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"哈珀·李"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-2-5-提取公共部分"><a href="#2-4-2-5-提取公共部分" class="headerlink" title="2.4.2.5 提取公共部分"></a>2.4.2.5 提取公共部分</h4><ul><li>在spring配置文件中引入名称空间util</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span>//引入<span class="attr">util</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span>//引入util</span><br></pre></td></tr></tbody></table></figure><ul><li>​    使用util标签完成公共部分的提取</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"courses"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>生物课<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>英语课<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses2"</span> <span class="attr">ref</span>=<span class="string">"courses"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-2-6-FactoryBean"><a href="#2-4-2-6-FactoryBean" class="headerlink" title="2.4.2.6 FactoryBean"></a>2.4.2.6 FactoryBean</h4><ul><li><p>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><ul><li>普通 bean：在配置文件中定义 bean 类型就是返回类型 </li><li>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样</li></ul></li><li><p> 创建步骤</p></li><li><p>创建类，让这个类作为工厂 bean，实现接口 FactoryBean</p></li><li><p> 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p></li><li><p>```java<br>public class MyBean implements FactoryBean<user> {//泛型要传入想返回的类型</user></p><pre><code>@Overridepublic User getObject() throws Exception {//重写getObject()方法    User user = new User();    return user;}@Overridepublic Class&lt;?&gt; getObjectType() {    return null;}@Overridepublic boolean isSingleton() {    return FactoryBean.super.isSingleton();}</code></pre><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在xml文件中进行配置</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;bean id="myBean" class="com.ch.pojo.MyBean"/&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>进行测试</p></li><li><p>```java<br>@Test<br>public void test(){//ClassPathXmlApplicationContext(“bean.xml”)用于用xml配置的情况</p><pre><code>ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");User user = context.getBean("myBean", User.class);//返回类型与xml中配置的类型不一致System.out.println(user);</code></pre><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.4.2.7 bean作用域</span><br><span class="line"></span><br><span class="line">在 Spring 里面，默认情况下，bean 是单实例对象</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Book book1= context.getBean("book", Book.class);</span><br><span class="line">Book book2= context.getBean("book", Book.class);</span><br></pre></td></tr></tbody></table></figure></li></ul><p>这意味着以上两个实例book1和book2是同一个对象</p><p>可以通过xml文件设置bean是单实例还是多实例：</p><ul><li>在 spring 配置文件 bean 标签里面有属性 scope 用于设置单实例还是多实例</li><li>scope 属性值第一个值为默认值 singleton，表示是单实例对象，第二个值 prototype，表示是多实例对象</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>//单例</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"围城"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"钱钟书"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Book"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>//多例</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"围城"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"钱钟书"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>singleton 和 prototype 区别<ul><li>singleton 单实例，prototype 多实例 </li><li>设置 scope 值是 singleton 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong>，设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建 对象，<strong>在调用 getBean 方法时候创建多实例对象</strong></li></ul></li></ul><h4 id="2-4-2-8-bean的生命周期"><a href="#2-4-2-8-bean的生命周期" class="headerlink" title="2.4.2.8 bean的生命周期"></a>2.4.2.8 bean的生命周期</h4><ul><li><p>生命周期 ：从对象创建到对象销毁的过程 </p></li><li><p>bean 生命周期 </p><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法） </li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li>bean 可以使用了（对象获取到了） </li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ul></li><li><p>示例：</p><ul><li><p>```java<br>public class User {<br>   private String name;</p><pre><code>public User() {    System.out.println("第一步：调用无参构造器创建bean实例");}public void setName(String name) {    this.name = name;    System.out.println("第二步：调用set方法设置对象属性");}public void initMethod(){    System.out.println("第三步：调用对象的初始化方法");}public void destroyMethod(){    System.out.println("第五步：调用对象的销毁方法");}</code></pre><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;bean id="user" class="com.ch.pojo.User" init-method="initMethod" destroy-method="destroyMethod"&gt;</span><br><span class="line">    &lt;property name="name" value="陈豪"/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    User user = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    System.out.println(<span class="string">"第四步：获取创建的bean实例"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    context.close();<span class="comment">//注意要在context关闭之后才会执行销毁方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>测试结果如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一步：调用无参构造器创建bean实例</span></span><br><span class="line"><span class="comment">第二步：调用set方法设置对象属性</span></span><br><span class="line"><span class="comment">第三步：调用对象的初始化方法</span></span><br><span class="line"><span class="comment">第四步：获取创建的bean实例</span></span><br><span class="line"><span class="comment">User{name='陈豪'}</span></span><br><span class="line"><span class="comment">第五步：调用对象的销毁方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h4 id="2-4-2-9-bean-的后置处理器"><a href="#2-4-2-9-bean-的后置处理器" class="headerlink" title="2.4.2.9 bean 的后置处理器"></a>2.4.2.9 bean 的后置处理器</h4><p>bean的后置处理器用于在对象的初始化之前和初始化之后对对象进行额外处理</p><p>加入后置处理器后，bean的生命周期变为七步</p><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li><strong>把 bean 实例传递 bean 后置处理器的方法postProcessBeforeInitialization</strong></li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li><strong>把 bean 实例传递 bean 后置处理器的方法postProcessAfterInitialization</strong></li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ul><p>示例：</p><ul><li><p>创建类，实现接口 BeanPostProcessor，创建后置处理器</p></li><li><p>```java<br>public class UserPost implements BeanPostProcessor {</p><pre><code>@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName)        throws BeansException {    System.out.println("在初始化之前执行的方法");    return bean;}@Overridepublic Object postProcessAfterInitialization(Object bean, String beanName)        throws BeansException {    System.out.println("在初始化之后执行的方法");    return bean;}</code></pre><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 配置后置处理器</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;bean id="userPost" class="com.ch.pojo.UserPost"&gt;&lt;/bean&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="2-4-2-10-xml自动装配"><a href="#2-4-2-10-xml自动装配" class="headerlink" title="2.4.2.10 xml自动装配"></a>2.4.2.10 xml自动装配</h4><p>自动装配就是指根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现自动装配</span></span><br><span class="line"><span class="comment"> bean 标签属性 autowire，配置自动装配</span></span><br><span class="line"><span class="comment"> autowire 属性常用两个值：</span></span><br><span class="line"><span class="comment"> byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样</span></span><br><span class="line"><span class="comment"> byType 根据属性类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据属性名称注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Emp"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"xx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Dept"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--根据属性名称注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Emp"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"aa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept1"</span> <span class="attr">class</span>=<span class="string">"com.ch.pojo.Dept"</span>&gt;</span><span class="comment">&lt;!--注入值 bean 的 id 值和类属性名称不用一样--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"bb"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-2-11-注入外部属性文件"><a href="#2-4-2-11-注入外部属性文件" class="headerlink" title="2.4.2.11 注入外部属性文件"></a>2.4.2.11 注入外部属性文件</h4><p><strong>下面以配置数据库连接池为例：</strong></p><ul><li>创建外部属性文件，properties 格式文件，写数据库信息</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>把外部 properties 属性文件引入到 spring 配置文件中</p><ul><li><p>引入 context 名称空间</p></li><li><p>```xml</p><!--引入 context 名称空间--><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;">http://www.springframework.org/schema/beans"</a></p><pre><code>   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xmlns:util="http://www.springframework.org/schema/util"   xmlns:context="http://www.springframework.org/schema/context"   xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/util   http://www.springframework.org/schema/util/spring-util.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd"&gt;</code></pre><!--在 spring 配置文件使用标签引入外部属性文件--><pre><code>&lt;!--引入外部属性文件--&gt;</code></pre><p>&lt;context:property-placeholder location=”classpath:jdbc.properties”/&gt;</p><!--配置连接池--> <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">       <property name="driverClassName" value="${driver}"></property>       <property name="url" value="${url}"></property>       <property name="username" value="${username}"></property>       <property name="password" value="${password}"></property></bean><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.4.3 基于注解的Bean管理实现</span><br><span class="line"></span><br><span class="line">#### 2.4.3.1 关于注解的概述</span><br><span class="line"></span><br><span class="line">- 注解是代码特殊标记</span><br><span class="line">- 格式：@注解名称(属性名称=属性值, 属性名称=属性值..) </span><br><span class="line">- 注解作用在类上面，方法上面，属性上面 </span><br><span class="line">- 使用注解目的：简化 xml 配置</span><br><span class="line">- Spring 针对 Bean 管理中创建对象提供的注解有：</span><br><span class="line">  - @Component （普通注解）</span><br><span class="line">  - @Service （一般用于业务逻辑层或者service层）</span><br><span class="line">  - @Controller （一般用于web层）</span><br><span class="line">  - @Repository（一般用于dao层）</span><br><span class="line"></span><br><span class="line">**上面四个注解功能是一样的，只是习惯性地用在不同的层次上**</span><br><span class="line"></span><br><span class="line">#### 2.4.3.2 开启注解</span><br><span class="line"></span><br><span class="line">- 引入依赖</span><br><span class="line"></span><br><span class="line">![image-20211118182257599](C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211118182257599.png)</span><br><span class="line"></span><br><span class="line">- 开启组件扫描</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;!--开启组件扫描</span><br><span class="line"> 1 如果扫描多个包，多个包使用逗号隔开</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.ch"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><p><strong>开启组件扫描细节配置</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters="false" 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ch"</span> <span class="attr">use-default</span><span class="attr">filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ch"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-3-3-注解的使用"><a href="#2-4-3-3-注解的使用" class="headerlink" title="2.4.3.3 注解的使用"></a>2.4.3.3 注解的使用</h4><ul><li>基于注解方式创建类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类上面添加创建对象注解</span></span><br><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService --&gt; userService</span></span><br><span class="line"><span class="meta">@Component(value = "userService")</span> <span class="comment">//类似于&lt;bean id="userService" class=".."/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>{</span><br><span class="line"> System.out.println(<span class="string">"service add......."</span>);</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>基于注解方式注入属性</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>:根据属性类型进行自动装配</span><br><span class="line">第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</span><br><span class="line">第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line"> <span class="comment">//定义 dao 类型属性</span></span><br><span class="line"> <span class="comment">//不需要添加 set 方法</span></span><br><span class="line"> <span class="comment">//添加注入属性注解</span></span><br><span class="line"> <span class="meta">@Autowired</span> </span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>{</span><br><span class="line"> System.out.println(<span class="string">"service add......."</span>);</span><br><span class="line"> userDao.add();</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span>：根据名称进行注入</span><br><span class="line">这个<span class="meta">@Qualifier</span> 注解的使用，和上面<span class="meta">@Autowired</span> 一起使用</span><br><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="meta">@Qualifier(value = "userDaoImpl1")</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;<span class="comment">//适用于UserDao有多个重载的情况</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>：可以根据类型注入，可以根据名称注入,但不是spring的jar包中的，而时javax的，不推荐使用</span><br><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = "userDaoImpl1")</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>：注入普通类型属性</span><br><span class="line"><span class="meta">@Value(value = "abc")</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-3-4-完全注解开发"><a href="#2-4-3-4-完全注解开发" class="headerlink" title="2.4.3.4 完全注解开发"></a>2.4.3.4 完全注解开发</h4><ul><li>创建配置类，替代 xml 配置文件</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = {"com.atguigu"})</span><span class="comment">//扫描目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>编写测试类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span> </span>{</span><br><span class="line"> <span class="comment">//加载配置类，AnnotationConfigApplicationContext用于完全注解</span></span><br><span class="line"> ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"> UserService userService = context.getBean(<span class="string">"userService"</span>, UserService.class);</span><br><span class="line"> System.out.println(userService);</span><br><span class="line"> userService.add();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h1><h2 id="3-1-AOP概述"><a href="#3-1-AOP概述" class="headerlink" title="3.1 AOP概述"></a>3.1 AOP概述</h2><ul><li>什么是AOP：面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li><li>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</li><li>AOP 底层使用动态代理，分两种情况：<ul><li>第一种 有接口情况，使用 JDK 动态代理 ：创建接口实现类代理对象，增强类的方法</li><li>第二种 没有接口情况，使用 CGLIB 动态代理 ：创建子类的代理对象，增强类的方法</li></ul></li></ul><h2 id="3-2-JDK动态代理实现"><a href="#3-2-JDK动态代理实现" class="headerlink" title="3.2 JDK动态代理实现"></a>3.2 JDK动态代理实现</h2><ul><li>创建接口，定义方法</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>创建接口实现类，实现方法</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是UserDaoImpl"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 Proxy 类创建接口代理对象</li></ul><p><strong>Proxy.newProxyInstance( )中有三个参数</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import java.lang.reflect.Proxy;(Proxy是这个包下的)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces={UserDao.class};<span class="comment">//增强方法所在的类实现的接口，支持多个接口，故用class数组去接收</span></span><br><span class="line">        UserDaoImpl userDaoImpl = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        <span class="comment">//第一参数，类加载器</span></span><br><span class="line">        <span class="comment">//第二参数，增强方法所在的类实现的接口，支持多个接口</span></span><br><span class="line">        <span class="comment">//第三参数，通过实现 InvocationHandler 接口来创建代理对象，写增强的部分</span></span><br><span class="line">        UserDao dao =</span><br><span class="line">                (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="line">                        <span class="keyword">new</span> UserDaoProxy(userDaoImpl));<span class="comment">//创建的是谁的代理对象，就把他传递过来（UserDaoImpl）</span></span><br><span class="line">        <span class="keyword">int</span> result = dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"result:"</span>+result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    <span class="comment">//有参数构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object object)</span></span>{<span class="comment">//创建的是谁的代理对象，就把他传递过来</span></span><br><span class="line">        <span class="keyword">this</span>.object=object;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//method是被增强的方法（此处是UserDaoImpl中的add方法），args是传入add中的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">"方法之前执行...."</span>+method.getName()+<span class="string">" :传递的参数..."</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        Object res = method.invoke(object, args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">"方法之后执行...."</span>+object);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>执行结果如下：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法之前执行....add :传递的参数...[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">方法之后执行....我是UserDaoImpl</span><br><span class="line">result:<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-AOP术语"><a href="#3-3-AOP术语" class="headerlink" title="3.3 AOP术语"></a>3.3 AOP术语</h2><p>连接点</p><ul><li>类中可以被增强的方法</li></ul><p>切入点</p><ul><li>实际被增强的方法</li></ul><p>通知（增强）</p><ul><li>实际增强的逻辑部分称为通知</li><li>通知的类型：<ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知</li></ul></li></ul><p>切面</p><ul><li>切面实际上是一个动作，是指把通知应用到切入点的过程</li></ul><h2 id="3-4-AOP操作"><a href="#3-4-AOP操作" class="headerlink" title="3.4 AOP操作"></a>3.4 AOP操作</h2><p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作</p><p>AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</p><ul><li><p>基于 AspectJ 实现 AOP 操作</p><ul><li>基于 xml 配置文件实现</li><li><strong>基于注解方式实现</strong>【使用】</li></ul></li><li><p>引入jar包</p></li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211119144216264.png" alt="image-20211119144216264"></p><h3 id="3-4-1-切入点表达式"><a href="#3-4-1-切入点表达式" class="headerlink" title="3.4.1 切入点表达式"></a>3.4.1 切入点表达式</h3><ul><li>切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </li><li>语法结构： execution ( [权限修饰符] [返回类型] [类全路径] [方法名称] [参数列表] ) <ul><li>举例：对 com.ch.dao.BookDao 类里面的 add 进行增强 execution(* com.atguigu.dao.BookDao.add(..))</li><li>举例：对 com.ch.dao.BookDao 类里面的所有的方法进行增强 execution(* com.atguigu.dao.BookDao.* (..)) </li></ul></li></ul><p><strong>权限修饰符和返回类型一般用*代替，而参数列表一般用..代替</strong></p><h3 id="3-4-2-基于注解方式实现AOP"><a href="#3-4-2-基于注解方式实现AOP" class="headerlink" title="3.4.2 基于注解方式实现AOP"></a>3.4.2 基于注解方式实现AOP</h3><ul><li>在spring配置文件中开启注解扫描</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xmlns:aop="http://www.springframework.org/schema/aop"</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/aop</span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop.xsd"</span><br><span class="line"></span><br><span class="line">//开启注解扫描</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ch"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启 Aspect 生成代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>创建UserLogin类，并通过注解创建对象</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLogin</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>创建LoginProxy类，并通过注解创建对象，同时通过@Aspect生成代理对象</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginProxy</span> </span>{<span class="comment">//注意*和com之间的空格一定要加</span></span><br><span class="line">    <span class="meta">@Before(value = "execution(* com.ch.pojo.UserLogin.login(..))")</span><span class="comment">//@Before 注解表示作为前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"请输入用户名和密码"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginTest</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginTest</span><span class="params">()</span></span>{</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        UserLogin userLogin = context.getBean(<span class="string">"userLogin"</span>, UserLogin.class);</span><br><span class="line">        userLogin.login();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>此外另外还有其他注解：<ul><li>@AfterReturning 后置通知（返回通知</li><li>@After 最终通知</li><li>@AfterThrowing 异常通知 </li><li><strong>@Around 环绕通知</strong></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(value = "execution(* com.ch.pojo.UserLogin.login(..))")</span><span class="comment">//要传入ProceedingJoinPoint代表切入点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    System.out.println(<span class="string">"环绕之前........."</span>);</span><br><span class="line">    <span class="comment">//被增强的方法执行</span></span><br><span class="line">    proceedingJoinPoint.proceed();</span><br><span class="line">    System.out.println(<span class="string">"环绕之后........."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-3-一些其他的AOP注解"><a href="#3-4-3-一些其他的AOP注解" class="headerlink" title="3.4.3 一些其他的AOP注解"></a>3.4.3 一些其他的AOP注解</h3><ul><li>@Pointcut</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用@Pointcut注解设置切入点</span></span><br><span class="line"><span class="meta">@Pointcut(value = "execution(* com.ch.prjo.User.add(..))")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pointdemo</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(value = "Pointdemo()")</span><span class="comment">//引入切入点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>{</span><br><span class="line"> System.out.println(<span class="string">"before........."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>@Order</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span><span class="comment">//在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span></span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-4-完全注解开发"><a href="#3-4-4-完全注解开发" class="headerlink" title="3.4.4 完全注解开发"></a>3.4.4 完全注解开发</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = {"com.ch"})</span><span class="comment">//开启注解扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span><span class="comment">//开启Aspect生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAop</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="四、JdbcTemplate"><a href="#四、JdbcTemplate" class="headerlink" title="四、JdbcTemplate"></a>四、JdbcTemplate</h1><h2 id="4-1-JdbcTemplate概述"><a href="#4-1-JdbcTemplate概述" class="headerlink" title="4.1 JdbcTemplate概述"></a>4.1 JdbcTemplate概述</h2><p>什么是 JdbcTemplate：</p><ul><li>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</li></ul><h2 id="4-2-准备工作"><a href="#4-2-准备工作" class="headerlink" title="4.2 准备工作"></a>4.2 准备工作</h2><ul><li>需要的jar包</li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211119155650965.png" alt="image-20211119155650965"></p><ul><li>配置数据库连接池（可在spring配置文件中配置，也可通过引入外部属性文件进行配置）</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//创建properties文件</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在 spring 配置文件使用标签引入外部属性文件--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line">//配置连接池</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${driver}"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${url}"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${username}"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${password}"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置JdbcTemplate对象，注入DataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--注入 dataSource--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/17/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/17/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis学习笔记"><a href="#Mybatis学习笔记" class="headerlink" title="Mybatis学习笔记"></a>Mybatis学习笔记</h1><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-1-导入MyBatis相关-jar-包"><a href="#1-1-导入MyBatis相关-jar-包" class="headerlink" title="1.1 导入MyBatis相关 jar 包"></a>1.1 导入MyBatis相关 jar 包</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_learn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysqlq驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于自动生成getter、setter、有参、无参、tostring等方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：在父工程的pom.xml中最好过滤掉静态资源</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-编写MyBatis核心配置文件"><a href="#1-2-编写MyBatis核心配置文件" class="headerlink" title="1.2 编写MyBatis核心配置文件"></a>1.2 编写MyBatis核心配置文件</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--database.properties文件放在resourses目录下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span><span class="comment">&lt;!--采用引用外部属性文件方式引入连接数据库需要的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span><span class="comment">&lt;!--下划线驼峰自动转换--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span><span class="comment">&lt;!--设置所用日志工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.ch.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span><span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span><span class="comment">&lt;!--是否使用线程池--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${driver}"</span>/&gt;</span><span class="comment">&lt;!--采用引用方式引入连接数据库需要的属性--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${url}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${username}"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${password}"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/ch/dao/UserMapper.xml"</span>/&gt;</span><span class="comment">&lt;!--注册Mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong>使用resource方式为Mapper.xml文件进行注册时，其默认目录是resources目录，当Mapper.xml文件较多时，可在resource目录下新建一个mapper目录并将其放入，此时其注册路径可写为<mapper resource="mapper/BlogMapper.xml"></mapper></p><h3 id="1-3-编写MyBatis工具类"><a href="#1-3-编写MyBatis工具类" class="headerlink" title="1.3 编写MyBatis工具类"></a>1.3 编写MyBatis工具类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//使用Mybatis第一步 ：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例.</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-创建实体类"><a href="#1-4-创建实体类" class="headerlink" title="1.4 创建实体类"></a>1.4 创建实体类</h3><h3 id="1-5-创建Mapper接口类"><a href="#1-5-创建Mapper接口类" class="headerlink" title="1.5 创建Mapper接口类"></a>1.5 创建Mapper接口类</h3><h3 id="1-6-编写Mapper-xml配置文件"><a href="#1-6-编写Mapper-xml配置文件" class="headerlink" title="1.6 编写Mapper.xml配置文件"></a>1.6 编写Mapper.xml配置文件</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个指定的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ch.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="二、MyBatis的CRUD操作"><a href="#二、MyBatis的CRUD操作" class="headerlink" title="二、MyBatis的CRUD操作"></a>二、MyBatis的CRUD操作</h1><h2 id="2-1-在Mapper-xml中进行配置"><a href="#2-1-在Mapper-xml中进行配置" class="headerlink" title="2.1 在Mapper.xml中进行配置"></a>2.1 在Mapper.xml中进行配置</h2><p>示例：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ch.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对于不同的语句，可用不同的标签进行配置，有<select>   等其中id属性用于指定对应的方法，parameterType属性用于指定参数的类型，resultType属性用于指定返回值的类型，若语句中需要传入参数，用#{}传入，且参数名需要与方法中指定的参数名字相同，如下：123public interface UserMapper {    User getUserById(int tt);}123&lt;select id="getUserById" parameterType="int" resultType="User"&gt;        select * from mybatis.t_user where id=#{tt}&lt;/select&gt;为了解决这一问题，有以下两种方法：2.1.1 @Param通过@param注解为方法中的参数起别名，如下：123public interface UserMapper {    User getUserById(@Param("tt") int id);}此时</select>标签中即可传入tt作为参数</p><p><strong>注意：</strong>@Param注解有以下使用原则：</p><ul><li>在方法只接收一个参数的情况下，可以不使用@Param。</li><li>在方法接收多个参数的情况下，建议一定要使用@Param注解给参数命名。</li><li>如果参数是 JavaBean ， 则不能使用@Param。</li><li>不使用@Param注解时，参数只能有一个，并且是Javabean。</li></ul><h3 id="2-1-2-万能的map"><a href="#2-1-2-万能的map" class="headerlink" title="2.1.2 万能的map"></a>2.1.2 万能的map</h3><p>1、在接口方法中，参数直接传递Map；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="function">User <span class="title">selectUserByNP</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;<span class="comment">//通过名字和密码得到对应用户</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、编写sql语句的时候，需要传递参数类型，参数类型为map</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByNP"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"com.ch.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where name = #{username} and pwd = #{pwd}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>,<span class="string">"小明"</span>);</span><br><span class="line">map.put(<span class="string">"pwd"</span>,<span class="string">"123456"</span>);</span><br><span class="line">User user = mapper.selectUserByNP(map);</span><br></pre></td></tr></tbody></table></figure><p>总结：如果参数过多，我们可以考虑直接使用Map实现，如果参数比较少，直接传递参数即可</p><h2 id="2-2-使用注解进行CRUD操作"><a href="#2-2-使用注解进行CRUD操作" class="headerlink" title="2.2 使用注解进行CRUD操作"></a>2.2 使用注解进行CRUD操作</h2><ul><li><p>sql 类型主要分成 :</p></li><li><ul><li>@select ()</li><li>@update ()</li><li>@Insert ()</li><li>@delete ()</li></ul></li></ul><p><strong>注意：</strong>利用注解开发就不需要mapper.xml映射文件了 .</p><p>1、我们在我们的接口中添加注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部用户</span></span><br><span class="line"><span class="meta">@Select("select id,name,pwd password from user")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>2、在mybatis的核心配置文件中注入</p><p><strong>注意：</strong>使用xml配置实现CRUD时，在mybaits配置文件中配置的是mapper对应的xml文件，而使用注解时，配置的是mapper</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用class绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.kuang.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-数据库字段名和实体类属性名不一致的问题"><a href="#2-3-数据库字段名和实体类属性名不一致的问题" class="headerlink" title="2.3 数据库字段名和实体类属性名不一致的问题"></a>2.3 数据库字段名和实体类属性名不一致的问题</h2><p>如数据库中密码字段为password，而java的User类中的属性名为pwd，解决方法如下：</p><h3 id="2-3-1-起别名"><a href="#2-3-1-起别名" class="headerlink" title="2.3.1 起别名"></a>2.3.1 起别名</h3><p>在sql语句中为列名指定别名 , 别名和java实体类的属性名一致，示例如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  select id , name , pwd as password from user where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-2-使用结果集映射ResultMap【推荐】"><a href="#2-3-2-使用结果集映射ResultMap【推荐】" class="headerlink" title="2.3.2 使用结果集映射ResultMap【推荐】"></a>2.3.2 使用结果集映射ResultMap【推荐】</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">  select id , name , pwd from user where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id属性的值必须和select标签中resultMap属性的值一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--当该字段为主键时，一般用id标签，其他字段用result标签--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--若column值和property值相同时可忽略不写--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-事务提交问题"><a href="#2-4-事务提交问题" class="headerlink" title="2.4 事务提交问题"></a>2.4 事务提交问题</h2><h3 id="2-4-1-如何提交事务"><a href="#2-4-1-如何提交事务" class="headerlink" title="2.4.1 如何提交事务"></a>2.4.1 如何提交事务</h3><p><strong>注意：</strong>mybatis中默认是不会自动提交事务的，故在对数据库进行增删改操作后，一定要手动提交事务！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.updateUser(<span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">"罗恩"</span>,<span class="string">"555"</span>));</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>){</span><br><span class="line">        sqlSession.commit();<span class="comment">//一定要手动提交事务，否则数据库中的内容不会改变！</span></span><br><span class="line">    }</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-2-设置自动提交事务【不推荐】"><a href="#2-4-2-设置自动提交事务【不推荐】" class="headerlink" title="2.4.2 设置自动提交事务【不推荐】"></a>2.4.2 设置自动提交事务【不推荐】</h3><p>用户可通过在sqlSessionFactory的openSession()方法传入一个boolean值来表示是否需要自动提交事务，因此我们可同通过改造MybatisUtils工具类的getSession( ) 方法，重载实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取SqlSession连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>{<span class="comment">//不传参时默认提交事务</span></span><br><span class="line">    <span class="keyword">return</span> getSession(<span class="keyword">true</span>); <span class="comment">//事务自动提交</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span>{<span class="comment">//传入false时关闭自动提交事务</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(flag);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="三、日志工厂"><a href="#三、日志工厂" class="headerlink" title="三、日志工厂"></a>三、日志工厂</h1><h2 id="3-1-如何加入日志"><a href="#3-1-如何加入日志" class="headerlink" title="3.1 如何加入日志"></a>3.1 如何加入日志</h2><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>默认使用的是STDOUT_LOGGING，但我们一般使用log4j</p><h2 id="3-2-Log4j"><a href="#3-2-Log4j" class="headerlink" title="3.2 Log4j"></a>3.2 Log4j</h2><p>1、导入log4j的包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、配置文件编写</p><p>命名为log4j.properties，放于resourses文件下</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d{yy-MM-dd}][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></tbody></table></figure><p>3、setting设置日志实现</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>4、在程序中使用Log4j进行输出！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意导包：org.apache.log4j.Logger</span></span><br><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(MyTest.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>{</span><br><span class="line">   logger.info(<span class="string">"info：进入selectUser方法"</span>);</span><br><span class="line">   logger.debug(<span class="string">"debug：进入selectUser方法"</span>);</span><br><span class="line">   logger.error(<span class="string">"error: 进入selectUser方法"</span>);</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">   <span class="keyword">for</span> (User user: users){</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  }</span><br><span class="line">   session.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="四、一对多和多对一"><a href="#四、一对多和多对一" class="headerlink" title="四、一对多和多对一"></a>四、一对多和多对一</h1><h2 id="4-1-多对一的处理"><a href="#4-1-多对一的处理" class="headerlink" title="4.1 多对一的处理"></a>4.1 多对一的处理</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">   1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudents"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span> &gt;</span></span><br><span class="line">  select s.id sid, s.name sname , t.name tname</span><br><span class="line">  from student s,teacher t</span><br><span class="line">  where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4-2-一对多的处理"><a href="#4-2-一对多的处理" class="headerlink" title="4.2 一对多的处理"></a>4.2 一对多的处理</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.mapper.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   思路:</span></span><br><span class="line"><span class="comment">       1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">       2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">           1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">               JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">               JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">               ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">      select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">      from student s,teacher t</span><br><span class="line">      where s.tid = t.id and t.id=#{id}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4-3-复杂关系查询总结"><a href="#4-3-复杂关系查询总结" class="headerlink" title="4.3 复杂关系查询总结"></a>4.3 复杂关系查询总结</h2><p>1、关联-association</p><p>2、集合-collection</p><p>3、所以association是用于一对一和多对一，而collection是用于一对多的关系</p><p>4、JavaType和ofType都是用来指定对象类型的</p><ul><li>JavaType是用来指定pojo中属性的类型</li><li>ofType指定的是映射到list集合属性中pojo的类型。</li></ul><h1 id="五、动态SQL"><a href="#五、动态SQL" class="headerlink" title="五、动态SQL"></a>五、动态SQL</h1><h2 id="5-1-什么是动态SQL"><a href="#5-1-什么是动态SQL" class="headerlink" title="5.1 什么是动态SQL"></a>5.1 什么是动态SQL</h2><p>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句</p><p>可用如下标签实现：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- if</span><br><span class="line">- choose (when, otherwise)</span><br><span class="line">- trim (where, set)</span><br><span class="line">- foreach</span><br></pre></td></tr></tbody></table></figure><h2 id="5-2-通过标签实现动态SQL"><a href="#5-2-通过标签实现动态SQL" class="headerlink" title="5.2 通过标签实现动态SQL"></a>5.2 通过标签实现动态SQL</h2><h3 id="5-2-1-where标签"><a href="#5-2-1-where标签" class="headerlink" title="5.2.1 where标签"></a>5.2.1 where标签</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">          title = #{title}</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">          and author = #{author}</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><h3 id="5-2-2-set标签"><a href="#5-2-2-set标签" class="headerlink" title="5.2.2 set标签"></a>5.2.2 set标签</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  update blog</span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #{title},</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #{author}</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id = #{id};</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-3-choose标签"><a href="#5-2-3-choose标签" class="headerlink" title="5.2.3 choose标签"></a>5.2.3 choose标签</h3><p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #{title}</span><br><span class="line">           <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">              and author = #{author}</span><br><span class="line">           <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">              and views = #{views}</span><br><span class="line">           <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-4-foreach标签"><a href="#5-2-4-foreach标签" class="headerlink" title="5.2.4 foreach标签"></a>5.2.4 foreach标签</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">       item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">       open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">       close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">       separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">       select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--创建万能map，此时map中存的一个list集合ids，而ids中存的是id</span></span><br><span class="line"><span class="comment">        HashMap map = new HashMap();</span></span><br><span class="line"><span class="comment">        List&lt;Integer&gt; ids = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line"><span class="comment">        ids.add(1);</span></span><br><span class="line"><span class="comment">        ids.add(2);</span></span><br><span class="line"><span class="comment">        ids.add(3);</span></span><br><span class="line"><span class="comment">        map.put("ids",ids);</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span>  <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">          id=#{id}</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-5-小结"><a href="#5-2-5-小结" class="headerlink" title="5.2.5 小结"></a>5.2.5 小结</h3><p><strong>注意：</strong></p><p>当使用动态SQL时，其Mapper接口中定义的方法传入的参数尽量使用万能map，方便编写sql语句</p><p>最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql 对照着改，防止出错</p><h2 id="5-3-SQL片段"><a href="#5-3-SQL片段" class="headerlink" title="5.3 SQL片段"></a>5.3 SQL片段</h2><p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p><p><strong>提取SQL片段：</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      title = #{title}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">      and author = #{author}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>引用SQL片段：</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong></p><p>最好基于 单表来定义 sql 片段，提高片段的可重用性</p><p>在 sql 片段中不要包括 where</p><h1 id="六-缓存"><a href="#六-缓存" class="headerlink" title="六 缓存"></a>六 缓存</h1><h2 id="6-1-什么是缓存"><a href="#6-1-什么是缓存" class="headerlink" title="6.1 什么是缓存"></a>6.1 什么是缓存</h2><ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><h2 id="6-2-为什么使用缓存"><a href="#6-2-为什么使用缓存" class="headerlink" title="6.2 为什么使用缓存"></a>6.2 为什么使用缓存</h2><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率，适用于经常查询并且不经常改变的数据</li></ul><h2 id="6-3-MyBatis的缓存"><a href="#6-3-MyBatis的缓存" class="headerlink" title="6.3 MyBatis的缓存"></a>6.3 MyBatis的缓存</h2><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p><h3 id="6-3-1-一级缓存"><a href="#6-3-1-一级缓存" class="headerlink" title="6.3.1 一级缓存"></a>6.3.1 一级缓存</h3><p>一级缓存也叫本地缓存：</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库</li></ul><p>一级缓存失效的原因：</p><p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p><p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p><p>1、sqlSession不同</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testQueryUserById(){</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(1);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(1);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">   session2.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>观察结果：发现发送了两条SQL语句！</p><p>结论：<strong>每个sqlSession中的缓存相互独立</strong></p><p>2、sqlSession相同，查询条件不同</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>{</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">2</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>观察结果：发现发送了两条SQL语句！很正常的理解</p><p>结论：<strong>当前缓存中，不存在这个数据</strong></p><p>3、sqlSession相同，两次查询之间执行了增删改操作！</p><p>增加方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>编写SQL</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  update user set name = #{name} where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>{</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">   map.put(<span class="string">"name"</span>,<span class="string">"kuangshen"</span>);</span><br><span class="line">   map.put(<span class="string">"id"</span>,<span class="number">4</span>);</span><br><span class="line">   mapper.updateUser(map);</span><br><span class="line"></span><br><span class="line">   User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>观察结果：查询在中间执行了增删改操作后，重新执行了</p><p>结论：<strong>因为增删改操作可能会对当前数据产生影响</strong></p><p>4、sqlSession相同，手动清除一级缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>{</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   session.clearCache();<span class="comment">//手动清除缓存</span></span><br><span class="line"></span><br><span class="line">   User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一级缓存就是一个map</p><h3 id="6-3-2-二级缓存"><a href="#6-3-2-二级缓存" class="headerlink" title="6.3.2 二级缓存"></a>6.3.2 二级缓存</h3><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p></li><li><p>工作机制：</p></li><li><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，一级缓存中的数据被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中</li></ul></li></ul><p>1、开启全局缓存 【mybatis-config.xml】</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、去每个mapper.xml中配置使用二级缓存</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">官方示例=====&gt;查看官方文档</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"> <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></tbody></table></figure><ul><li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li><li>查出的数据都会被默认先放在一级缓存中</li><li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</li></ul><p><img src="C:\Users\95671\AppData\Roaming\Typora\typora-user-images\image-20211117201935725.png" alt="image-20211117201935725"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/07/29/SpringMVC%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/29/SpringMVC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat7</p><p>Spring版本：5.3.1</p><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a>添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b>打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c>引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p><p><img src="img%5Cimg001.png" alt="images"></p><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p><h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a>默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b>扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p></blockquote><h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.atguigu.mvc.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring5.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring5.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/templates/"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML5"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultCharset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a>实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping("/")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b>通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/hello}"</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/hello")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">HelloWorld</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"target"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/test")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingController</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping("/testRequestMapping")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/testRequestMapping}"</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/test}"</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = {"/testRequestMapping", "/test"}</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/test}"</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@{/test}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = {"/testRequestMapping", "/test"},</span></span><br><span class="line"><span class="meta">        method = {RequestMethod.GET, RequestMethod.POST}</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p><p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/test(username='admin',password=123456)"</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = {"/testRequestMapping", "/test"}</span></span><br><span class="line"><span class="meta">        ,method = {RequestMethod.GET, RequestMethod.POST}</span></span><br><span class="line"><span class="meta">        ,params = {"username","password!=123456"}</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p><p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用/**/xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/testRest/1/admin}"</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testRest/{id}/{username}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRest</span><span class="params">(<span class="meta">@PathVariable("id")</span> String id, <span class="meta">@PathVariable("username")</span> String username)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+id+<span class="string">",username:"</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></tbody></table></figure><h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testParam")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(HttpServletRequest request)</span></span>{</span><br><span class="line">    String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(<span class="string">"username:"</span>+username+<span class="string">",password:"</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/testParam(username='admin',password=123456)}"</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testParam")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(String username, String password)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"username:"</span>+username+<span class="string">",password:"</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@{/testpojo}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testpojo")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPOJO</span><span class="params">(User user)</span></span>{</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//最终结果--&gt;User{id=null, username='张三', password='123', age=23, sex='男', email='123@qq.com'}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testServletAPI")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request)</span></span>{</span><br><span class="line">    request.setAttribute(<span class="string">"testScope"</span>, <span class="string">"hello,servletAPI"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testModelAndView")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">"testScope"</span>, <span class="string">"hello,ModelAndView"</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testModel")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModel</span><span class="params">(Model model)</span></span>{</span><br><span class="line">    model.addAttribute(<span class="string">"testScope"</span>, <span class="string">"hello,Model"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testMap")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>{</span><br><span class="line">    map.put(<span class="string">"testScope"</span>, <span class="string">"hello,Map"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testModelMap")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap modelMap)</span></span>{</span><br><span class="line">    modelMap.addAttribute(<span class="string">"testScope"</span>, <span class="string">"hello,ModelMap"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Model{}</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; {}</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model {}</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap {}</span><br></pre></td></tr></tbody></table></figure><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testSession")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpSession session)</span></span>{</span><br><span class="line">    session.setAttribute(<span class="string">"testSessionScope"</span>, <span class="string">"hello,session"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testApplication")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testApplication</span><span class="params">(HttpSession session)</span></span>{</span><br><span class="line">ServletContext application = session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">"testApplicationScope"</span>, <span class="string">"hello,application"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testHello")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHello</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="img/img002.png"></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:/“，”forward:/employee”</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testForward")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/testHello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="img/img003.png" alt="image-20210706201316593"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:/“，”redirect:/employee”</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testRedirect")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/testHello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="img/img004.png" alt="image-20210706201602267"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/testView"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven /&gt;</p></blockquote><h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a>资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b>资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c>状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>```<br>String paramValue = request.getParameter(this.methodParam);</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 八、RESTful案例</span><br><span class="line"></span><br><span class="line">### 1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> public class Employee {</span><br><span class="line"> </span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"> </span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line">    </span><br><span class="line">    public Integer getId() {</span><br><span class="line">       return id;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public void setId(Integer id) {</span><br><span class="line">       this.id = id;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public String getLastName() {</span><br><span class="line">       return lastName;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public void setLastName(String lastName) {</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public String getEmail() {</span><br><span class="line">       return email;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public void setEmail(String email) {</span><br><span class="line">       this.email = email;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public Integer getGender() {</span><br><span class="line">       return gender;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public void setGender(Integer gender) {</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) {</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    public Employee() {</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></li></ul></blockquote><ul><li><p>准备dao模拟数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>{</span><br><span class="line">      employees = <span class="keyword">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">"E-AA"</span>, <span class="string">"aa@163.com"</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">"E-BB"</span>, <span class="string">"bb@163.com"</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">"E-CC"</span>, <span class="string">"cc@163.com"</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">"E-DD"</span>, <span class="string">"dd@163.com"</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">"E-EE"</span>, <span class="string">"ee@163.com"</span>, <span class="number">1</span>));</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Employee employee)</span></span>{</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="keyword">null</span>){</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      }</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>{</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">(Integer id)</span></span>{</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>{</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a>配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">view-name</span>=<span class="string">"index"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b>创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/employee}"</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a>控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/employee", method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeList</span><span class="params">(Model model)</span></span>{</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">"employeeList"</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"employee_list"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b>创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@{/static/js/vue.js}"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span> <span class="attr">id</span>=<span class="string">"dataTable"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/toAdd}"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"employee : ${employeeList}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${employee.id}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${employee.lastName}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${employee.email}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${employee.gender}"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"deleteA"</span> @<span class="attr">click</span>=<span class="string">"deleteEmployee"</span> <span class="attr">th:href</span>=<span class="string">"@{'/employee/'+${employee.id}}"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{'/employee/'+${employee.id}}"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a>创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"delete_form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b>删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@{/static/js/vue.js}"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>删除超链接</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"deleteA"</span> @<span class="attr">click</span>=<span class="string">"deleteEmployee"</span> <span class="attr">th:href</span>=<span class="string">"@{'/employee/'+${employee.id}}"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">"#dataTable"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">deleteEmployee</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> delete_form = <span class="built_in">document</span>.getElementById(<span class="string">"delete_form"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="javascript">                delete_form.action = event.target.href;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="javascript">                delete_form.submit();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    });</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c>控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/employee/{id}", method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id)</span></span>{</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/employee"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a>配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/toAdd"</span> <span class="attr">view-name</span>=<span class="string">"employee_add"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b>创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@{/employee}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"add"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a>控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/employee", method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmployee</span><span class="params">(Employee employee)</span></span>{</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/employee"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a>修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{'/employee/'+${employee.id}}"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b>控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/employee/{id}", method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id, Model model)</span></span>{</span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">"employee"</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"employee_update"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c>创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@{/employee}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"${employee.id}"</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">th:value</span>=<span class="string">"${employee.lastName}"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">th:value</span>=<span class="string">"${employee.email}"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field="${employee.gender}"可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked="checked"属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:field</span>=<span class="string">"${employee.gender}"</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:field</span>=<span class="string">"${employee.gender}"</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"update"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a>控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/employee", method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>{</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/employee"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@{/testRequestBody}"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testRequestBody")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"requestBody:"</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：</p><p>requestBody:username=admin&amp;password=123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testRequestEntity")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"requestHeader:"</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">"requestBody:"</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080"</a>, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testResponseBody")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></tbody></table></figure><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testResponseUser")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testResponseUser</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1001</span>,<span class="string">"admin"</span>,<span class="string">"123456"</span>,<span class="number">23</span>,<span class="string">"男"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/testAjax}"</span> @<span class="attr">click</span>=<span class="string">"testAjax"</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>b&gt;通过vue和axios处理点击事件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@{/static/js/vue.js}"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@{/static/js/axios.min.js}"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:{</span></span><br><span class="line"><span class="javascript">            <span class="attr">testAjax</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span></span><br><span class="line"><span class="javascript">                axios({</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>:<span class="string">"post"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:event.target.href,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">params</span>:{</span></span><br><span class="line"><span class="javascript">                        <span class="attr">username</span>:<span class="string">"admin"</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">password</span>:<span class="string">"123456"</span></span></span><br><span class="line"><span class="javascript">                    }</span></span><br><span class="line"><span class="javascript">                }).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(response.data);</span></span><br><span class="line"><span class="javascript">                });</span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    });</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testAjax")</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAjax</span><span class="params">(String username, String password)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"username:"</span>+username+<span class="string">",password:"</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,ajax"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testDown")</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">"/static/img/1.jpg"</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=1.jpg"</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>b&gt;在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/testUp")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    String fileName = photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    String hzName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    String photoPath = servletContext.getRealPath(<span class="string">"photo"</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists()){</span><br><span class="line">        file.mkdir();</span><br><span class="line">    }</span><br><span class="line">    String finalPath = photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> File(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.interceptor.FirstInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"firstInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/testRequestEntity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"firstInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.ArithmeticException"</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionAttribute"</span> <span class="attr">value</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"ex"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInit</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]{SpringConfig.class};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]{WebConfig.class};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]{<span class="string">"/"</span>};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() {</span><br><span class="line">        CharacterEncodingFilter encodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="keyword">true</span>);</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]{encodingFilter, hiddenHttpMethodFilter};</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>{</span><br><span class="line"><span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan("com.atguigu.mvc.controller")</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>{</span><br><span class="line">        configurer.enable();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        FirstInterceptor firstInterceptor = <span class="keyword">new</span> FirstInterceptor();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) {</span></span><br><span class="line"><span class="comment">        registry.addViewController("/").setViewName("index");</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) {</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty("java.lang.ArithmeticException", "error");</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute("ex");</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>{</span><br><span class="line">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        ServletContextTemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">"/WEB-INF/templates/"</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">".html"</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> </span>{</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>{</span><br><span class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="img/img005.png" alt="images"></p><h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a>初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>{</span><br><span class="line">    WebApplicationContext rootContext =</span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    WebApplicationContext wac = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) {</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) {</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) {</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                }</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) {</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) {</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) {</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        String attrName = getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b>创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> </span>{</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">            <span class="string">"Fatal initialization error in servlet with name '"</span> + getServletName() +</span><br><span class="line">            <span class="string">"': custom WebApplicationContext class ["</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">"] is not of type ConfigurableWebApplicationContext"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    ConfigurableWebApplicationContext wac =</span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    String configLocation = getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="keyword">null</span>) {</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    }</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c>DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>{</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a>processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) {</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> {</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) {</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        }</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b>doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) {</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) {</span><br><span class="line">            String attrName = (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) {</span><br><span class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) {</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        }</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    RequestPath requestPath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) {</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) {</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="keyword">null</span>) {</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c>doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) {</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) {</span><br><span class="line">                <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) {</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) {</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) {</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) {</span><br><span class="line">            <span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) {</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) {</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) {</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) {</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d>processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) {</span><br><span class="line">            logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) {</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) {</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) {</span><br><span class="line">            logger.trace(<span class="string">"No view rendering, null ModelAndView returned."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol><li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p></li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="img/img006.png" alt="image-20210709214911404"></p><p><img src="img/img007.png" alt="image-20210709214947432"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="img/img008.png" alt="image-20210709215255693"></p><p><img src="img/img009.png" alt="image-20210709215336097"></p><p>b) 存在则执行下面的流程</p><ol start="3"><li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p></li><li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p></li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol start="7"><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p></li><li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p></li><li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p></li><li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p></li><li><p>将渲染结果返回给客户端。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
